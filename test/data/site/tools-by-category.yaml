- category: Low-level Tooling
  tools:
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
        - openapi3 tags
      repository: https://github.com/tufin/oasdiff
      v3: true
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"6e1d946bbc64fad5b7793f0c886922c082dc6fd04b68c756d29c96ae5ccd35ae"'
        readmeLastModified: Mon, 25 Apr 2022 08:34:43 GMT
        description: A diff tool for OpenAPI Specification 3
        created: '2021-02-10T10:28:36Z'
        updated: '2022-04-14T03:46:32Z'
        language: Go
        archived: false
        stars: 84
        watchers: 84
        forks: 8
        owner: Tufin
        logo: https://avatars.githubusercontent.com/u/5352131?v=4
        license: Apache-2.0
        repoEtag: '"6628556cb500311ca5f51f5826155f563293815fa3c531920d353e871998f7d7"'
        repoLastModified: Thu, 14 Apr 2022 03:46:32 GMT
      foundInMaster: true
      name: oasdiff
      category:
        - Low-level Tooling
      language: Go
      source_description:
        - Diff tool for OpenAPI 3.x specs, written as a Golang module
        - >-
          Golang module for deep comparison of two OpenAPI specifications.
          Available also as a command-line.
      v2: false
      v3_1: true
      homepage: https://github.com/tufin/oasdiff
      id: bc6193e93faf07fb5675ef9672cc836a
      swagger: 'No'
      version30: 'Yes'
      version31: 'Yes'
      stars: 84
      watchers: 84
      forks: 8
      created: '2021-02-10T10:28:36Z'
      lastUpdated: '2022-04-14T03:46:32Z'
      readMe: "[![CI](https://github.com/Tufin/oasdiff/workflows/go/badge.svg)](https://github.com/Tufin/oasdiff/actions)\n[![codecov](https://codecov.io/gh/tufin/oasdiff/branch/main/graph/badge.svg?token=Y8BM6X77JY)](https://codecov.io/gh/tufin/oasdiff)\n[![Go Report Card](https://goreportcard.com/badge/github.com/tufin/oasdiff)](https://goreportcard.com/report/github.com/tufin/oasdiff)\n[![GoDoc](https://godoc.org/github.com/tufin/oasdiff?status.svg)](https://godoc.org/github.com/tufin/oasdiff)\n[![Docker Image Version](https://img.shields.io/docker/v/tufin/oasdiff?sort=semver)](https://hub.docker.com/r/tufin/oasdiff/tags)\n\n# OpenAPI Diff\nA diff tool for [OpenAPI Spec 3](https://swagger.io/specification/).\n\n## Features \n- Generate a diff report in YAML, Text/Markdown or HTML\n- [Run from Docker](#running-with-docker)\n- [Embed in your go program](#embedding-into-your-go-program)\n- Compare specs from the file system or over http/s\n- Compare specs in YAML or JSON format\n- Comprehensive diff including all aspects of [OpenAPI Specification](https://swagger.io/specification/): paths, operations, parameters, request bodies, responses, schemas, enums, callbacks, security etc.\n- Detect breaking changes (Beta feature. Please report issues)\n\n## Install with Go\n```bash\ngo install github.com/tufin/oasdiff@latest\n```\n\n## Install on macOS with Brew\n```bash\nbrew tap tufin/homebrew-tufin\nbrew install oasdiff\n```\n\n## Install on macOS, Windows and Linux\nCopy binaries from [latest release](https://github.com/Tufin/oasdiff/releases/)\n\n## Usage\n\n```oasdiff -help```\n```\nUsage of oasdiff:\n  -base string\n    \tpath of original OpenAPI spec in YAML or JSON format\n  -breaking-only\n    \tdisplay breaking changes only\n  -exclude-description\n    \tignore changes to descriptions\n  -exclude-examples\n    \tignore changes to examples\n  -fail-on-diff\n    \tfail with exit code 1 if a difference is found\n  -filter string\n    \tif provided, diff will include only paths that match this regular expression\n  -filter-extension string\n    \tif provided, diff will exclude paths and operations with an OpenAPI Extension matching this regular expression\n  -format string\n    \toutput format: yaml, text or html (default \"yaml\")\n  -prefix string\n    \tif provided, paths in base spec will be compared with 'prefix'+paths in revision spec\n  -revision string\n    \tpath of revised OpenAPI spec in YAML or JSON format\n  -summary\n    \tdisplay a summary of the changes instead of the full diff\n```\nAll arguments can be passed with one or two leading minus signs.  \nFor example ```-breaking-only``` and ```--breaking-only``` are equivalent.\n\n## Usage Examples\n\n### YAML diff of local files\n```bash\noasdiff -base data/openapi-test1.yaml -revision data/openapi-test2.yaml\n```\nThe default output format is YAML.  \nNo output means that the diff is empty, or, in other words, there are no changes.\n\n### Text/Markdown diff of local files\n```bash\noasdiff -format text -base data/openapi-test1.yaml -revision data/openapi-test2.yaml\n```\nThe Text/Markdown diff report provides a simplified and partial view of the changes.  \nTo view all details, use the default format: YAML.  \nIf you'd like to see additional details in the text/markdown report, please submit a [feature request](https://github.com/Tufin/oasdiff/issues/new?assignees=&labels=&template=feature_request.md&title=).\n\n### HTML diff of local files\n```bash\noasdiff -format text -base data/openapi-test1.yaml -revision data/openapi-test2.yaml\n```\nThe HTML diff report provides a simplified and partial view of the changes.  \nTo view all details, use the default format: YAML.  \nIf you'd like to see additional details in the HTML report, please submit a [feature request](https://github.com/Tufin/oasdiff/issues/new?assignees=&labels=&template=feature_request.md&title=).\n\n\n### Diff files over http/s\n```bash\noasdiff -format text -base https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test1.yaml -revision https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test3.yaml\n```\n\n### Display breaking changes only\n```bash\noasdiff -breaking-only -format text -base https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test1.yaml -revision https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test3.yaml\n```\n\n### Fail with exit code 1 if a change is found\n```bash\noasdiff -fail-on-diff -format text -base https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test1.yaml -revision https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test3.yaml\n```\n\n### Fail with exit code 1 if a breaking change is found\n```bash\noasdiff -fail-on-diff -breaking-only -format text -base https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test1.yaml -revision https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test3.yaml\n```\n\n### Display changes to endpoints containing \"/api\" in the path\n```bash\noasdiff -format text -filter \"/api\" -base https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test1.yaml -revision https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test3.yaml\n```\n\n### Exclude paths and operations with extension \"x-beta\"\n```bash\noasdiff -format text -filter-extension \"x-beta\" -base https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test1.yaml -revision https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test3.yaml\n``` \nNotes:\n1. [OpenAPI Extensions](https://swagger.io/docs/specification/openapi-extensions/) can be defined both at the [path](https://swagger.io/docs/specification/paths-and-operations/) level and at the [operation](https://swagger.io/docs/specification/paths-and-operations/) level. Both are matched and excluded with this flag.\n2. If a path or operation has a matching extension only in one of the specs, but not in the other, it will appear as Added or Deleted.\n\n### Ignore changes to descriptions and examples\n```bash\noasdiff -exclude-description -exclude-examples -format text -base data/openapi-test1.yaml -revision data/openapi-test3.yaml\n``` \n\n### Display change summary\n```bash\noasdiff -breaking-only -summary -base https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test1.yaml -revision https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test3.yaml\n```\n\n### Running with Docker\nTo run with docker just replace the `oasdiff` command by `docker run --rm -t tufin/oasdiff`, for example:\n\n```bash\ndocker run --rm -t tufin/oasdiff -format text -base https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test1.yaml -revision https://raw.githubusercontent.com/Tufin/oasdiff/main/data/openapi-test3.yaml\n```\n\n### Comparing local files with Docker\n```bash\ndocker run --rm -t -v $(pwd)/data:/data:ro tufin/oasdiff -base /data/openapi-test1.yaml -revision /data/openapi-test3.yaml\n```\n\nReplace `$(pwd)/data` by the path that contains your files.  \nNote that the `-base` and `-revision` paths must begin with `/`.  \n\n## Output example - Text/Markdown\n```\noasdiff -format text -base data/openapi-test1.yaml -revision data/openapi-test5.yaml\n```\n\n### New Endpoints: None\n-----------------------\n\n### Deleted Endpoints: 2\n------------------------\nPOST /register\nPOST /subscribe\n\n### Modified Endpoints: 2\n-------------------------\nGET /api/{domain}/{project}/badges/security-score\n- Modified query param: filter\n  - Content changed\n    - Modified media type: application/json\n      - Schema changed\n        - Required changed\n          - New required property: type\n- Modified query param: image\n  - Examples changed\n    - Deleted example: 0\n- Modified query param: token\n  - Schema changed\n    - MaxLength changed from 29 to null\n- Modified header param: user\n  - Schema changed\n    - Schema added\n  - Content changed\n    - Deleted media type: application/json\n- Modified cookie param: test\n  - Content changed\n    - Modified media type: application/json\n      - Schema changed\n        - Type changed from 'object' to 'string'\n- Responses changed\n  - New response: default\n  - Deleted response: 200\n  - Modified response: 201\n    - Content changed\n      - Modified media type: application/xml\n        - Schema changed\n          - Type changed from 'string' to 'object'\n\nGET /api/{domain}/{project}/install-command\n- Deleted header param: network-policies\n- Responses changed\n  - Modified response: default\n    - Description changed from 'Tufin1' to 'Tufin'\n    - Headers changed\n      - Deleted header: X-RateLimit-Limit\n- Servers changed\n  - New server: https://www.tufin.io/securecloud\n\nSecurity Requirements changed\n- Deleted security requirements: bearerAuth\n\nServers changed\n- Deleted server: tufin.com\n\n## Output example - YAML\n```\noasdiff -base data/openapi-test1.yaml -revision data/openapi-test5.yaml\n```\n\n```yaml\ninfo:\n  title:\n    from: Tufin\n    to: Tufin1\n  contact:\n    added: true\n  license:\n    added: true\n  version:\n    from: 1.0.0\n    to: 1.0.1\npaths:\n  deleted:\n    - /register\n    - /subscribe\n  modified:\n    /api/{domain}/{project}/badges/security-score:\n      operations:\n        modified:\n          GET:\n            tags:\n              deleted:\n                - security\n            parameters:\n              modified:\n                cookie:\n                  test:\n                    content:\n                      mediaTypeModified:\n                        application/json:\n                          schema:\n                            type:\n                              from: object\n                              to: string\n                header:\n                  user:\n                    schema:\n                      schemaAdded: true\n                    content:\n                      mediaTypeDeleted:\n                        - application/json\n                query:\n                  filter:\n                    content:\n                      mediaTypeModified:\n                        application/json:\n                          schema:\n                            required:\n                              stringsdiff:\n                                added:\n                                  - type\n                  image:\n                    examples:\n                      deleted:\n                        - \"0\"\n                  token:\n                    schema:\n                      maxLength:\n                        from: 29\n                        to: null\n            responses:\n              added:\n                - default\n              deleted:\n                - \"200\"\n              modified:\n                \"201\":\n                  content:\n                    mediaTypeModified:\n                      application/xml:\n                        schema:\n                          type:\n                            from: string\n                            to: object\n      parameters:\n        deleted:\n          path:\n            - domain\n    /api/{domain}/{project}/install-command:\n      operations:\n        modified:\n          GET:\n            parameters:\n              deleted:\n                header:\n                  - network-policies\n            responses:\n              modified:\n                default:\n                  description:\n                    from: Tufin1\n                    to: Tufin\n                  headers:\n                    deleted:\n                      - X-RateLimit-Limit\n            servers:\n              added:\n                - https://www.tufin.io/securecloud\nendpoints:\n  deleted:\n    - method: POST\n      path: /register\n    - method: POST\n      path: /subscribe\n  modified:\n    ? method: GET\n      path: /api/{domain}/{project}/install-command\n    : parameters:\n        deleted:\n          header:\n            - network-policies\n      responses:\n        modified:\n          default:\n            description:\n              from: Tufin1\n              to: Tufin\n            headers:\n              deleted:\n                - X-RateLimit-Limit\n      servers:\n        added:\n          - https://www.tufin.io/securecloud\n    ? method: GET\n      path: /api/{domain}/{project}/badges/security-score\n    : tags:\n        deleted:\n          - security\n      parameters:\n        modified:\n          cookie:\n            test:\n              content:\n                mediaTypeModified:\n                  application/json:\n                    schema:\n                      type:\n                        from: object\n                        to: string\n          header:\n            user:\n              schema:\n                schemaAdded: true\n              content:\n                mediaTypeDeleted:\n                  - application/json\n          query:\n            filter:\n              content:\n                mediaTypeModified:\n                  application/json:\n                    schema:\n                      required:\n                        stringsdiff:\n                          added:\n                            - type\n            image:\n              examples:\n                deleted:\n                  - \"0\"\n            token:\n              schema:\n                maxLength:\n                  from: 29\n                  to: null\n      responses:\n        added:\n          - default\n        deleted:\n          - \"200\"\n        modified:\n          \"201\":\n            content:\n              mediaTypeModified:\n                application/xml:\n                  schema:\n                    type:\n                      from: string\n                      to: object\nsecurity:\n  deleted:\n    - bearerAuth\nservers:\n  deleted:\n    - tufin.com\ntags:\n  deleted:\n    - security\n    - reuven\nexternalDocs:\n  deleted: true\ncomponents:\n  schemas:\n    added:\n      - requests\n    modified:\n      network-policies:\n        additionalPropertiesAllowed:\n          from: true\n          to: false\n      rules:\n        additionalPropertiesAllowed:\n          from: null\n          to: false\n  parameters:\n    deleted:\n      header:\n        - network-policies\n  headers:\n    deleted:\n      - new\n    modified:\n      test:\n        schema:\n          additionalPropertiesAllowed:\n            from: true\n            to: false\n      testc:\n        content:\n          mediaTypeModified:\n            application/json:\n              schema:\n                type:\n                  from: object\n                  to: string\n  requestBodies:\n    deleted:\n      - reuven\n  responses:\n    added:\n      - default\n    deleted:\n      - OK\n  securitySchemes:\n    deleted:\n      - OAuth\n    modified:\n      AccessToken:\n        type:\n          from: http\n          to: oauth2\n        scheme:\n          from: bearer\n          to: \"\"\n        OAuthFlows:\n          added: true\n```\n\n## Notes\n1. Output Formats  \n   - The default output format, YAML, provides a full view of all diff details.  \n     Note that no output in YAML format signifies that the diff is empty, or, in other words, there are no changes.\n   - Other formats: text, markdown and HTML, are designed to be more user-friendly by providing only the most important parts of the diff, in a simplified format.  \n     If you wish to include additional details in non-YAML formats, please open an issue.\n\n2. Paths vs. Endpoints  \nOpenAPI Specification has a hierarchial model of [Paths](https://swagger.io/specification/#paths-object) and [Operations](https://swagger.io/specification/#operation-object) (HTTP methods).  \noasdiff respects this heirarchy and displays a hierarchial diff with path changes: added, deleted and modified, and within the latter, \"modified\" section, another set of operation changes: added, deleted and modified. For example:\n    ```yaml\n    paths:\n        deleted:\n            - /register\n            - /subscribe\n        modified:\n            /api/{domain}/{project}/badges/security-score:\n                operations:\n                    modified:\n                        GET:\n    ```\n    oasdiff also outputs an alternate simplified diff per \"endpoint\" which is a combination of Path + Operation, for example:\n    ```yaml\n    endpoints:\n        deleted:\n            - method: POST\n              path: /subscribe\n            - method: POST\n              path: /register\n        modified:\n            ?   method: GET\n                path: /api/{domain}/{project}/badges/security-score\n            :   tags:\n                    deleted:\n                        - security\n    ```\n    The modified endpoints section has two items per key, method and path, this is called a [complex mapping key](https://stackoverflow.com/questions/33987316/what-is-a-complex-mapping-key-in-yaml) in YAML.\n    Some YAML libraries don't support complex mapping keys, for example, python's PyYAML. [Here's possible solution](https://github.com/Tufin/oasdiff/issues/94#issuecomment-1087468450).\n\n## Notes for Go Developers\n1. Embedding oasdiff into your program is easy:\n   ```go\n   diff.Get(&diff.Config{}, spec1, spec2)\n   ```\n   See full example: [main.go](main.go)\n\n2. oasdiff expects [OpenAPI References](https://swagger.io/docs/specification/using-ref/) to be resolved.  \nReferences are normally resolved automatically when you load the spec. In other cases you can resolve refs using [Loader.ResolveRefsIn](https://pkg.go.dev/github.com/getkin/kin-openapi/openapi3#Loader.ResolveRefsIn).\n\n3. Use [configuration](diff/config.go) to exclude certain types of changes:\n   - [Examples](https://swagger.io/specification/#example-object) \n   - Descriptions\n   - [Extensions](https://swagger.io/specification/#specification-extensions) are excluded by default\n\n## Work in progress\n1. Patch support: currently supports Descriptions and a few fields in Schema \n\n## Requests for enhancements\n1. OpenAPI 3.1 support: see https://github.com/Tufin/oasdiff/issues/52\n2. [Share your own ideas](https://github.com/Tufin/oasdiff/discussions/new?category=ideas)\n  \n## Credits\nThis project relies on the excellent implementation of OpenAPI 3.0 for Go: [kin-openapi](https://github.com/getkin/kin-openapi) \n"
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
        - openapi3 tags
      name: swagger-parser
      homepage: https://github.com/swagger-api/swagger-parser
      language: Java
      source_description:
        - Swagger 1.0, 1.1, 1.2, 2.0 to OpenAPI Specification converter
        - Swagger Parser reads OpenAPI definitions into current Java POJOs.
      category:
        - Low-level Tooling
        - Parsers
      repository: https://github.com/swagger-api/swagger-parser
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBTd2FnZ2VyIFBhcnNlciA8aW1nIHNyYz0iaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3N3YWdnZXItYXBpL3N3YWdnZXIuaW8vd29yZHByZXNzL2ltYWdlcy9hc3NldHMvU1ctbG9nby1jbHIucG5nIiBoZWlnaHQ9IjUwIiBhbGlnbj0icmlnaHQiPgoKKipOT1RFOioqIElmIHlvdSdyZSBsb29raW5nIGZvciBgc3dhZ2dlci1wYXJzZXJgIDEuWCBhbmQgT3BlbkFQSSAyLjAsIHBsZWFzZSByZWZlciB0byBbdjEgYnJhbmNoXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1wYXJzZXIvdHJlZS92MSkKCiFbQnVpbGQgTWFzdGVyIC0gSmF2YSA4LCAxMSwgYW5kIDE0XShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1wYXJzZXIvd29ya2Zsb3dzL0J1aWxkJTIwVGVzdCUyMERlcGxveSUyMG1hc3Rlci9iYWRnZS5zdmc/YnJhbmNoPW1hc3RlcikKCiMgVGFibGUgb2YgY29udGVudHMKCiAgLSBbT3ZlcnZpZXddKCNvdmVydmlldykKICAtIFtUYWJsZSBvZiBDb250ZW50c10oI3RhYmxlLW9mLWNvbnRlbnRzKQogIC0gW1VzYWdlXSgjdXNhZ2UpCiAgLSBbQWRkaW5nIHRvIHlvdXIgcHJvamVjdF0oI2FkZGluZy10by15b3VyLXByb2plY3QpCiAgICAtIFtQcmVyZXF1aXNpdGVzXSgjcHJlcmVxdWlzaXRlcykKICAtIFtBdXRoZW50aWNhdGlvbl0oI2F1dGhlbnRpY2F0aW9uKSAgCiAgLSBbT3B0aW9uc10oI29wdGlvbnMpCiAgICAtIFtSZXNvbHZlXSgjMS1yZXNvbHZlKQogICAgLSBbUmVzb2x2ZUZ1bGx5XSgjMi1yZXNvbHZlZnVsbHkpCiAgICAtIFtGbGF0dGVuXSgjMy1mbGF0dGVuKQogICAgLSBbUmVzb2x2ZUNvbWJpbmF0b3JzXSgjNC1yZXNvbHZlY29tYmluYXRvcnMpCiAgLSBbRXh0ZW5zaW9uc10oI2V4dGVuc2lvbnMpCiAgLSBbTGljZW5zZV0oI2xpY2Vuc2UpCiAgIAojIyBPdmVydmlldyAKClRoaXMgaXMgdGhlIFN3YWdnZXIgUGFyc2VyIHByb2plY3QsIHdoaWNoIHBhcnNlcyBPcGVuQVBJIGRlZmluaXRpb25zIGluIEpTT04gb3IgWUFNTCBmb3JtYXQgaW50byBbc3dhZ2dlci1jb3JlXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlKSByZXByZXNlbnRhdGlvbiBhcyBbSmF2YSBQT0pPXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL2Jsb2IvbWFzdGVyL21vZHVsZXMvc3dhZ2dlci1tb2RlbHMvc3JjL21haW4vamF2YS9pby9zd2FnZ2VyL3YzL29hcy9tb2RlbHMvT3BlbkFQSS5qYXZhI0wzNiksIHJldHVybmluZyBhbnkgdmFsaWRhdGlvbiB3YXJuaW5ncy9lcnJvcnMuICAKCkl0IGFsc28gcHJvdmlkZXMgYSBzaW1wbGUgZnJhbWV3b3JrIHRvIGFkZCBhZGRpdGlvbmFsIGNvbnZlcnRlcnMgZnJvbSBkaWZmZXJlbnQgZm9ybWF0cyBpbnRvIHRoZSBTd2FnZ2VyIG9iamVjdHMsIG1ha2luZyB0aGUgZW50aXJlIHRvb2xjaGFpbiBhdmFpbGFibGUuCgoKIyMjIFVzYWdlClVzaW5nIHRoZSBTd2FnZ2VyIFBhcnNlciBpcyBzaW1wbGUuICBPbmNlIGluY2x1ZGVkIGluIHlvdXIgcHJvamVjdCwgeW91IGNhbiByZWFkIGEgT3BlbkFQSSBTcGVjaWZpY2F0aW9uIGZyb20gYW55IGxvY2F0aW9uOgoKYGBgamF2YQppbXBvcnQgaW8uc3dhZ2dlci5wYXJzZXIuT3BlbkFQSVBhcnNlcjsKaW1wb3J0IGlvLnN3YWdnZXIudjMucGFyc2VyLk9wZW5BUElWM1BhcnNlcjsKaW1wb3J0IGlvLnN3YWdnZXIudjMucGFyc2VyLmNvcmUubW9kZWxzLlN3YWdnZXJQYXJzZVJlc3VsdDsKaW1wb3J0IGlvLnN3YWdnZXIudjMub2FzLm1vZGVscy5PcGVuQVBJOwoKLy8gLi4uIHlvdXIgY29kZQoKICAvLyBwYXJzZSBhIHN3YWdnZXIgZGVzY3JpcHRpb24gZnJvbSB0aGUgcGV0c3RvcmUgYW5kIGdldCB0aGUgcmVzdWx0CiAgU3dhZ2dlclBhcnNlUmVzdWx0IHJlc3VsdCA9IG5ldyBPcGVuQVBJUGFyc2VyKCkucmVhZExvY2F0aW9uKCJodHRwczovL3BldHN0b3JlMy5zd2FnZ2VyLmlvL2FwaS92My9vcGVuYXBpLmpzb24iLCBudWxsLCBudWxsKTsKICAKICAvLyBvciBmcm9tIGEgZmlsZQogIC8vICAgU3dhZ2dlclBhcnNlUmVzdWx0IHJlc3VsdCA9IG5ldyBPcGVuQVBJUGFyc2VyKCkucmVhZExvY2F0aW9uKCIuL3BhdGgvdG8vb3BlbmFwaS55YW1sIiwgbnVsbCwgbnVsbCk7CiAgCiAgLy8gdGhlIHBhcnNlZCBQT0pPCiAgT3BlbkFQSSBvcGVuQVBJID0gcmVzdWx0LmdldE9wZW5BUEkoKTsKICAKICBpZiAocmVzdWx0LmdldE1lc3NhZ2VzKCkgIT0gbnVsbCkgcmVzdWx0LmdldE1lc3NhZ2VzKCkuZm9yRWFjaChTeXN0ZW0uZXJyOjpwcmludGxuKTsgLy8gdmFsaWRhdGlvbiBlcnJvcnMgYW5kIHdhcm5pbmdzCiAgCiAgaWYgKG9wZW5BUEkgIT0gbnVsbCkgewogICAgLi4uCiAgfQogIApgYGAKCm9yIGZyb20gYSBzdHJpbmc6CgpgYGBqYXZhCmltcG9ydCBpby5zd2FnZ2VyLnBhcnNlci5PcGVuQVBJUGFyc2VyOwppbXBvcnQgaW8uc3dhZ2dlci52My5wYXJzZXIuT3BlbkFQSVYzUGFyc2VyOwppbXBvcnQgaW8uc3dhZ2dlci52My5wYXJzZXIuY29yZS5tb2RlbHMuU3dhZ2dlclBhcnNlUmVzdWx0OwppbXBvcnQgaW8uc3dhZ2dlci52My5vYXMubW9kZWxzLk9wZW5BUEk7CgovLyAuLi4geW91ciBjb2RlCgogIC8vIHBhcnNlIGEgc3dhZ2dlciBkZXNjcmlwdGlvbiBmcm9tIHRoZSBwZXRzdG9yZSBhbmQgZ2V0IHRoZSByZXN1bHQKICBTd2FnZ2VyUGFyc2VSZXN1bHQgcmVzdWx0ID0gbmV3IE9wZW5BUElQYXJzZXIoKS5yZWFkQ29udGVudHMoImh0dHBzOi8vcGV0c3RvcmUzLnN3YWdnZXIuaW8vYXBpL3YzL29wZW5hcGkuanNvbiIsIG51bGwsIG51bGwpOwogIAogIC8vIG9yIGZyb20gYSBmaWxlCiAgLy8gICBTd2FnZ2VyUGFyc2VSZXN1bHQgcmVzdWx0ID0gbmV3IE9wZW5BUElQYXJzZXIoKS5yZWFkQ29udGVudHMoIi4vcGF0aC90by9vcGVuYXBpLnlhbWwiLCBudWxsLCBudWxsKTsKICAKICAvLyB0aGUgcGFyc2VkIFBPSk8KICBPcGVuQVBJIG9wZW5BUEkgPSByZXN1bHQuZ2V0T3BlbkFQSSgpOwogIAogIGlmIChyZXN1bHQuZ2V0TWVzc2FnZXMoKSAhPSBudWxsKSByZXN1bHQuZ2V0TWVzc2FnZXMoKS5mb3JFYWNoKFN5c3RlbS5lcnI6OnByaW50bG4pOyAvLyB2YWxpZGF0aW9uIGVycm9ycyBhbmQgd2FybmluZ3MKICAKICBpZiAob3BlbkFQSSAhPSBudWxsKSB7CiAgICAuLi4KICB9CiAgCmBgYAoKSWYgeW91IGFyZSBwcm92aWRpbmcgYSBTd2FnZ2VyL09wZW5BUEkgMi4wIGRvY3VtZW50IHRvIHRoZSBwYXJzZXIgLCBlLmcuOgoKYGBgamF2YQpTd2FnZ2VyUGFyc2VSZXN1bHQgcmVzdWx0ID0gbmV3IE9wZW5BUElQYXJzZXIoKS5yZWFkQ29udGVudHMoIi4vcGF0aC90by9zd2FnZ2VyLnlhbWwiLCBudWxsLCBudWxsKTsKYGBgCgp0aGUgU3dhZ2dlci9PcGVuQVBJIDIuMCBkb2N1bWVudCB3aWxsIGJlIGZpcnN0IGNvbnZlcnRlZCBpbnRvIGEgY29tcGFyYWJsZSBPcGVuQVBJIDMuMCBvbmUuCgpZb3UgY2FuIGFsc28gZGlyZWN0bHkgdXNlIGBPcGVuQVBJVjNQYXJzZXJgIHdoaWNoIG9ubHkgaGFuZGxlcyBPcGVuQVBJIDMuMCBkb2N1bWVudHMsIGFuZCBwcm92aWRlcyBhIGNvbnZlbmllbmNlIG1ldGhvZCB0byBnZXQgZGlyZWN0bHkgdGhlIHBhcnNlZCBgT3BlbkFQSSBvYmplY3Q6CgpgYGBqYXZhCmltcG9ydCBpby5zd2FnZ2VyLnYzLnBhcnNlci5PcGVuQVBJVjNQYXJzZXI7CmltcG9ydCBpby5zd2FnZ2VyLnYzLm9hcy5tb2RlbHMuT3BlbkFQSTsKCi8vIC4uLiB5b3VyIGNvZGUKCiAgLy8gcmVhZCBhIHN3YWdnZXIgZGVzY3JpcHRpb24gZnJvbSB0aGUgcGV0c3RvcmUKICAgIAogIE9wZW5BUEkgb3BlbkFQSSA9IG5ldyBPcGVuQVBJVjNQYXJzZXIoKS5yZWFkKCJodHRwczovL3BldHN0b3JlMy5zd2FnZ2VyLmlvL2FwaS92My9vcGVuYXBpLmpzb24iKTsKICAKYGBgCgojIyMgQWRkaW5nIHRvIHlvdXIgcHJvamVjdApZb3UgY2FuIGluY2x1ZGUgdGhpcyBsaWJyYXJ5IGZyb20gU29uYXR5cGUgT1NTIGZvciBTTkFQU0hPVFMsIG9yIE1hdmVuIGNlbnRyYWwgZm9yIHJlbGVhc2VzLiAgSW4geW91ciBkZXBlbmRlbmNpZXM6CgpgYGB4bWwKPGRlcGVuZGVuY3k+CiAgPGdyb3VwSWQ+aW8uc3dhZ2dlci5wYXJzZXIudjM8L2dyb3VwSWQ+CiAgPGFydGlmYWN0SWQ+c3dhZ2dlci1wYXJzZXI8L2FydGlmYWN0SWQ+CiAgPHZlcnNpb24+Mi4wLjMyPC92ZXJzaW9uPgo8L2RlcGVuZGVuY3k+CmBgYAoKIyMjIyBQcmVyZXF1aXNpdGVzCllvdSBuZWVkIHRoZSBmb2xsb3dpbmcgaW5zdGFsbGVkIGFuZCBhdmFpbGFibGUgaW4geW91ciAkUEFUSDoKCiogW0phdmEgMS44XShodHRwOi8vamF2YS5vcmFjbGUuY29tKQoqIFtBcGFjaGUgbWF2ZW4gMy54XShodHRwOi8vbWF2ZW4uYXBhY2hlLm9yZy8pCgpBZnRlciBjbG9uaW5nIHRoZSBwcm9qZWN0LCB5b3UgY2FuIGJ1aWxkIGl0IGZyb20gc291cmNlIHdpdGggdGhpcyBjb21tYW5kOgoKYGBgCm12biBwYWNrYWdlCmBgYAoKIyMjIEF1dGhlbnRpY2F0aW9uCgpJZiB5b3VyIE9wZW5BUEkgZGVmaW5pdGlvbiBpcyBwcm90ZWN0ZWQsIHlvdSBjYW4gcGFzcyBoZWFkZXJzIGluIHRoZSByZXF1ZXN0OgpgYGBqYXZhCmltcG9ydCBpby5zd2FnZ2VyLnYzLnBhcnNlci5jb3JlLm1vZGVscy5BdXRob3JpemF0aW9uVmFsdWU7CgovLyAuLi4geW91ciBjb2RlCgogIC8vIGJ1aWxkIGEgYXV0aG9yaXphdGlvbiB2YWx1ZQogIEF1dGhvcml6YXRpb25WYWx1ZSBteVNwZWNpYWxIZWFkZXIgPSBuZXcgQXV0aG9yaXphdGlvblZhbHVlKCkKICAgIC5rZXlOYW1lKCJ4LXNwZWNpYWwtYWNjZXNzIikgIC8vICB0aGUgbmFtZSBvZiB0aGUgYXV0aG9yaXphdGlvbiB0byBwYXNzCiAgICAudmFsdWUoImktYW0tc3BlY2lhbCIpICAgICAgICAvLyAgdGhlIHZhbHVlIG9mIHRoZSBhdXRob3JpemF0aW9uCiAgICAudHlwZSgiaGVhZGVyIik7ICAgICAgICAgICAgICAvLyAgdGhlIGxvY2F0aW9uLCBhcyBlaXRoZXIgYGhlYWRlcmAgb3IgYHF1ZXJ5YAoKICAvLyBvciBpbiBhIHNpbmdsZSBjb25zdHJ1Y3RvcgogIEF1dGhvcml6YXRpb25WYWx1ZSBhcGlLZXkgPSBuZXcgQXV0aG9yaXphdGlvblZhbHVlKCJhcGlfa2V5IiwgInNwZWNpYWwta2V5IiwgImhlYWRlciIpOwogIE9wZW5BUEkgb3BlbkFQSSA9IG5ldyBPcGVuQVBJVjNQYXJzZXIoKS5yZWFkV2l0aEluZm8oCiAgICAiaHR0cHM6Ly9wZXRzdG9yZTMuc3dhZ2dlci5pby9hcGkvdjMvb3BlbmFwaS5qc29uIiwKICAgIEFycmF5cy5hc0xpc3QobXlTcGVjaWFsSGVhZGVyLCBhcGlLZXkpCiAgKTsKYGBgCgojIyMjIERlYWxpbmcgd2l0aCBzZWxmLXNpZ25lZCBTU0wgY2VydGlmaWNhdGVzCklmIHlvdSdyZSBkZWFsaW5nIHdpdGggc2VsZi1zaWduZWQgU1NMIGNlcnRpZmljYXRlcywgb3IgdGhvc2Ugc2lnbmVkIGJ5IEdvRGFkZHksIHlvdSdsbCBuZWVkIHRvIGRpc2FibGUgU1NMIFRydXN0IApNYW5hZ2VyLiAgVGhhdCdzIGRvbmUgYnkgc2V0dGluZyBhIHN5c3RlbSBlbnZpcm9ubWVudCB2YXJpYWJsZSBhcyBzdWNoOgoKYGBgCmV4cG9ydCBUUlVTVF9BTEw9dHJ1ZQpgYGAKCkFuZCB0aGVuIHRoZSBTd2FnZ2VyIFBhcnNlciB3aWxsIF9pZ25vcmVfIGludmFsaWQgY2VydGlmaWNhdGVzLiAgT2YgY291cnNlIHRoaXMgaXMgZ2VuZXJhbGx5IGEgYmFkIGlkZWEsIGJ1dCBpZiB5b3UncmUgCndvcmtpbmcgaW5zaWRlIGEgZmlyZXdhbGwgb3IgcmVhbGx5IGtub3cgd2hhdCB5b3UncmUgZG9pbmcsIHdlbGwsIHRoZXJlJ3MgeW91ciByb3BlLgoKIyMjIyBEZWFsaW5nIHdpdGggTGV0J3MgRW5jcnlwdApEZXBlbmRpbmcgb24gdGhlIHZlcnNpb24gb2YgSmF2YSB0aGF0IHlvdSB1c2UsIGNlcnRpZmljYXRlcyBzaWduZWQgYnkgdGhlIFtMZXQncyBFbmNyeXB0XShodHRwczovL2xldHNlbmNyeXB0Lm9yZykgY2VydGlmaWNhdGUgYXV0aG9yaXR5IF9tYXkgbm90IHdvcmtfIGJ5IGRlZmF1bHQuICBJZiB5b3UgYXJlIHVzaW5nIGFueSB2ZXJzaW9uIG9mIEphdmEgcHJpb3IgdG8gMS44dTEwMSwgeW91IG1vc3QgbGlrZWx5IF9tdXN0XyBpbnN0YWxsIGFuIGFkZGl0aW9uYWwgQ0EgaW4geW91cgpKVk0uICBBbHNvIG5vdGUgdGhhdCAxLjh1MTAxIG1heSBfbm90XyBiZSBzdWZmaWNpZW50IG9uIGl0J3Mgb3duLiAgU29tZSB1c2VycyBoYXZlIHJlcG9ydGVkIHRoYXQgY2VydGFpbiBvcGVyYXRpbmcgc3lzdGVtcyBhcmUgCm5vdCBhY2NlcHRpbmcgTGV0J3MgRW5jcnlwdCBzaWduZWQgY2VydGlmaWNhdGVzLgoKWW91ciBvcHRpb25zIGluY2x1ZGU6CgoqIEFjY2VwdGluZyBhbGwgY2VydGlmaWNhdGVzIHBlciBhYm92ZQoqIEluc3RhbGxpbmcgdGhlIGNlcnRpZmljYXRlIG1hbnVhbGx5IGluIHlvdXIgSlZNIHVzaW5nIHRoZSBrZXlzdG9yZSB1c2luZyB0aGUgYGtleXRvb2xgIGNvbW1hbmQKKiBDb25maWd1cmluZyB0aGUgSlZNIG9uIHN0YXJ0dXAgdG8gbG9hZCB5b3VyIGNlcnRpZmljYXRlCgpCdXQuLi4gdGhpcyBpcyBhbGwgc3RhbmRhcmQgU1NMIGNvbmZpZ3VyYXRpb24gc3R1ZmYgYW5kIGlzIHdlbGwgZG9jdW1lbnRlZCBhY3Jvc3MgdGhlIHdlYi4KCgojIyMgT3B0aW9ucwpQYXJzZXIgdXNlcyBvcHRpb25zIGFzIGEgd2F5IHRvIGN1c3RvbWl6ZSB0aGUgYmVoYXZpb3Igd2hpbGUgcGFyc2luZzoKCiMjIyMgMS4gcmVzb2x2ZToKCmBgYGphdmEKUGFyc2VPcHRpb25zIHBhcnNlT3B0aW9ucyA9IG5ldyBQYXJzZU9wdGlvbnMoKTsKcGFyc2VPcHRpb25zLnNldFJlc29sdmUodHJ1ZSk7IApmaW5hbCBPcGVuQVBJIG9wZW5BUEkgPSBuZXcgT3BlbkFQSVYzUGFyc2VyKCkucmVhZCgiYS55YW1sIiwgbnVsbCwgcGFyc2VPcHRpb25zKTsKYGBgCgoKLSBXaGVuIHJlbW90ZSBvciByZWxhdGl2ZSByZWZlcmVuY2VzIGFyZSBmb3VuZCBpbiB0aGUgcGFyc2VkIGRvY3VtZW50LCBwYXJzZXIgd2lsbCBhdHRlbXB0IHRvOgoKMS4gcmVzb2x2ZSB0aGUgcmVmZXJlbmNlIGluIHRoZSByZW1vdGUgb3IgcmVsYXRpdmUgbG9jYXRpb24gCjEuIHBhcnNlIHRoZSByZXNvbHZlZCByZWZlcmVuY2UKMS4gYWRkIHRoZSByZXNvbHZlZCAiY29tcG9uZW50IiAoZS5nLiBwYXJhbWV0ZXIsIHNjaGVtYSwgcmVzcG9uc2UsIGV0Yy4pIHRvIHRoZSByZXNvbHZlZCBgT3BlbkFQSWAgUE9KTyBjb21wb25lbnRzIHNlY3Rpb24KMS4gcmVwbGFjZSB0aGUgcmVtb3RlL3JlbGF0aXZlIHJlZmVyZW5jZSB3aXRoIGEgbG9jYWwgcmVmZXJlbmNlLCAgZS5nLiA6IGAjL2NvbXBvbmVudHMvc2NoZW1hcy9OYW1lT2ZSZW1vdGVTY2hlbWFgLiAKClRoaXMgYXBwbGllcyB0byBzY2hlbWFzLCBwYXJhbWV0ZXJzLCByZXNwb25zZXMsIHByZXR0eSBtdWNoIGV2ZXJ5dGhpbmcgY29udGFpbmluZyBhIHJlZi4KCiMjIyMgMi4gcmVzb2x2ZUZ1bGx5OgoKYGBgamF2YQpQYXJzZU9wdGlvbnMgcGFyc2VPcHRpb25zID0gbmV3IFBhcnNlT3B0aW9ucygpOwpwYXJzZU9wdGlvbnMuc2V0UmVzb2x2ZSh0cnVlKTsgLy8gaW1wbGljaXQKcGFyc2VPcHRpb25zLnNldFJlc29sdmVGdWxseSh0cnVlKTsKZmluYWwgT3BlbkFQSSBvcGVuQVBJID0gbmV3IE9wZW5BUElWM1BhcnNlcigpLnJlYWQoImEueWFtbCIsIG51bGwsIHBhcnNlT3B0aW9ucyk7CmBgYAoKLSBJbiBzb21lIHNjZW5hcmlvcywgYWZ0ZXIgcmVmZXJlbmNlcyBhcmUgcmVzb2x2ZWQgKHdpdGggYHJlc29sdmVgLCBzZWUgYWJvdmUpLCB5b3UgbWlnaHQgbmVlZCB0byBoYXZlIGFsbCBsb2NhbCByZWZlcmVuY2VzIHJlbW92ZWQgcmVwbGFjaW5nIHRoZSByZWZlcmVuY2Ugd2l0aCB0aGUgY29udGVudCBvZiB0aGUgcmVmZXJlbmNlZCBlbGVtZW50LiBUaGlzIGlzIGZvciBleGFtcGxlIHVzZWQgaW4gW1N3YWdnZXIgSW5mbGVjdG9yXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1pbmZsZWN0b3IpLiBCZSBhd2FyZSB0aGF0IHRoZSByZXN1bHQgY291bGQgYmUgbW9yZSBoZWF2eS9sb25nIGR1ZSB0byBkdXBsaWNhdGlvbgogICAgCk9yaWdpbmFsIGRvY3VtZW50OgoKYGEueWFtbGAgCmBgYApvcGVuYXBpOiAzLjAuMQpwYXRoczoKICAiL25ld1BlcnNvbiI6CiAgICBwb3N0OgogICAgICBzdW1tYXJ5OiBDcmVhdGUgbmV3IHBlcnNvbgogICAgICBkZXNjcmlwdGlvbjogQ3JlYXRlIG5ldyBwZXJzb24KICAgICAgcmVzcG9uc2VzOgogICAgICAgICcyMDAnOgogICAgICAgICAgZGVzY3JpcHRpb246IG9rCiAgICAgICAgICBjb250ZW50OgogICAgICAgICAgICAiKi8qIjoKICAgICAgICAgICAgICBzY2hlbWE6CiAgICAgICAgICAgICAgICAiJHJlZiI6ICIuL3JlZi13aXRob3V0LWNvbXBvbmVudC9iLnlhbWwjL2NvbXBvbmVudHMvc2NoZW1hcy9DdXN0b21lclR5cGUiCmBgYApgYi55YW1sYApgYGAKb3BlbmFwaTogMy4wLjEKY29tcG9uZW50czoKICBzY2hlbWFzOgogICAgQ3VzdG9tZXJUeXBlOgogICAgICB0eXBlOiBzdHJpbmcKICAgICAgZXhhbXBsZTogRXhhbXBsZSB2YWx1ZQpgYGAKClNlcmlhbGl6ZWQgcmVzdWx0IGFmdGVyIHBhcnNpbmcgd2l0aCBvcHRpb24gYHJlc29sdmVGdWxseSh0cnVlKWAKCmBhLnlhbWxgCmBgYApvcGVuYXBpOiAzLjAuMQpzZXJ2ZXJzOgotIHVybDogLwpwYXRoczoKICAvbmV3UGVyc29uOgogICAgcG9zdDoKICAgICAgc3VtbWFyeTogQ3JlYXRlIG5ldyBwZXJzb24KICAgICAgZGVzY3JpcHRpb246IENyZWF0ZSBuZXcgcGVyc29uCiAgICAgIHJlc3BvbnNlczoKICAgICAgICAyMDA6CiAgICAgICAgICBkZXNjcmlwdGlvbjogb2sKICAgICAgICAgIGNvbnRlbnQ6CiAgICAgICAgICAgICcqLyonOgogICAgICAgICAgICAgIHNjaGVtYToKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgZXhhbXBsZTogRXhhbXBsZSB2YWx1ZQpjb21wb25lbnRzOgogIHNjaGVtYXM6CiAgICBDdXN0b21lclR5cGU6CiAgICAgIHR5cGU6IHN0cmluZwogICAgICBleGFtcGxlOiBFeGFtcGxlIHZhbHVlCmBgYAoKIyMjIyAzLiBmbGF0dGVuOiAKCmBgYGphdmEKUGFyc2VPcHRpb25zIHBhcnNlT3B0aW9ucyA9IG5ldyBQYXJzZU9wdGlvbnMoKTsKcGFyc2VPcHRpb25zLnNldEZsYXR0ZW4odHJ1ZSk7IApmaW5hbCBPcGVuQVBJIG9wZW5BUEkgPSBuZXcgT3BlbkFQSVYzUGFyc2VyKCkucmVhZCgiYS55YW1sIiwgbnVsbCwgcGFyc2VPcHRpb25zKTsKYGBgCgoKVGhpcyBpcyBraW5kIG9mIHRoZSBvcHBvc2l0ZSBvZiByZXNvbHZlRnVsbHksIGxpbWl0ZWQgdG8gZGVmaW5lZCBzY2hlbWFzLgoKSW4gc29tZSBzY2VuYXJpb3MsIHlvdSBtaWdodCBuZWVkIHRvIGhhdmUgYWxsIHNjaGVtYXMgZGVmaW5lZCBpbmxpbmUgKGUuZy4gYSByZXNwb25zZSBzY2hlbWEpIG1vdmVkIHRvIHRoZSBgY29tcG9uZW50cy9zY2hlbWFzYCBzZWN0aW9uIGFuZCByZXBsYWNlZCB3aXRoIGEgcmVmZXJlbmNlIHRvIHRoZSBuZXdseSBhZGRlZCBzY2hlbWEgd2l0aGluIGBjb21wb25lbnRzL3NjaGVtYXNgLiBUaGlzIGlzIGZvciBleGFtcGxlIHVzZWQgaW4gW1N3YWdnZXIgQ29kZWdlbl0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29kZWdlbikuCgpPcmlnaW5hbCBkb2N1bWVudDoKCmBmbGF0dGVuLnlhbWxgCgpgYGAKb3BlbmFwaTogMy4wLjAKaW5mbzoKICB2ZXJzaW9uOiAxLjAuMAogIHRpdGxlOiBTd2FnZ2VyIFBldHN0b3JlCiAgbGljZW5zZToKICAgIG5hbWU6IE1JVApwYXRoczoKICAvcGV0czoKICAgIGdldDoKICAgICAgc3VtbWFyeTogTGlzdCBhbGwgcGV0cwogICAgICBvcGVyYXRpb25JZDogbGlzdFBldHMKICAgICAgcmVzcG9uc2VzOgogICAgICAgICcyMDAnOgogICAgICAgICAgZGVzY3JpcHRpb246IEFuIHBhZ2VkIGFycmF5IG9mIHBldHMKICAgICAgICAgIGhlYWRlcnM6CiAgICAgICAgICAgIHgtbmV4dDoKICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQSBsaW5rIHRvIHRoZSBuZXh0IHBhZ2Ugb2YgcmVzcG9uc2VzCiAgICAgICAgICAgICAgc2NoZW1hOgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBjb250ZW50OgogICAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOgogICAgICAgICAgICAgIHNjaGVtYToKICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgIGlkOgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBpbnQ2NAogICAgICAgICAgICAgICAgICAgIG5hbWU6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICB0YWc6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKYGBgCgpTZXJpYWxpemVkIHJlc3VsdCBhZnRlciBwYXJzaW5nIHdpdGggb3B0aW9uIGBmbGF0dGVuKHRydWUpYAoKYGBgCm9wZW5hcGk6IDMuMC4wCmluZm86CiAgdGl0bGU6IFN3YWdnZXIgUGV0c3RvcmUKICBsaWNlbnNlOgogICAgbmFtZTogTUlUCiAgdmVyc2lvbjogMS4wLjAKc2VydmVyczoKLSB1cmw6IC8KcGF0aHM6CiAgL3BldHM6CiAgICBnZXQ6CiAgICAgIHRhZ3M6CiAgICAgIC0gcGV0cwogICAgICBzdW1tYXJ5OiBMaXN0IGFsbCBwZXRzCiAgICAgIHJlc3BvbnNlczoKICAgICAgICAyMDA6CiAgICAgICAgICBkZXNjcmlwdGlvbjogQW4gcGFnZWQgYXJyYXkgb2YgcGV0cwogICAgICAgICAgaGVhZGVyczoKICAgICAgICAgICAgeC1uZXh0OgogICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBIGxpbmsgdG8gdGhlIG5leHQgcGFnZSBvZiByZXNwb25zZXMKICAgICAgICAgICAgICBzdHlsZTogc2ltcGxlCiAgICAgICAgICAgICAgZXhwbG9kZTogZmFsc2UKICAgICAgICAgICAgICBzY2hlbWE6CiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGNvbnRlbnQ6CiAgICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246CiAgICAgICAgICAgICAgc2NoZW1hOgogICAgICAgICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL2lubGluZV9yZXNwb25zZV8yMDAnCmNvbXBvbmVudHM6CiAgc2NoZW1hczoKICAgIGlubGluZV9yZXNwb25zZV8yMDA6CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGlkOgogICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgZm9ybWF0OiBpbnQ2NAogICAgICAgIG5hbWU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICB0YWc6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKYGBgCgojIyMjIDQuIHJlc29sdmVDb21iaW5hdG9yczogCgpgYGBqYXZhClBhcnNlT3B0aW9ucyBwYXJzZU9wdGlvbnMgPSBuZXcgUGFyc2VPcHRpb25zKCk7CnBhcnNlT3B0aW9ucy5zZXRSZXNvbHZlKHRydWUpOyAvLyBpbXBsaWNpdApwYXJzZU9wdGlvbnMuc2V0UmVzb2x2ZUZ1bGx5KHRydWUpOwpwYXJzZU9wdGlvbnMuc2V0UmVzb2x2ZUNvbWJpbmF0b3JzKGZhbHNlKTsgLy8gZGVmYXVsdCBpcyB0cnVlIApmaW5hbCBPcGVuQVBJIG9wZW5BUEkgPSBuZXcgT3BlbkFQSVYzUGFyc2VyKCkucmVhZCgiYS55YW1sIiwgbnVsbCwgcGFyc2VPcHRpb25zKTsKYGBgCgpUaGlzIG9wdGlvbiAob25seSBhdmFpbGFibGUgd2l0aCBgcmVzb2x2ZUZ1bGx5ID0gdHJ1ZWApIGFsbG93cyB0byBjdXN0b21pemUgYmVoYXZpb3VyIHJlbGF0ZWQgdG8gYGFsbE9mL2FueU9mL29uZU9mYCAoY29tcG9zZWQgc2NoZW1hcykgIHByb2Nlc3NpbmcuIFdpdGggb3B0aW9uIHNldCB0byBgdHJ1ZWAgKGRlZmF1bHQpLCBjb21wb3NlZCBzY2hlbWFzIGFyZSB0cmFuc2Zvcm1lZCBpbnRvICJub24gY29tcG9zZWQiIG9uZXMsIGJ5IGhhdmluZyBhbGwgcHJvcGVydGllcyBtZXJnZWQgaW50byBhIHNpbmdsZSByZXN1bHRpbmcgc2NoZW1hIChzZWUgZXhhbXBsZSBiZWxvdykuCklmIG9wdGlvbiBpcyBzZXQgdG8gYGZhbHNlYCwgdGhlIHJlc3VsdGluZyBzY2hlbWEgd2lsbCBpbnN0ZWFkIG1haW50YWluIGl0cyAiY29tcG9zZWQiIG5hdHVyZSwga2VlcGluZyBwcm9wZXJ0aWVzIHdpdGhpbiBlLmcuIHRoZSBgYWxsT2ZgIG1lbWJlcnMuCgpQbGVhc2Ugc2VlIGV4YW1wbGVzIGJlbG93OgoKKipVbnJlc29sdmVkIHlhbWwqKgoKYGBgCm9wZW5hcGk6IDMuMC4xCnNlcnZlcnM6Ci0gdXJsOiBodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby9hcGkKCmluZm86CiAgZGVzY3JpcHRpb246ICdUaGlzIGlzIGEgc2FtcGxlIHNlcnZlciBQZXRzdG9yZScKICB2ZXJzaW9uOiAxLjAuMAogIHRpdGxlOiB0ZXN0aW5nIHNvdXJjZSBmaWxlCiAgdGVybXNPZlNlcnZpY2U6IGh0dHA6Ly9zd2FnZ2VyLmlvL3Rlcm1zLwoKcGF0aHM6CiAgIi93aXRoSW52YWxpZENvbXBvc2VkTW9kZWwiOgogICAgcG9zdDoKICAgICAgb3BlcmF0aW9uSWQ6IHdpdGhJbnZhbGlkQ29tcG9zZWRNb2RlbAogICAgICByZXF1ZXN0Qm9keToKICAgICAgICBjb250ZW50OgogICAgICAgICAgImFwcGxpY2F0aW9uL2pzb24iOgogICAgICAgICAgICBzY2hlbWE6CiAgICAgICAgICAgICAgIiRyZWYiOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvRXh0ZW5kZWRBZGRyZXNzIgogICAgICAgIHJlcXVpcmVkOiBmYWxzZQogICAgICByZXNwb25zZXM6CiAgICAgICAgJzIwMCc6CiAgICAgICAgICBkZXNjcmlwdGlvbjogc3VjY2VzcyEKY29tcG9uZW50czoKICBzY2hlbWFzOgogICAgRXh0ZW5kZWRBZGRyZXNzOgogICAgICB0eXBlOiBvYmplY3QKICAgICAgYWxsT2Y6CiAgICAgICAgLSAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvQWRkcmVzcycKICAgICAgICAtIHR5cGU6IG9iamVjdAogICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAtIGdwcwogICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgZ3BzOgogICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgQWRkcmVzczoKICAgICAgcmVxdWlyZWQ6CiAgICAgIC0gc3RyZWV0CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIHN0cmVldDoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZXhhbXBsZTogMTIzNDUgRWwgTW9udGUgUm9hZAogICAgICAgIGNpdHk6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGV4YW1wbGU6IExvcyBBbHRvcyBIaWxscwogICAgICAgIHN0YXRlOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBleGFtcGxlOiBDQQogICAgICAgIHppcDoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZXhhbXBsZTogJzk0MDIyJwpgYGAKCioqcmVzb2x2ZWRDb21iaW5hdG9yID0gdHJ1ZSAoZGVmYXVsdCkgLSBUZXN0IGNhc2UqKgoKYGBgCkBUZXN0CiAgICBwdWJsaWMgdm9pZCByZXNvbHZlQWxsT2ZXaXRob3V0QWdncmVnYXRpbmdQYXJhbWV0ZXJzKEBJbmplY3RhYmxlIGZpbmFsIExpc3Q8QXV0aG9yaXphdGlvblZhbHVlPiBhdXRocykgewogICAgICAgIFBhcnNlT3B0aW9ucyBvcHRpb25zID0gbmV3IFBhcnNlT3B0aW9ucygpOwogICAgICAgIG9wdGlvbnMuc2V0UmVzb2x2ZUZ1bGx5KHRydWUpOwogICAgICAgIG9wdGlvbnMuc2V0UmVzb2x2ZUNvbWJpbmF0b3JzKHRydWUpOwoKICAgICAgICAvLyBUZXN0aW5nIGNvbXBvbmVudHMvc2NoZW1hcwogICAgICAgIE9wZW5BUEkgb3BlbkFQSSA9IG5ldyBPcGVuQVBJVjNQYXJzZXIoKS5yZWFkTG9jYXRpb24oInNyYy90ZXN0L3Jlc291cmNlcy9jb21wb3NlZC55YW1sIixhdXRocyxvcHRpb25zKS5nZXRPcGVuQVBJKCk7CiAgICAgICAgCiAgICAgICAgQ29tcG9zZWRTY2hlbWEgYWxsT2YgPSAoQ29tcG9zZWRTY2hlbWEpIG9wZW5BUEkuZ2V0Q29tcG9uZW50cygpLmdldFNjaGVtYXMoKS5nZXQoIkV4dGVuZGVkQWRkcmVzcyIpOwogICAgICAgIGFzc2VydEVxdWFscyhhbGxPZi5nZXRBbGxPZigpLnNpemUoKSwgMik7CgogICAgICAgIGFzc2VydFRydWUoYWxsT2YuZ2V0QWxsT2YoKS5nZXQoMCkuZ2V0JHJlZigpICE9IG51bGwpOwogICAgICAgIGFzc2VydFRydWUoYWxsT2YuZ2V0QWxsT2YoKS5nZXQoMSkuZ2V0UHJvcGVydGllcygpLmNvbnRhaW5zS2V5KCJncHMiKSk7CgoKICAgICAgICAvLyBUZXN0aW5nIHBhdGggaXRlbQogICAgICAgIE9iamVjdFNjaGVtYSBzY2hlbWEgPSAoT2JqZWN0U2NoZW1hKSBvcGVuQVBJLmdldFBhdGhzKCkuZ2V0KCIvd2l0aEludmFsaWRDb21wb3NlZE1vZGVsIikuZ2V0UG9zdCgpLmdldFJlcXVlc3RCb2R5KCkuZ2V0Q29udGVudCgpLmdldCgiYXBwbGljYXRpb24vanNvbiIpLmdldFNjaGVtYSgpOwoKICAgICAgICBhc3NlcnRFcXVhbHMoc2NoZW1hLmdldFByb3BlcnRpZXMoKS5zaXplKCksIDUpOwogICAgICAgIGFzc2VydFRydWUoc2NoZW1hLmdldFByb3BlcnRpZXMoKS5jb250YWluc0tleSgic3RyZWV0IikpOwogICAgICAgIGFzc2VydFRydWUoc2NoZW1hLmdldFByb3BlcnRpZXMoKS5jb250YWluc0tleSgiZ3BzIikpOwoKICAgIH0KYGBgCgoqKnJlc29sdmVkQ29tYmluYXRvciA9IHRydWUgKGRlZmF1bHQpIC0gUmVzb2x2ZWQgWWFtbCoqCgpgYGAKb3BlbmFwaTogMy4wLjEKaW5mbzoKICB0aXRsZTogdGVzdGluZyBzb3VyY2UgZmlsZQogIGRlc2NyaXB0aW9uOiBUaGlzIGlzIGEgc2FtcGxlIHNlcnZlciBQZXRzdG9yZQogIHRlcm1zT2ZTZXJ2aWNlOiBodHRwOi8vc3dhZ2dlci5pby90ZXJtcy8KICB2ZXJzaW9uOiAxLjAuMApzZXJ2ZXJzOgotIHVybDogaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vYXBpCnBhdGhzOgogIC93aXRoSW52YWxpZENvbXBvc2VkTW9kZWw6CiAgICBwb3N0OgogICAgICBvcGVyYXRpb25JZDogd2l0aEludmFsaWRDb21wb3NlZE1vZGVsCiAgICAgIHJlcXVlc3RCb2R5OgogICAgICAgIGNvbnRlbnQ6CiAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOgogICAgICAgICAgICBzY2hlbWE6CiAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgLSBncHMKICAgICAgICAgICAgICAtIHN0cmVldAogICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICBzdHJlZXQ6CiAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBleGFtcGxlOiAxMjM0NSBFbCBNb250ZSBSb2FkCiAgICAgICAgICAgICAgICBjaXR5OgogICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgZXhhbXBsZTogTG9zIEFsdG9zIEhpbGxzCiAgICAgICAgICAgICAgICBzdGF0ZToKICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IENBCiAgICAgICAgICAgICAgICB6aXA6CiAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBleGFtcGxlOiAiOTQwMjIiCiAgICAgICAgICAgICAgICBncHM6CiAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHJlcXVpcmVkOiBmYWxzZQogICAgICByZXNwb25zZXM6CiAgICAgICAgMjAwOgogICAgICAgICAgZGVzY3JpcHRpb246IHN1Y2Nlc3MhCmNvbXBvbmVudHM6CiAgc2NoZW1hczoKICAgIEV4dGVuZGVkQWRkcmVzczoKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIGFsbE9mOgogICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvc2NoZW1hcy9BZGRyZXNzJwogICAgICAtIHJlcXVpcmVkOgogICAgICAgIC0gZ3BzCiAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgIGdwczoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICBBZGRyZXNzOgogICAgICByZXF1aXJlZDoKICAgICAgLSBzdHJlZXQKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgc3RyZWV0OgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBleGFtcGxlOiAxMjM0NSBFbCBNb250ZSBSb2FkCiAgICAgICAgY2l0eToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZXhhbXBsZTogTG9zIEFsdG9zIEhpbGxzCiAgICAgICAgc3RhdGU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGV4YW1wbGU6IENBCiAgICAgICAgemlwOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBleGFtcGxlOiAiOTQwMjIiCiBgYGAKIAogKipyZXNvbHZlZENvbWJpbmF0b3IgPSBmYWxzZSAtIFRlc3QgY2FzZSoqCiAKIGBgYAogQFRlc3QKICAgIHB1YmxpYyB2b2lkIHJlc29sdmVBbGxPZldpdGhvdXRBZ2dyZWdhdGluZ1BhcmFtZXRlcnMoQEluamVjdGFibGUgZmluYWwgTGlzdDxBdXRob3JpemF0aW9uVmFsdWU+IGF1dGhzKSB7CiAgICAgICAgUGFyc2VPcHRpb25zIG9wdGlvbnMgPSBuZXcgUGFyc2VPcHRpb25zKCk7CiAgICAgICAgb3B0aW9ucy5zZXRSZXNvbHZlRnVsbHkodHJ1ZSk7CiAgICAgICAgb3B0aW9ucy5zZXRSZXNvbHZlQ29tYmluYXRvcnMoZmFsc2UpOwoKICAgICAgICAvLyBUZXN0aW5nIGNvbXBvbmVudHMvc2NoZW1hcwogICAgICAgIE9wZW5BUEkgb3BlbkFQSSA9IG5ldyBPcGVuQVBJVjNQYXJzZXIoKS5yZWFkTG9jYXRpb24oInNyYy90ZXN0L3Jlc291cmNlcy9jb21wb3NlZC55YW1sIixhdXRocyxvcHRpb25zKS5nZXRPcGVuQVBJKCk7CiAgICAgICAKICAgICAgICBDb21wb3NlZFNjaGVtYSBhbGxPZiA9IChDb21wb3NlZFNjaGVtYSkgb3BlbkFQSS5nZXRDb21wb25lbnRzKCkuZ2V0U2NoZW1hcygpLmdldCgiRXh0ZW5kZWRBZGRyZXNzIik7CiAgICAgICAgYXNzZXJ0RXF1YWxzKGFsbE9mLmdldEFsbE9mKCkuc2l6ZSgpLCAyKTsKICAgICAgICBhc3NlcnRUcnVlKGFsbE9mLmdldEFsbE9mKCkuZ2V0KDApLmdldFByb3BlcnRpZXMoKS5jb250YWluc0tleSgic3RyZWV0IikpOwogICAgICAgIGFzc2VydFRydWUoYWxsT2YuZ2V0QWxsT2YoKS5nZXQoMSkuZ2V0UHJvcGVydGllcygpLmNvbnRhaW5zS2V5KCJncHMiKSk7CgogICAgICAgIC8vIFRlc3RpbmcgcGF0aCBpdGVtCiAgICAgICAgQ29tcG9zZWRTY2hlbWEgc2NoZW1hID0gKENvbXBvc2VkU2NoZW1hKSBvcGVuQVBJLmdldFBhdGhzKCkuZ2V0KCIvd2l0aEludmFsaWRDb21wb3NlZE1vZGVsIikuZ2V0UG9zdCgpLmdldFJlcXVlc3RCb2R5KCkuZ2V0Q29udGVudCgpLmdldCgiYXBwbGljYXRpb24vanNvbiIpLmdldFNjaGVtYSgpOwogICAgICAgIC8vIEluIGZhY3QgdGhlIHNjaGVtYSByZXNvbHZlZCBwcmV2aW91c2x5IGlzIHRoZSBzYW1lIG9mIC93aXRoSW52YWxpZENvbXBvc2VkTW9kZWwKICAgICAgICBhc3NlcnRFcXVhbHMoc2NoZW1hLCBhbGxPZik7CiAgICAgICAgYXNzZXJ0RXF1YWxzKHNjaGVtYS5nZXRBbGxPZigpLnNpemUoKSwgMik7CiAgICAgICAgYXNzZXJ0VHJ1ZShzY2hlbWEuZ2V0QWxsT2YoKS5nZXQoMCkuZ2V0UHJvcGVydGllcygpLmNvbnRhaW5zS2V5KCJzdHJlZXQiKSk7CiAgICAgICAgYXNzZXJ0VHJ1ZShzY2hlbWEuZ2V0QWxsT2YoKS5nZXQoMSkuZ2V0UHJvcGVydGllcygpLmNvbnRhaW5zS2V5KCJncHMiKSk7CgogICAgfQogIGBgYAogIAogICoqcmVzb2x2ZWRDb21iaW5hdG9yID0gZmFsc2UgLSBSZXNvbHZlZCBZYW1sKioKICAKICBgYGAKb3BlbmFwaTogMy4wLjEKaW5mbzoKICB0aXRsZTogdGVzdGluZyBzb3VyY2UgZmlsZQogIGRlc2NyaXB0aW9uOiBUaGlzIGlzIGEgc2FtcGxlIHNlcnZlciBQZXRzdG9yZQogIHRlcm1zT2ZTZXJ2aWNlOiBodHRwOi8vc3dhZ2dlci5pby90ZXJtcy8KICB2ZXJzaW9uOiAxLjAuMApzZXJ2ZXJzOgotIHVybDogaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vYXBpCnBhdGhzOgogIC93aXRoSW52YWxpZENvbXBvc2VkTW9kZWw6CiAgICBwb3N0OgogICAgICBvcGVyYXRpb25JZDogd2l0aEludmFsaWRDb21wb3NlZE1vZGVsCiAgICAgIHJlcXVlc3RCb2R5OgogICAgICAgIGNvbnRlbnQ6CiAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOgogICAgICAgICAgICBzY2hlbWE6CiAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgYWxsT2Y6CiAgICAgICAgICAgICAgLSByZXF1aXJlZDoKICAgICAgICAgICAgICAgIC0gc3RyZWV0CiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIHN0cmVldDoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBleGFtcGxlOiAxMjM0NSBFbCBNb250ZSBSb2FkCiAgICAgICAgICAgICAgICAgIGNpdHk6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgZXhhbXBsZTogTG9zIEFsdG9zIEhpbGxzCiAgICAgICAgICAgICAgICAgIHN0YXRlOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IENBCiAgICAgICAgICAgICAgICAgIHppcDoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBleGFtcGxlOiAiOTQwMjIiCiAgICAgICAgICAgICAgLSByZXF1aXJlZDoKICAgICAgICAgICAgICAgIC0gZ3BzCiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIGdwczoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICByZXF1aXJlZDogZmFsc2UKICAgICAgcmVzcG9uc2VzOgogICAgICAgIDIwMDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiBzdWNjZXNzIQpjb21wb25lbnRzOgogIHNjaGVtYXM6CiAgICBFeHRlbmRlZEFkZHJlc3M6CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBhbGxPZjoKICAgICAgLSByZXF1aXJlZDoKICAgICAgICAtIHN0cmVldAogICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICBzdHJlZXQ6CiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICBleGFtcGxlOiAxMjM0NSBFbCBNb250ZSBSb2FkCiAgICAgICAgICBjaXR5OgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgZXhhbXBsZTogTG9zIEFsdG9zIEhpbGxzCiAgICAgICAgICBzdGF0ZToKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgIGV4YW1wbGU6IENBCiAgICAgICAgICB6aXA6CiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICBleGFtcGxlOiAiOTQwMjIiCiAgICAgIC0gcmVxdWlyZWQ6CiAgICAgICAgLSBncHMKICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgZ3BzOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgIEFkZHJlc3M6CiAgICAgIHJlcXVpcmVkOgogICAgICAtIHN0cmVldAogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBzdHJlZXQ6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGV4YW1wbGU6IDEyMzQ1IEVsIE1vbnRlIFJvYWQKICAgICAgICBjaXR5OgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBleGFtcGxlOiBMb3MgQWx0b3MgSGlsbHMKICAgICAgICBzdGF0ZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZXhhbXBsZTogQ0EKICAgICAgICB6aXA6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGV4YW1wbGU6ICI5NDAyMiIKYGBgCgojIyMgRXh0ZW5zaW9ucwpUaGlzIHByb2plY3QgaGFzIGEgY29yZSBhcnRpZmFjdC0tYHN3YWdnZXItcGFyc2VyYCwgd2hpY2ggdXNlcyBKYXZhIFNlcnZpY2UgUHJvdmlkZXIgSW50ZXJmYWNlIChTUEkpIHNvIGFkZGl0aW9uYWwgZXh0ZW5zaW9ucyBjYW4gYmUgYWRkZWQuIAoKVG8gYnVpbGQgeW91ciBvd24gZXh0ZW5zaW9uLCB5b3Ugc2ltcGx5IG5lZWQgdG8gY3JlYXRlIGEgYHNyYy9tYWluL3Jlc291cmNlcy9NRVRBLUlORi9zZXJ2aWNlcy9pby5zd2FnZ2VyLnYzLnBhcnNlci5jb3JlLmV4dGVuc2lvbnMuU3dhZ2dlclBhcnNlckV4dGVuc2lvbmAgZmlsZSB3aXRoIHRoZSBmdWxsIGNsYXNzbmFtZSBvZiB5b3VyIGltcGxlbWVudGF0aW9uLiAgWW91ciBjbGFzcyBtdXN0IGFsc28gaW1wbGVtZW50IHRoZSBgaW8uc3dhZ2dlci52My5wYXJzZXIuY29yZS5leHRlbnNpb25zLlN3YWdnZXJQYXJzZXJFeHRlbnNpb25gIGludGVyZmFjZS4gIFRoZW4sIGluY2x1ZGluZyB5b3VyIGxpYnJhcnkgd2l0aCB0aGUgYHN3YWdnZXItcGFyc2VyYCBtb2R1bGUgd2lsbCBjYXVzZSBpdCB0byBiZSB0cmlnZ2VyZWQgYXV0b21hdGljYWxseS4KCiMjIFNlY3VyaXR5IGNvbnRhY3QKClBsZWFzZSBkaXNjbG9zZSBhbnkgc2VjdXJpdHktcmVsYXRlZCBpc3N1ZXMgb3IgdnVsbmVyYWJpbGl0aWVzIGJ5IGVtYWlsaW5nIFtzZWN1cml0eUBzd2FnZ2VyLmlvXShtYWlsdG86c2VjdXJpdHlAc3dhZ2dlci5pbyksIGluc3RlYWQgb2YgdXNpbmcgdGhlIHB1YmxpYyBpc3N1ZSB0cmFja2VyLgo=
        readmeEtag: '"893e0a7f358342c960a2d8329a2d4f6d57161ad2006abc6286d80dce3023ef93"'
        readmeLastModified: Wed, 27 Apr 2022 16:49:25 GMT
        description: Swagger Spec to Java POJOs
        created: '2014-04-21T16:00:22Z'
        updated: '2022-04-25T08:33:55Z'
        language: Java
        archived: false
        stars: 568
        watchers: 568
        forks: 455
        owner: swagger-api
        logo: https://avatars.githubusercontent.com/u/7658037?v=4
        license: Apache-2.0
        repoEtag: '"8230b2eabe4563bba93dcf97ef7e8f45f856324d8abc5fa5d36e19f4effb9a4f"'
        repoLastModified: Mon, 25 Apr 2022 08:33:55 GMT
      foundInMaster: true
      id: 45f46a8f7ac698cfe3926303bf3dff9d
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'No'
      stars: 568
      watchers: 568
      forks: 455
      created: '2014-04-21T16:00:22Z'
      lastUpdated: '2022-04-25T08:33:55Z'
      readMe: >
        # Swagger Parser <img
        src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
        height="50" align="right">


        **NOTE:** If you're looking for `swagger-parser` 1.X and OpenAPI 2.0,
        please refer to [v1
        branch](https://github.com/swagger-api/swagger-parser/tree/v1)


        ![Build Master - Java 8, 11, and
        14](https://github.com/swagger-api/swagger-parser/workflows/Build%20Test%20Deploy%20master/badge.svg?branch=master)


        # Table of contents

          - [Overview](#overview)
          - [Table of Contents](#table-of-contents)
          - [Usage](#usage)
          - [Adding to your project](#adding-to-your-project)
            - [Prerequisites](#prerequisites)
          - [Authentication](#authentication)  
          - [Options](#options)
            - [Resolve](#1-resolve)
            - [ResolveFully](#2-resolvefully)
            - [Flatten](#3-flatten)
            - [ResolveCombinators](#4-resolvecombinators)
          - [Extensions](#extensions)
          - [License](#license)
           
        ## Overview 


        This is the Swagger Parser project, which parses OpenAPI definitions in
        JSON or YAML format into
        [swagger-core](https://github.com/swagger-api/swagger-core)
        representation as [Java
        POJO](https://github.com/swagger-api/swagger-core/blob/master/modules/swagger-models/src/main/java/io/swagger/v3/oas/models/OpenAPI.java#L36),
        returning any validation warnings/errors.  


        It also provides a simple framework to add additional converters from
        different formats into the Swagger objects, making the entire toolchain
        available.



        ### Usage

        Using the Swagger Parser is simple.  Once included in your project, you
        can read a OpenAPI Specification from any location:


        ```java

        import io.swagger.parser.OpenAPIParser;

        import io.swagger.v3.parser.OpenAPIV3Parser;

        import io.swagger.v3.parser.core.models.SwaggerParseResult;

        import io.swagger.v3.oas.models.OpenAPI;


        // ... your code

          // parse a swagger description from the petstore and get the result
          SwaggerParseResult result = new OpenAPIParser().readLocation("https://petstore3.swagger.io/api/v3/openapi.json", null, null);
          
          // or from a file
          //   SwaggerParseResult result = new OpenAPIParser().readLocation("./path/to/openapi.yaml", null, null);
          
          // the parsed POJO
          OpenAPI openAPI = result.getOpenAPI();
          
          if (result.getMessages() != null) result.getMessages().forEach(System.err::println); // validation errors and warnings
          
          if (openAPI != null) {
            ...
          }
          
        ```


        or from a string:


        ```java

        import io.swagger.parser.OpenAPIParser;

        import io.swagger.v3.parser.OpenAPIV3Parser;

        import io.swagger.v3.parser.core.models.SwaggerParseResult;

        import io.swagger.v3.oas.models.OpenAPI;


        // ... your code

          // parse a swagger description from the petstore and get the result
          SwaggerParseResult result = new OpenAPIParser().readContents("https://petstore3.swagger.io/api/v3/openapi.json", null, null);
          
          // or from a file
          //   SwaggerParseResult result = new OpenAPIParser().readContents("./path/to/openapi.yaml", null, null);
          
          // the parsed POJO
          OpenAPI openAPI = result.getOpenAPI();
          
          if (result.getMessages() != null) result.getMessages().forEach(System.err::println); // validation errors and warnings
          
          if (openAPI != null) {
            ...
          }
          
        ```


        If you are providing a Swagger/OpenAPI 2.0 document to the parser ,
        e.g.:


        ```java

        SwaggerParseResult result = new
        OpenAPIParser().readContents("./path/to/swagger.yaml", null, null);

        ```


        the Swagger/OpenAPI 2.0 document will be first converted into a
        comparable OpenAPI 3.0 one.


        You can also directly use `OpenAPIV3Parser` which only handles OpenAPI
        3.0 documents, and provides a convenience method to get directly the
        parsed `OpenAPI object:


        ```java

        import io.swagger.v3.parser.OpenAPIV3Parser;

        import io.swagger.v3.oas.models.OpenAPI;


        // ... your code

          // read a swagger description from the petstore
            
          OpenAPI openAPI = new OpenAPIV3Parser().read("https://petstore3.swagger.io/api/v3/openapi.json");
          
        ```


        ### Adding to your project

        You can include this library from Sonatype OSS for SNAPSHOTS, or Maven
        central for releases.  In your dependencies:


        ```xml

        <dependency>
          <groupId>io.swagger.parser.v3</groupId>
          <artifactId>swagger-parser</artifactId>
          <version>2.0.32</version>
        </dependency>

        ```


        #### Prerequisites

        You need the following installed and available in your $PATH:


        * [Java 1.8](http://java.oracle.com)

        * [Apache maven 3.x](http://maven.apache.org/)


        After cloning the project, you can build it from source with this
        command:


        ```

        mvn package

        ```


        ### Authentication


        If your OpenAPI definition is protected, you can pass headers in the
        request:

        ```java

        import io.swagger.v3.parser.core.models.AuthorizationValue;


        // ... your code

          // build a authorization value
          AuthorizationValue mySpecialHeader = new AuthorizationValue()
            .keyName("x-special-access")  //  the name of the authorization to pass
            .value("i-am-special")        //  the value of the authorization
            .type("header");              //  the location, as either `header` or `query`

          // or in a single constructor
          AuthorizationValue apiKey = new AuthorizationValue("api_key", "special-key", "header");
          OpenAPI openAPI = new OpenAPIV3Parser().readWithInfo(
            "https://petstore3.swagger.io/api/v3/openapi.json",
            Arrays.asList(mySpecialHeader, apiKey)
          );
        ```


        #### Dealing with self-signed SSL certificates

        If you're dealing with self-signed SSL certificates, or those signed by
        GoDaddy, you'll need to disable SSL Trust 

        Manager.  That's done by setting a system environment variable as such:


        ```

        export TRUST_ALL=true

        ```


        And then the Swagger Parser will _ignore_ invalid certificates.  Of
        course this is generally a bad idea, but if you're 

        working inside a firewall or really know what you're doing, well,
        there's your rope.


        #### Dealing with Let's Encrypt

        Depending on the version of Java that you use, certificates signed by
        the [Let's Encrypt](https://letsencrypt.org) certificate authority _may
        not work_ by default.  If you are using any version of Java prior to
        1.8u101, you most likely _must_ install an additional CA in your

        JVM.  Also note that 1.8u101 may _not_ be sufficient on it's own.  Some
        users have reported that certain operating systems are 

        not accepting Let's Encrypt signed certificates.


        Your options include:


        * Accepting all certificates per above

        * Installing the certificate manually in your JVM using the keystore
        using the `keytool` command

        * Configuring the JVM on startup to load your certificate


        But... this is all standard SSL configuration stuff and is well
        documented across the web.



        ### Options

        Parser uses options as a way to customize the behavior while parsing:


        #### 1. resolve:


        ```java

        ParseOptions parseOptions = new ParseOptions();

        parseOptions.setResolve(true); 

        final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
        parseOptions);

        ```



        - When remote or relative references are found in the parsed document,
        parser will attempt to:


        1. resolve the reference in the remote or relative location 

        1. parse the resolved reference

        1. add the resolved "component" (e.g. parameter, schema, response, etc.)
        to the resolved `OpenAPI` POJO components section

        1. replace the remote/relative reference with a local reference,  e.g. :
        `#/components/schemas/NameOfRemoteSchema`. 


        This applies to schemas, parameters, responses, pretty much everything
        containing a ref.


        #### 2. resolveFully:


        ```java

        ParseOptions parseOptions = new ParseOptions();

        parseOptions.setResolve(true); // implicit

        parseOptions.setResolveFully(true);

        final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
        parseOptions);

        ```


        - In some scenarios, after references are resolved (with `resolve`, see
        above), you might need to have all local references removed replacing
        the reference with the content of the referenced element. This is for
        example used in [Swagger
        Inflector](https://github.com/swagger-api/swagger-inflector). Be aware
        that the result could be more heavy/long due to duplication
            
        Original document:


        `a.yaml` 

        ```

        openapi: 3.0.1

        paths:
          "/newPerson":
            post:
              summary: Create new person
              description: Create new person
              responses:
                '200':
                  description: ok
                  content:
                    "*/*":
                      schema:
                        "$ref": "./ref-without-component/b.yaml#/components/schemas/CustomerType"
        ```

        `b.yaml`

        ```

        openapi: 3.0.1

        components:
          schemas:
            CustomerType:
              type: string
              example: Example value
        ```


        Serialized result after parsing with option `resolveFully(true)`


        `a.yaml`

        ```

        openapi: 3.0.1

        servers:

        - url: /

        paths:
          /newPerson:
            post:
              summary: Create new person
              description: Create new person
              responses:
                200:
                  description: ok
                  content:
                    '*/*':
                      schema:
                        type: string
                        example: Example value
        components:
          schemas:
            CustomerType:
              type: string
              example: Example value
        ```


        #### 3. flatten: 


        ```java

        ParseOptions parseOptions = new ParseOptions();

        parseOptions.setFlatten(true); 

        final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
        parseOptions);

        ```



        This is kind of the opposite of resolveFully, limited to defined
        schemas.


        In some scenarios, you might need to have all schemas defined inline
        (e.g. a response schema) moved to the `components/schemas` section and
        replaced with a reference to the newly added schema within
        `components/schemas`. This is for example used in [Swagger
        Codegen](https://github.com/swagger-api/swagger-codegen).


        Original document:


        `flatten.yaml`


        ```

        openapi: 3.0.0

        info:
          version: 1.0.0
          title: Swagger Petstore
          license:
            name: MIT
        paths:
          /pets:
            get:
              summary: List all pets
              operationId: listPets
              responses:
                '200':
                  description: An paged array of pets
                  headers:
                    x-next:
                      description: A link to the next page of responses
                      schema:
                        type: string
                  content:
                    application/json:
                      schema:
                         type: object
                         properties:
                            id:
                              type: integer
                              format: int64
                            name:
                              type: string
                            tag:
                              type: string
        ```


        Serialized result after parsing with option `flatten(true)`


        ```

        openapi: 3.0.0

        info:
          title: Swagger Petstore
          license:
            name: MIT
          version: 1.0.0
        servers:

        - url: /

        paths:
          /pets:
            get:
              tags:
              - pets
              summary: List all pets
              responses:
                200:
                  description: An paged array of pets
                  headers:
                    x-next:
                      description: A link to the next page of responses
                      style: simple
                      explode: false
                      schema:
                        type: string
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/inline_response_200'
        components:
          schemas:
            inline_response_200:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
                tag:
                  type: string
        ```


        #### 4. resolveCombinators: 


        ```java

        ParseOptions parseOptions = new ParseOptions();

        parseOptions.setResolve(true); // implicit

        parseOptions.setResolveFully(true);

        parseOptions.setResolveCombinators(false); // default is true 

        final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
        parseOptions);

        ```


        This option (only available with `resolveFully = true`) allows to
        customize behaviour related to `allOf/anyOf/oneOf` (composed schemas) 
        processing. With option set to `true` (default), composed schemas are
        transformed into "non composed" ones, by having all properties merged
        into a single resulting schema (see example below).

        If option is set to `false`, the resulting schema will instead maintain
        its "composed" nature, keeping properties within e.g. the `allOf`
        members.


        Please see examples below:


        **Unresolved yaml**


        ```

        openapi: 3.0.1

        servers:

        - url: http://petstore.swagger.io/api


        info:
          description: 'This is a sample server Petstore'
          version: 1.0.0
          title: testing source file
          termsOfService: http://swagger.io/terms/

        paths:
          "/withInvalidComposedModel":
            post:
              operationId: withInvalidComposedModel
              requestBody:
                content:
                  "application/json":
                    schema:
                      "$ref": "#/components/schemas/ExtendedAddress"
                required: false
              responses:
                '200':
                  description: success!
        components:
          schemas:
            ExtendedAddress:
              type: object
              allOf:
                - $ref: '#/components/schemas/Address'
                - type: object
                  required:
                  - gps
                  properties:
                    gps:
                      type: string
            Address:
              required:
              - street
              type: object
              properties:
                street:
                  type: string
                  example: 12345 El Monte Road
                city:
                  type: string
                  example: Los Altos Hills
                state:
                  type: string
                  example: CA
                zip:
                  type: string
                  example: '94022'
        ```


        **resolvedCombinator = true (default) - Test case**


        ```

        @Test
            public void resolveAllOfWithoutAggregatingParameters(@Injectable final List<AuthorizationValue> auths) {
                ParseOptions options = new ParseOptions();
                options.setResolveFully(true);
                options.setResolveCombinators(true);

                // Testing components/schemas
                OpenAPI openAPI = new OpenAPIV3Parser().readLocation("src/test/resources/composed.yaml",auths,options).getOpenAPI();
                
                ComposedSchema allOf = (ComposedSchema) openAPI.getComponents().getSchemas().get("ExtendedAddress");
                assertEquals(allOf.getAllOf().size(), 2);

                assertTrue(allOf.getAllOf().get(0).get$ref() != null);
                assertTrue(allOf.getAllOf().get(1).getProperties().containsKey("gps"));


                // Testing path item
                ObjectSchema schema = (ObjectSchema) openAPI.getPaths().get("/withInvalidComposedModel").getPost().getRequestBody().getContent().get("application/json").getSchema();

                assertEquals(schema.getProperties().size(), 5);
                assertTrue(schema.getProperties().containsKey("street"));
                assertTrue(schema.getProperties().containsKey("gps"));

            }
        ```


        **resolvedCombinator = true (default) - Resolved Yaml**


        ```

        openapi: 3.0.1

        info:
          title: testing source file
          description: This is a sample server Petstore
          termsOfService: http://swagger.io/terms/
          version: 1.0.0
        servers:

        - url: http://petstore.swagger.io/api

        paths:
          /withInvalidComposedModel:
            post:
              operationId: withInvalidComposedModel
              requestBody:
                content:
                  application/json:
                    schema:
                      required:
                      - gps
                      - street
                      type: object
                      properties:
                        street:
                          type: string
                          example: 12345 El Monte Road
                        city:
                          type: string
                          example: Los Altos Hills
                        state:
                          type: string
                          example: CA
                        zip:
                          type: string
                          example: "94022"
                        gps:
                          type: string
                required: false
              responses:
                200:
                  description: success!
        components:
          schemas:
            ExtendedAddress:
              type: object
              allOf:
              - $ref: '#/components/schemas/Address'
              - required:
                - gps
                type: object
                properties:
                  gps:
                    type: string
            Address:
              required:
              - street
              type: object
              properties:
                street:
                  type: string
                  example: 12345 El Monte Road
                city:
                  type: string
                  example: Los Altos Hills
                state:
                  type: string
                  example: CA
                zip:
                  type: string
                  example: "94022"
         ```
         
         **resolvedCombinator = false - Test case**
         
         ```
         @Test
            public void resolveAllOfWithoutAggregatingParameters(@Injectable final List<AuthorizationValue> auths) {
                ParseOptions options = new ParseOptions();
                options.setResolveFully(true);
                options.setResolveCombinators(false);

                // Testing components/schemas
                OpenAPI openAPI = new OpenAPIV3Parser().readLocation("src/test/resources/composed.yaml",auths,options).getOpenAPI();
               
                ComposedSchema allOf = (ComposedSchema) openAPI.getComponents().getSchemas().get("ExtendedAddress");
                assertEquals(allOf.getAllOf().size(), 2);
                assertTrue(allOf.getAllOf().get(0).getProperties().containsKey("street"));
                assertTrue(allOf.getAllOf().get(1).getProperties().containsKey("gps"));

                // Testing path item
                ComposedSchema schema = (ComposedSchema) openAPI.getPaths().get("/withInvalidComposedModel").getPost().getRequestBody().getContent().get("application/json").getSchema();
                // In fact the schema resolved previously is the same of /withInvalidComposedModel
                assertEquals(schema, allOf);
                assertEquals(schema.getAllOf().size(), 2);
                assertTrue(schema.getAllOf().get(0).getProperties().containsKey("street"));
                assertTrue(schema.getAllOf().get(1).getProperties().containsKey("gps"));

            }
          ```
          
          **resolvedCombinator = false - Resolved Yaml**
          
          ```
        openapi: 3.0.1

        info:
          title: testing source file
          description: This is a sample server Petstore
          termsOfService: http://swagger.io/terms/
          version: 1.0.0
        servers:

        - url: http://petstore.swagger.io/api

        paths:
          /withInvalidComposedModel:
            post:
              operationId: withInvalidComposedModel
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      allOf:
                      - required:
                        - street
                        type: object
                        properties:
                          street:
                            type: string
                            example: 12345 El Monte Road
                          city:
                            type: string
                            example: Los Altos Hills
                          state:
                            type: string
                            example: CA
                          zip:
                            type: string
                            example: "94022"
                      - required:
                        - gps
                        type: object
                        properties:
                          gps:
                            type: string
                required: false
              responses:
                200:
                  description: success!
        components:
          schemas:
            ExtendedAddress:
              type: object
              allOf:
              - required:
                - street
                type: object
                properties:
                  street:
                    type: string
                    example: 12345 El Monte Road
                  city:
                    type: string
                    example: Los Altos Hills
                  state:
                    type: string
                    example: CA
                  zip:
                    type: string
                    example: "94022"
              - required:
                - gps
                type: object
                properties:
                  gps:
                    type: string
            Address:
              required:
              - street
              type: object
              properties:
                street:
                  type: string
                  example: 12345 El Monte Road
                city:
                  type: string
                  example: Los Altos Hills
                state:
                  type: string
                  example: CA
                zip:
                  type: string
                  example: "94022"
        ```


        ### Extensions

        This project has a core artifact--`swagger-parser`, which uses Java
        Service Provider Interface (SPI) so additional extensions can be added. 


        To build your own extension, you simply need to create a
        `src/main/resources/META-INF/services/io.swagger.v3.parser.core.extensions.SwaggerParserExtension`
        file with the full classname of your implementation.  Your class must
        also implement the
        `io.swagger.v3.parser.core.extensions.SwaggerParserExtension`
        interface.  Then, including your library with the `swagger-parser`
        module will cause it to be triggered automatically.


        ## Security contact


        Please disclose any security-related issues or vulnerabilities by
        emailing [security@swagger.io](mailto:security@swagger.io), instead of
        using the public issue tracker.
    - source: IMPLEMENTATIONS.md
      name: swagger-models
      homepage: >-
        https://github.com/swagger-api/swagger-core/tree/master/modules/swagger-models
      language: Java
      source_description: OpenAPI 3.0 Java Pojos
      category:
        - Low-level Tooling
        - Code Generators
      foundInMaster: true
      repository: >-
        https://github.com/swagger-api/swagger-core/tree/master/modules/swagger-models
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"98bc89d482d68119986f3131f16310ce12e8e2884a0aedfe502915818b5b9c60"'
        readmeLastModified: Mon, 04 Apr 2022 16:09:24 GMT
        description: >-
          Examples and server integrations for generating the Swagger API
          Specification, which enables easy access to your REST API
        created: '2011-07-05T23:44:11Z'
        updated: '2022-04-29T13:28:08Z'
        language: Java
        archived: false
        stars: 6972
        watchers: 6972
        forks: 2107
        owner: swagger-api
        logo: https://avatars.githubusercontent.com/u/7658037?v=4
        license: Apache-2.0
        repoEtag: '"719a0d4c2107223a733e1ed4b1e77a186957f81d27bb6ba07d90340a30d6c7f2"'
        repoLastModified: Fri, 29 Apr 2022 13:28:08 GMT
      id: 266d60df2d48ad8a47539de3c1071f3a
      swagger: 'No'
      version30: 'No'
      version31: 'No'
      stars: 6972
      watchers: 6972
      forks: 2107
      created: '2011-07-05T23:44:11Z'
      lastUpdated: '2022-04-29T13:28:08Z'
      readMe: >
        # Swagger Core <img
        src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
        height="50" align="right">


        **NOTE:** If you're looking for Swagger Core 1.5.X and OpenAPI 2.0,
        please refer to [1.5
        branch](https://github.com/swagger-api/swagger-core/tree/1.5).


        **NOTE:** Since version 2.1.7, Swagger Core also supports the Jakarta
        namespace. There are a parallel set of artifacts with the `-jakarta`
        suffix, providing the same functionality as the unsuffixed (i.e.:
        `javax`) artifacts.

        Please see the
        [Wiki](https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Getting-started)
        for more details.


        ![Build Test
        Deploy](https://github.com/swagger-api/swagger-core/workflows/Build%20Test%20Deploy%20master/badge.svg?branch=master)

        [![Maven
        Central](https://maven-badges.herokuapp.com/maven-central/io.swagger.core.v3/swagger-project/badge.svg?style=plastic)](https://maven-badges.herokuapp.com/maven-central/io.swagger.core.v3/swagger-project)


        Swagger Core is a Java implementation of the OpenAPI Specification.
        Current version supports *JAX-RS2* (`javax` and `jakarta` namespaces).


        ## Get started with Swagger Core!

        See the guide on [getting started with Swagger
        Core](https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Getting-started)
        to get started with adding Swagger to your API.


        ## See the Wiki!

        The [github wiki](https://github.com/swagger-api/swagger-core/wiki)
        contains documentation, samples, contributions, etc. Start there.


        ## Compatibility

        The OpenAPI Specification has undergone several revisions since initial
        creation in 2010.  The Swagger Core project has the following
        compatibilities with the OpenAPI Specification:


        Swagger core Version      | Release Date | OpenAPI Spec compatibility |
        Notes | Status

        ------------------------- | ------------ | -------------------------- |
        ----- | ----

        2.2.0 (**current stable**)| 2022-04-04   | 3.0           | [tag
        v2.2.0](https://github.com/swagger-api/swagger-core/tree/v2.2.0) |
        Supported

        2.1.13                     | 2022-02-07   | 3.0           | [tag
        v2.1.13](https://github.com/swagger-api/swagger-core/tree/v2.1.13) |
        Supported

        2.1.12                     | 2021-12-23   | 3.0           | [tag
        v2.1.12](https://github.com/swagger-api/swagger-core/tree/v2.1.12)                                          
        | Supported

        2.1.11                     | 2021-09-29   | 3.0           | [tag
        v2.1.11](https://github.com/swagger-api/swagger-core/tree/v2.1.11)                                          
        | Supported**

        2.1.10                     | 2021-06-28   | 3.0           | [tag
        v2.1.10](https://github.com/swagger-api/swagger-core/tree/v2.1.10)                                          
        | Supported

        2.1.9                     | 2021-04-20   | 3.0           | [tag
        v2.1.9](https://github.com/swagger-api/swagger-core/tree/v2.1.9)                                            
        | Supported

        2.1.8                     | 2021-04-18   | 3.0           | [tag
        v2.1.8](https://github.com/swagger-api/swagger-core/tree/v2.1.8)                                            
        | Supported

        2.1.7                     | 2021-02-18   | 3.0           | [tag
        v2.1.7](https://github.com/swagger-api/swagger-core/tree/v2.1.7)                                            
        | Supported

        2.1.6                     | 2020-12-04   | 3.0           | [tag
        v2.1.6](https://github.com/swagger-api/swagger-core/tree/v2.1.6)                                            
        | Supported

        2.1.5                     | 2020-10-01   | 3.0           | [tag
        v2.1.5](https://github.com/swagger-api/swagger-core/tree/v2.1.5)                                            
        | Supported

        2.1.4                     | 2020-07-24   | 3.0           | [tag
        v2.1.4](https://github.com/swagger-api/swagger-core/tree/v2.1.4)                                            
        | Supported

        2.1.3                     | 2020-06-27   | 3.0           | [tag
        v2.1.3](https://github.com/swagger-api/swagger-core/tree/v2.1.3)                                            
        | Supported

        2.1.2                     | 2020-04-01   | 3.0           | [tag
        v2.1.2](https://github.com/swagger-api/swagger-core/tree/v2.1.2)                                            
        | Supported

        2.1.1                     | 2020-01-02   | 3.0           | [tag
        v2.1.1](https://github.com/swagger-api/swagger-core/tree/v2.1.1)                                            
        | Supported

        2.1.0                     | 2019-11-16   | 3.0           | [tag
        v2.1.0](https://github.com/swagger-api/swagger-core/tree/v2.1.0)                                            
        | Supported

        2.0.10                    | 2019-10-11   | 3.0           | [tag
        v2.0.10](https://github.com/swagger-api/swagger-core/tree/v2.0.10)                                          
        | Supported

        2.0.9                     | 2019-08-22   | 3.0           | [tag
        v2.0.9](https://github.com/swagger-api/swagger-core/tree/v2.0.9)                                            
        | Supported

        2.0.8                     | 2019-04-24   | 3.0           | [tag
        v2.0.8](https://github.com/swagger-api/swagger-core/tree/v2.0.8)                                            
        | Supported

        2.0.7                     | 2019-02-18   | 3.0           | [tag
        v2.0.7](https://github.com/swagger-api/swagger-core/tree/v2.0.7)                                            
        | Supported

        2.0.6                     | 2018-11-27   | 3.0           | [tag
        v2.0.6](https://github.com/swagger-api/swagger-core/tree/v2.0.6)                                            
        | Supported

        2.0.5                     | 2018-09-19   | 3.0           | [tag
        v2.0.5](https://github.com/swagger-api/swagger-core/tree/v2.0.5)                                            
        | Supported

        2.0.4                     | 2018-09-05   | 3.0           | [tag
        v2.0.4](https://github.com/swagger-api/swagger-core/tree/v2.0.4)                                            
        | Supported

        2.0.3                     | 2018-08-09   | 3.0           | [tag
        v2.0.3](https://github.com/swagger-api/swagger-core/tree/v2.0.3)                                            
        | Supported

        1.6.4 (**current stable**)| 2021-12-23   | 2.0           | [tag
        v1.6.4](https://github.com/swagger-api/swagger-core/tree/v1.6.4)                                            
        | Supported

        1.6.3                     | 2021-09-29   | 2.0           | [tag
        v1.6.3](https://github.com/swagger-api/swagger-core/tree/v1.6.3)                                            
        | Supported

        1.6.2                     | 2020-07-01   | 2.0           | [tag
        v1.6.2](https://github.com/swagger-api/swagger-core/tree/v1.6.2)                                            
        | Supported

        1.6.1                     | 2020-04-01   | 2.0           | [tag
        v1.6.1](https://github.com/swagger-api/swagger-core/tree/v1.6.1)                                            
        | Supported

        1.6.0                     | 2019-11-16   | 2.0           | [tag
        v1.6.0](https://github.com/swagger-api/swagger-core/tree/v1.6.0)                                            
        | Supported

        1.5.24                    | 2019-10-11   | 2.0           | [tag
        v1.5.24](https://github.com/swagger-api/swagger-core/tree/v1.5.24)                                          
        | Supported

        1.5.23                    | 2019-08-22   | 2.0           | [tag
        v1.5.23](https://github.com/swagger-api/swagger-core/tree/v1.5.23)                                          
        | Supported

        1.5.22                    | 2019-02-18   | 2.0           | [tag
        v1.5.22](https://github.com/swagger-api/swagger-core/tree/v1.5.22)                                          
        | Supported

        1.5.21                    | 2018-08-09   | 2.0           | [tag
        v1.5.21](https://github.com/swagger-api/swagger-core/tree/v1.5.21)                                          
        | Supported

        1.5.20                    | 2018-05-23   | 2.0           | [tag
        v1.5.20](https://github.com/swagger-api/swagger-core/tree/v1.5.20)                                          
        | Supported

        2.0.2                     | 2018-05-23   | 3.0           | [tag
        v2.0.2](https://github.com/swagger-api/swagger-core/tree/v2.0.2)                                            
        | Supported

        2.0.1                     | 2018-04-16   | 3.0           | [tag
        v2.0.1](https://github.com/swagger-api/swagger-core/tree/v2.0.1)                                            
        | Supported

        1.5.19                    | 2018-04-16   | 2.0           | [tag
        v1.5.19](https://github.com/swagger-api/swagger-core/tree/v1.5.19)                                          
        | Supported

        2.0.0                     | 2018-03-20   | 3.0           | [tag
        v2.0.0](https://github.com/swagger-api/swagger-core/tree/v2.0.0)                                            
        | Supported

        2.0.0-rc4                 | 2018-01-22   | 3.0           | [tag
        v2.0.0-rc4](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc4)                                    
        | Supported

        2.0.0-rc3                 | 2017-11-21   | 3.0           | [tag
        v2.0.0-rc3](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc3)                                    
        | Supported

        2.0.0-rc2                 | 2017-09-29   | 3.0           | [tag
        v2.0.0-rc2](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc2)                                    
        | Supported

        2.0.0-rc1                 | 2017-08-17   | 3.0           | [tag
        v2.0.0-rc1](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc1)                                    
        | Supported

        1.5.18                    | 2018-01-22   | 2.0           | [tag
        v1.5.18](https://github.com/swagger-api/swagger-core/tree/v1.5.18)                                          
        | Supported

        1.5.17                    | 2017-11-21   | 2.0           | [tag
        v1.5.17](https://github.com/swagger-api/swagger-core/tree/v1.5.17)                                          
        | Supported

        1.5.16                    | 2017-07-15   | 2.0           | [tag
        v1.5.16](https://github.com/swagger-api/swagger-core/tree/v1.5.16)                                          
        | Supported

        1.3.12                    | 2014-12-23   | 1.2           | [tag
        v1.3.12](https://github.com/swagger-api/swagger-core/tree/v1.3.12)                                          
        | Supported

        1.2.4                     | 2013-06-19   | 1.1           | [tag
        swagger-project_2.10.0-1.2.4](https://github.com/swagger-api/swagger-core/tree/swagger-project_2.10.0-1.2.4)
        | Deprecated

        1.0.0                     | 2011-10-16   | 1.0           | [tag
        v1.0](https://github.com/swagger-api/swagger-core/tree/v1.0)                                                
        | Deprecated



        ### Change History

        If you're interested in the change history of swagger and the Swagger
        Core framework, see
        [here](https://github.com/swagger-api/swagger-core/releases).


        ### Prerequisites

        You need the following installed and available in your $PATH:


        * Java 8

        * Apache maven 3.0.4 or greater

        * Jackson 2.4.5 or greater



        ### To build from source (currently 2.2.1-SNAPSHOT)

        ```

        # first time building locally

        mvn -N

        ```


        Subsequent builds:

        ```

        mvn install

        ```


        This will build the modules.


        Of course if you don't want to build locally you can grab artifacts from
        maven central:


        `https://repo1.maven.org/maven2/io/swagger/core/`


        ## Sample Apps

        The samples have moved to [a new
        repository](https://github.com/swagger-api/swagger-samples/tree/2.0) and
        contain various integrations and configurations.


        ## Security contact


        Please disclose any security-related issues or vulnerabilities by
        emailing [security@swagger.io](mailto:security@swagger.io), instead of
        using the public issue tracker.
    - source:
        - IMPLEMENTATIONS.md
        - openapi3 tags
      name: springdoc-openapi
      homepage: https://github.com/springdoc/springdoc-openapi
      language: Java
      source_description: >-
        Library that produces OpenAPI 3.x specification documentation for
        spring-boot applications.
      category: Low-level Tooling
      repository: https://github.com/springdoc/springdoc-openapi
      v3: true
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"567c213789624f5b47acba7ae7cc316693c20b0529cc44dad5278d7312f34b59"'
        readmeLastModified: Sun, 24 Apr 2022 18:50:15 GMT
        description: Library for OpenAPI 3 with spring-boot
        created: '2019-07-11T23:08:20Z'
        updated: '2022-04-29T06:47:42Z'
        language: Java
        archived: false
        stars: 1830
        watchers: 1830
        forks: 277
        owner: springdoc
        logo: https://avatars.githubusercontent.com/u/52804136?v=4
        license: Apache-2.0
        repoEtag: '"a65d4d58d4bcd2de0375241c85560ca939f05601915f3ada3fc34ee3b44b4d8a"'
        repoLastModified: Fri, 29 Apr 2022 06:47:42 GMT
      foundInMaster: true
      id: 901410cec129651fcf7374c79f824f27
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      stars: 1830
      watchers: 1830
      forks: 277
      created: '2019-07-11T23:08:20Z'
      lastUpdated: '2022-04-29T06:47:42Z'
      readMe: >
        ![Octocat](https://springdoc.org/images/springdoc-openapi.png)

        [![Build
        Status](http://129.159.254.115:8686/buildStatus/icon?job=springdoc-openapi-IC)](http://129.159.254.115:8686/view/springdoc-openapi/job/springdoc-openapi-IC/)

        [![Quality
        Gate](https://sonarcloud.io/api/project_badges/measure?project=springdoc_springdoc-openapi&metric=alert_status)](https://sonarcloud.io/dashboard?id=springdoc_springdoc-openapi)

        [![Known
        Vulnerabilities](https://snyk.io/test/github/springdoc/springdoc-openapi.git/badge.svg)](https://snyk.io/test/github/springdoc/springdoc-openapi.git)

        [![Stack Exchange
        questions](https://img.shields.io/stackexchange/stackoverflow/t/springdoc)](https://stackoverflow.com/questions/tagged/springdoc?tab=Votes)


        # Table of Contents

        - [Full documentation](#full-documentation)

        - [**Introduction**](#introduction)

        - [**Getting Started**](#getting-started)
          - [Library for springdoc-openapi integration with spring-boot and swagger-ui](#library-for-springdoc-openapi-integration-with-spring-boot-and-swagger-ui)
          - [Spring-boot with OpenAPI Demo applications.](#spring-boot-with-openapi-demo-applications)
            - [Source Code for Demo Applications.](#source-code-for-demo-applications)
            - [Demo Spring Boot 2 Web MVC with OpenAPI 3.](#demo-spring-boot-2-web-mvc-with-openapi-3)
            - [Demo Spring Boot 2 WebFlux with OpenAPI 3.](#demo-spring-boot-2-webflux-with-openapi-3)
            - [Demo Spring Boot 1 Web MVC with OpenAPI 3.](#demo-spring-boot-1-web-mvc-with-openapi-3)
            - [Demo Spring Boot 2 WebFlux with Functional endpoints OpenAPI 3.](#demo-spring-boot-2-webflux-with-functional-endpoints-openapi-3)
            - [Demo Spring Boot 2 and Spring Hateoas with OpenAPI 3.](#demo-spring-boot-2-and-spring-hateoas-with-openapi-3)
          - [Integration of the library in a Spring Boot 2.x.x project without the swagger-ui:](#integration-of-the-library-in-a-spring-boot-2xx-project-without-the-swagger-ui)
          - [Error Handling for REST using @ControllerAdvice](#error-handling-for-rest-using-controlleradvice)
          - [Adding API Information and Security documentation](#adding-api-information-and-security-documentation)
          - [spring-webflux support with Annotated Controllers](#spring-webflux-support-with-annotated-controllers)
        - [Acknowledgements](#acknowledgements)
          - [Contributors](#contributors)
          - [Additional Support](#additional-support)

        # [Full documentation](https://springdoc.org)


        # **Introduction**


        The springdoc-openapi Java library helps automating the generation of
        API documentation using Spring Boot projects.

        springdoc-openapi works by examining an application at runtime to infer
        API semantics based on Spring configurations, class structure and
        various annotations.


        The library automatically generates documentation in JSON/YAML and HTML
        formatted pages. The generated documentation can be complemented using
        `swagger-api` annotations.


        This library supports:

        *  OpenAPI 3

        *  Spring-boot (v1 and v2)

        *  JSR-303, specifically for @NotNull, @Min, @Max, and @Size.

        *  Swagger-ui

        *  Oauth 2


        The following video introduces the Library:


        * [https://youtu.be/utRxyPfFlDw](https://youtu.be/utRxyPfFlDw)


        This is a community-based project, not maintained by the Spring
        Framework Contributors (Pivotal)


        # **Getting Started**


        ## Library for springdoc-openapi integration with spring-boot and
        swagger-ui 

        *   Automatically deploys swagger-ui to a Spring Boot 2.x application

        *   Documentation will be available in HTML format, using the official
        [swagger-ui jars](https://github.com/swagger-api/swagger-ui.git).

        *   The Swagger UI page should then be available at
        http://server:port/context-path/swagger-ui.html and the OpenAPI
        description will be available at the following url for json format:
        http://server:port/context-path/v3/api-docs
            * `server`: The server name or IP
            * `port`: The server port
            * `context-path`: The context path of the application
        *   Documentation can be available in yaml format as well, on the
        following path: /v3/api-docs.yaml

        *   Add the `springdoc-openapi-ui` library to the list of your project
        dependencies (No additional configuration is needed):


        ```xml
           <dependency>
              <groupId>org.springdoc</groupId>
              <artifactId>springdoc-openapi-ui</artifactId>
              <version>last-release-version</version>
           </dependency>
        ```

        *   This step is optional: For custom path of the swagger documentation
        in HTML format, add a custom springdoc property, in your spring-boot
        configuration file:


        ```properties

        # swagger-ui custom path

        springdoc.swagger-ui.path=/swagger-ui.html

        ```


        ## Spring-boot with OpenAPI Demo applications.


        ### [Source Code for Demo
        Applications](https://github.com/springdoc/springdoc-openapi-demos.git).

        ### [Demo Spring Boot 2 Web MVC with OpenAPI
        3](http://158.101.191.70:8081/).

        ### [Demo Spring Boot 2 WebFlux with OpenAPI
        3](http://158.101.191.70:8082/).

        ### [Demo Spring Boot 1 Web MVC with OpenAPI
        3](http://158.101.191.70:8083/).

        ### [Demo Spring Boot 2 WebFlux with Functional endpoints OpenAPI
        3](http://158.101.191.70:8084/).

        ### [Demo Spring Boot 2 and Spring Hateoas with OpenAPI
        3](http://158.101.191.70:8085/).


        ![Branching](https://springdoc.org/images/pets.png)


        ## Integration of the library in a Spring Boot 2.x.x project without the
        swagger-ui:

        *   Documentation will be available at the following url for json
        format: http://server:port/context-path/v3/api-docs
            * `server`: The server name or IP
            * `port`: The server port
            * `context-path`: The context path of the application
        *   Documentation will be available in yaml format as well, on the
        following path : `/v3/api-docs.yaml`

        *   Add the library to the list of your project dependencies. (No
        additional configuration is needed)


        ```xml
           <dependency>
              <groupId>org.springdoc</groupId>
              <artifactId>springdoc-openapi-webmvc-core</artifactId>
              <version>last-release-version</version>
           </dependency>
        ```

        * This step is optional: For custom path of the OpenAPI documentation in
        Json format, add a custom springdoc property, in your spring-boot
        configuration file:


        ```properties

        # /api-docs endpoint custom path

        springdoc.api-docs.path=/api-docs

        ```


        * This step is optional: If you want to disable `springdoc-openapi`
        endpoints, add a custom springdoc property, in your `spring-boot`
        configuration file:


        ```properties

        # disable api-docs

        springdoc.api-docs.enabled=false

        ```
         
        ## Error Handling for REST using @ControllerAdvice

        To generate documentation automatically, make sure all the methods
        declare the HTTP Code responses using the annotation: @ResponseStatus.


        ## Adding API Information and Security documentation
          The library uses spring-boot application auto-configured packages to scan for the following annotations in spring beans: OpenAPIDefinition and Info.
          These annotations declare, API Information: Title, version, licence, security, servers, tags, security and externalDocs.
          For better performance of documentation generation, declare `@OpenAPIDefinition` and `@SecurityScheme` annotations within a Spring managed bean.  
          
        ## spring-webflux support with Annotated Controllers

        *   Documentation can be available in yaml format as well, on the
        following path : /v3/api-docs.yaml

        *   Add the library to the list of your project dependencies ( No
        additional configuration is needed)


        ```xml
           <dependency>
              <groupId>org.springdoc</groupId>
              <artifactId>springdoc-openapi-webflux-ui</artifactId>
              <version>last-release-version</version>
           </dependency>
        ```

        *   This step is optional: For custom path of the swagger documentation
        in HTML format, add a custom springdoc property, in your spring-boot
        configuration file:


        ```properties

        # swagger-ui custom path

        springdoc.swagger-ui.path=/swagger-ui.html

        ```


        The `springdoc-openapi` libraries are hosted on maven central
        repository. 

        The artifacts can be viewed accessed at the following locations:


        Releases:

        *
        [https://s01.oss.sonatype.org/content/groups/public/org/springdoc/](https://s01.oss.sonatype.org/content/groups/public/org/springdoc/).


        Snapshots:

        *
        [https://s01.oss.sonatype.org/content/repositories/snapshots/org/springdoc/](https://s01.oss.sonatype.org/content/repositories/snapshots/org/springdoc/).


        # Acknowledgements


        ## Contributors

        springdoc-openapi is relevant and updated regularly due to the valuable
        contributions from its
        [contributors](https://github.com/springdoc/springdoc-openapi/graphs/contributors).


        <a
        href="https://github.com/springdoc/springdoc-openapi/graphs/contributors">
          <img src="https://contrib.rocks/image?repo=springdoc/springdoc-openapi" width="50%"/>
        </a>


        Thanks you all for your support!


        ## Additional Support

        * [Spring Team](https://spring.io/team) - Thanks for their support by
        sharing all relevant resources around Spring projects.

        * [JetBrains](https://www.jetbrains.com/?from=springdoc-openapi) -
        Thanks a lot for supporting springdoc-openapi project.


        ![JenBrains logo](https://springdoc.org/images/jetbrains.svg)
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
        - openapi3 tags
      name: KaiZen OpenAPI Parser
      repository: https://github.com/reprezen/kaizen-openapi-parser
      owner: RepreZen
      category:
        - Low-level Tooling
        - Parsers
      language: Java
      source_description: >-
        High-performance Parser, Validator, and Java Object Model for OpenAPI
        3.x
      v3: true
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"b726f629bf836bd2ac47731213481aa1e9ac7f3820062aa0a498bb475c79540a"'
        readmeLastModified: Wed, 17 Jul 2019 13:54:46 GMT
        description: >-
          High-performance Parser, Validator, and Java Object Model for OpenAPI
          3.x
        created: '2017-03-28T02:00:01Z'
        updated: '2022-04-27T04:58:15Z'
        language: Java
        archived: false
        stars: 119
        watchers: 119
        forks: 33
        owner: RepreZen
        logo: https://avatars.githubusercontent.com/u/15205934?v=4
        repoEtag: '"d0e952752ea8bc776dd94cddb7690c551d2036cccac0cd8f78de233fe7699605"'
        repoLastModified: Wed, 27 Apr 2022 04:58:15 GMT
      foundInMaster: true
      homepage: https://github.com/RepreZen/KaiZen-OpenAPI-Parser
      id: f542543d6021da9cbce2c66599690853
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      stars: 119
      watchers: 119
      forks: 33
      created: '2017-03-28T02:00:01Z'
      lastUpdated: '2022-04-27T04:58:15Z'
      readMe: >
        <img
        src="https://cdn2.hubspot.net/hubfs/597611/Assets_Swagger/KaiZen%20OpenAPI%20Parser%20Logo%20(medium).png"
        height="50%" width="50%" alt="KaiZen OpenAPI Parser Logo" />


        # KaiZen OpenAPI Parser


        ## Overview ##


        The KaiZen OpenApi Parser from RepreZen is a Java-based validating

        parser for OpenAPI 3.0 offering full compliance with the

        [OpenAPI 3.0
        Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md),

        and a highly uniform read/write programming API.

        [OpenAPI](http://openapis.org), formerly known as the Swagger

        specification, is the industry-standard format for machine-readable

        REST API descriptions.


        Feature highlights of KaiZen OpenAPI Parser include:

        * **High Performance** - Informal testing shows a 3x-4x performance
          improvement over the current Java Swagger 2.0 parser. This is
          largely attributable to a design based on adapting Jackson
          `JsonNode` objects, rather than deserializing to internal POJOs.
          
        * **Read/Write API** - All aspects of a model may be interrogated and
          modified. We also plan to provide fluent builders for all
          model object types. We provide bidirectional navigation throughout the
          model, and every object that is a property value of its containing
          object (whether as a named field or a map entry) knows its own name.
          
        * **Tolerant Reader** - The parser yields a fully accessible result
          from any valid JSON or YAML input - whether or not the input is a
          valid OpenAPI specification.
          
        * **Separate validation** - All validation beyond basic
          JSON/YAML parsing is performed after the initial parse, and it can
          be disabled for speed. Validation goes beyond checking what can be
          expressed in JSON Schema, to include all requirements described in
          the OpenAPI specification.

        * **Serialization** - Serialization to JSON or YAML is supported, and
          by default, round-tripping will not cause any reordering of model
          content.
          
        * **Easy Evolution** - A YAML-based DSL is used to capture most of the
          details of the OpenAPI Specification. We use code generation to
          create interfaces and implementation classes. Member-level
          `@Generated` annotations make it possible to augment the generated
          sources with manual code that is preserved during re-generation.
          
        * **Flexible Reference Handling** - All references are detected and
          during parsing, including references not technically permitted by
          the OpenAPI specification. References are normally traversed 
          automatically by the API, but full details of references and 
          their resolution status are also available.
          
        * **Unpolluted API** - Many features of the parser API are not directly
          accessible from modeled objects, but are accessed via adapter objects.
          This ensures that these features will not collide with generated
          methods of the model API, even as new features are added to the
          OpenAPI specification in the future.
            
        ## Documentation


        The [Getting Started Guide](GettingStarted.md) shows how to build the 

        software locally, and contains a simple sample program that shows how 

        to use the parser.


        The [API Overview](API-Overview.md) describes the APIs presented in

        the project, including the parser, the serializer, the read/write

        model, and the treatment of references.


        ## Who's using KaiZen Parser?


        Here's a starting list of projects that are currently using KaiZen
        OpenAPI Parser. If you don't see your project here, please open an issue
        or pull request to add it:


        | Project Link | Description |

        | --- | --- | 

        | [Eclipse Vert.x](http://vertx.io/) | Eclipse Vert.x is a tool-kit for
        building reactive applications on the JVM. | 

        | [Light-rest-4j](https://github.com/networknt/light-rest-4j) | Light-4j
        RESTful framework for building fast, lightweight microservices on the
        JVM. | 

        | [RepreZen API Studio](http://reprezen.com/OpenAPI) | RepreZen API
        Studio is an integrated workbench for API design, documentation and
        development, built on the Eclipse platform. | 



        ## Current State


        * The parser is currently based on the pre-release [revision
        3.0.0-rc0](https://github.com/OAI/OpenAPI-Specification/blob/d232e6d3e1ea4038a533329a82876ae868e9cf13/versions/3.0.md).
        We are nearly ready with an upgrade to the [3.0.2 draft
        revision](https://github.com/OAI/OpenAPI-Specification/blob/v3.0.2-dev/versions/3.0.2.md).


        * The [JsonOverlay Project](https://github.com/RepreZen/JsonOverlay) is
        a framework for creating parsers and APIs for YAML/JSON based DSLs. It
        is the backbone of the KaiZen OpenApi Parser. Features that that it
        provides include:
         
          * Read-Write API for all model objects, based on a YAML document that describes the OpenAPI model structure
          * Factories for model objects (used internally, but not currently well exposed to user code; that will change shortly)
          * Full handling of all references.
          * Serialization, reference inspection, navigation, and numerous other features via its `Overlay` adapter classes.
          * Position-aware parser providing URL, line and file number for all parsed objects, available through `Overlay` adapters and used by the KaiZen parser in its validation messages.

        * Validations are currently all contained within this project, however
        many routine validations (e.g. validating proper JSON types throughout a
        model document, checking that required properties are present, etc.)
        will at some point be moved into the JsonOverlay project.


        * Most validations are present, but there are a number that are
        currently missing, and some existing validations still reflect the
        OpenAPI specification in its pre-release revision 3.0.0-rc0. Work is
        underway on Issue
        #26](https://github.com/RepreZen/KaiZen-OpenApi-Parser/issues/26), which
        should result in a complete and robust implementation of all model
        validations, updated to the 3.0.2 revision (currently in draft status).


        * Serialization is available via the `Overlay` adapter's `toJson`
        method. By default references appear in the serialized output, but an
        option causes references to be followed and inlined in the output.
        Recursive references cause serialization to blow up if this option is
        used.
          - A separate component, called "OpenAPI Normalizer," will soon be made available that will provide much greater control over the treatment of references. This is currently a private feature embedded in [RepreZen API Studio](https://www.reprezen.com/). Its primary function is to turn an OpenAPI model spread across multiple files into an equivalent single-file model. Options control which references are inlined, and which are _localized_ as named component objects in the constructed single-file model.
          
        * A handful of high-level tests have been implemented:
          - *BigParseTest* parses a large model without validation and checks
            that every value node in the input is accessible in the expected
            fashion in the resulting model object.
          - *ExamplesTest* - Parses and validates all example models currently
            in the the `OAI/OpenAPI-Specification` GitHub repo.

            Many more tests are required!

        * Few JavaDocs exist at present, unfortunately. There's an open issue
          to correct that.

        ### Packages


        _Some of these packages are likely to be refactored out into separate

        component Maven projects._


        All packages are prefixed by `com.reprezen.kaizen`


        * `oasparser`: Top-level package, directly includes
          `OpenApiParser` class and some things related to code generation.
          
        * `oasparser.model3`: Generated model interfaces (generated by
        JsonOverlay)


        * `oasparser.ovl3`: Generated model implementation classes (generated by
        JsonOverlay)


        * `oasparser.val`: Base classes for validators


        * `oasparser.val3`: Validators for all OpenAPI objects.


        * `oasparser.test`: The handful of tests that have been
          implemented so far. More needed


        ## License

        KaiZen OpenAPI Parser is provided under the Eclipse Public License
        (https://www.eclipse.org/legal/epl-v10.html)


        ## Contributing


        We welcome serious contributors. However, we are at an early and

        fast-changing phase in this project, so we recommend coordinating

        with us before diving into a juicy bit of coding. This might spare 

        you the frustration of finding that some sweeping low-level change

        has rendered your efforts unusable.


        If you would like to work with us, please drop us a line at

        API.Community@RepreZen.com, or open a new issue if you have

        a suggestion or want to report a bug or omission.


        ## Resources

        * Blog Post: [Introducing KaiZen OpenAPI 3.0 Parser: fast, flexible Java
        parsing &
        validation](http://www.reprezen.com/blog/kaizen-openapi-3_0-parser-swagger-java-open-source)

        * [Getting Started Guide](GettingStarted.md)

        * [API Overview](API-Overview.md)
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name:
        - openapi3-ts
        - OpenAPI-TS
      homepage: https://github.com/metadevpro/openapi3-ts
      language: TypeScript
      source_description: TS Model & utils for OpenAPI 3.0.x contracts
      category:
        - Low-level Tooling
        - Parsers
      repository: https://github.com/metadevpro/openapi3-ts
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPcGVuQXBpMy1UUwoKVHlwZVNjcmlwdCBsaWJyYXJ5IHRvIGhlbHAgYnVpbGRpbmcgT3BlbkFQSSAzLnggY29tcGxpYW50IEFQSSBjb250cmFjdHMuCgpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9tZXRhZGV2cHJvL29wZW5hcGkzLXRzLnN2Zz9icmFuY2g9bWFzdGVyKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL21ldGFkZXZwcm8vb3BlbmFwaTMtdHMpClshW0NvdmVyYWdlIFN0YXR1c10oaHR0cHM6Ly9jb3ZlcmFsbHMuaW8vcmVwb3MvZ2l0aHViL21ldGFkZXZwcm8vb3BlbmFwaTMtdHMvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL2NvdmVyYWxscy5pby9naXRodWIvbWV0YWRldnByby9vcGVuYXBpMy10cz9icmFuY2g9bWFzdGVyKQpbIVtLbm93biBWdWxuZXJhYmlsaXRpZXNdKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9tZXRhZGV2cHJvL29wZW5hcGkzLXRzL2JhZGdlLnN2Zz90YXJnZXRGaWxlPXBhY2thZ2UuanNvbildKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9tZXRhZGV2cHJvL29wZW5hcGkzLXRzP3RhcmdldEZpbGU9cGFja2FnZS5qc29uKQpbIVtucG0gdmVyc2lvbl0oaHR0cHM6Ly9iYWRnZS5mdXJ5LmlvL2pzL29wZW5hcGkzLXRzLnN2ZyldKGh0dHA6Ly9iYWRnZS5mdXJ5LmlvL2pzL29wZW5hcGkzLXRzKQoKWyFbTlBNXShodHRwczovL25vZGVpLmNvL25wbS9vcGVuYXBpMy10cy5wbmc/ZG93bmxvYWRzPXRydWUmZG93bmxvYWRSYW5rPXRydWUmc3RhcnM9dHJ1ZSldKGh0dHBzOi8vbm9kZWkuY28vbnBtL29wZW5hcGkzLXRzLykKCiMjIEluY2x1ZGVzCgoqIGAvc3JjL21vZGVsYCBUUyB0eXBlZCBpbnRlcmZhY2VzIGZvciBoZWxwaW5nIGJ1aWxkaW5nIGEgY29udHJhY3QuCiogYC9zcmMvZHNsYCBGbHVlbnQgRFNMIGZvciBidWlsZGluZyBhIGNvbnRyYWN0LgoKIyMgSW5zdGFsbAoKSW5zdGFsbCBwYWNrYWdlIHZpYSAqKm5wbSoqOgoKYGBgYmFzaApucG0gaSAtLXNhdmUgb3BlbmFwaTMtdHMKYGBgCgojIyBWZXJzaW9ucyBhbmQgQ2hhbmdlbG9nCgpTZWUgW2NoYW5nZWxvZ10oQ2hhbmdlbG9nLm1kKS4KCiMjIFJlZmVyZW5jZXMKCiogT3BlbkFQSSBzcGVjIDMuMS4wLiBbaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4xLjAubWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3ZlcnNpb25zLzMuMS4wLm1kKQoKIyMgTGljZW5zZQoKTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLgoKIyMgQ3JlZGl0cwoKKipDb250YWN0OioqIFBlZHJvIEouIE1vbGluYSB8IGdpdGh1YjogW3BqbW9saW5hXShodHRwczovL2dpdGh1Yi5jb20vcGptb2xpbmEpIHwgdHdpdHRlcjogW3Btb2xpbmFtXShodHRwczovL3R3aXR0ZXIuY29tL3Btb2xpbmFtKQoKKGMpIDIwMTctMjAyMi4gW1BlZHJvIEouIE1vbGluYV0oaHR0cDovL3BqbW9saW5hLmNvbSkgYXQgTWV0YWRldiBTLkwuIFtodHRwczovL21ldGFkZXYucHJvXShodHRwczovL21ldGFkZXYucHJvKSAmIGNvbnRyaWJ1dG9ycy4K
        readmeEtag: '"499bb41664454e09a1cfab64d047f500fab7f33b191461ab419f25703b19cb1c"'
        readmeLastModified: Thu, 21 Apr 2022 07:20:23 GMT
        description: TS Model & utils for creating and exposing OpenAPI 3.x contracts.
        created: '2017-03-06T18:47:56Z'
        updated: '2022-04-24T11:05:31Z'
        language: TypeScript
        archived: false
        stars: 270
        watchers: 270
        forks: 47
        owner: metadevpro
        logo: https://avatars.githubusercontent.com/u/24300914?v=4
        license: MIT
        repoEtag: '"a62bd90627b9616c75bdd78422501f6a4d1c5c172da79ddd04164a77c65b1812"'
        repoLastModified: Sun, 24 Apr 2022 11:05:31 GMT
      foundInMaster: true
      id: 390339b2a28f2e5660519a2422c29196
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      stars: 270
      watchers: 270
      forks: 47
      created: '2017-03-06T18:47:56Z'
      lastUpdated: '2022-04-24T11:05:31Z'
      readMe: >
        # OpenApi3-TS


        TypeScript library to help building OpenAPI 3.x compliant API contracts.


        [![Build
        Status](https://travis-ci.org/metadevpro/openapi3-ts.svg?branch=master)](https://travis-ci.org/metadevpro/openapi3-ts)

        [![Coverage
        Status](https://coveralls.io/repos/github/metadevpro/openapi3-ts/badge.svg?branch=master)](https://coveralls.io/github/metadevpro/openapi3-ts?branch=master)

        [![Known
        Vulnerabilities](https://snyk.io/test/github/metadevpro/openapi3-ts/badge.svg?targetFile=package.json)](https://snyk.io/test/github/metadevpro/openapi3-ts?targetFile=package.json)

        [![npm
        version](https://badge.fury.io/js/openapi3-ts.svg)](http://badge.fury.io/js/openapi3-ts)


        [![NPM](https://nodei.co/npm/openapi3-ts.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/openapi3-ts/)


        ## Includes


        * `/src/model` TS typed interfaces for helping building a contract.

        * `/src/dsl` Fluent DSL for building a contract.


        ## Install


        Install package via **npm**:


        ```bash

        npm i --save openapi3-ts

        ```


        ## Versions and Changelog


        See [changelog](Changelog.md).


        ## References


        * OpenAPI spec 3.1.0.
        [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md)


        ## License


        Licensed under the MIT License.


        ## Credits


        **Contact:** Pedro J. Molina | github:
        [pjmolina](https://github.com/pjmolina) | twitter:
        [pmolinam](https://twitter.com/pmolinam)


        (c) 2017-2022. [Pedro J. Molina](http://pjmolina.com) at Metadev S.L.
        [https://metadev.pro](https://metadev.pro) & contributors.
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name: swagger2openapi
      category:
        - Low-level Tooling
        - Converters
      language:
        - Node.js
        - CLI
      link: https://mermade.org.uk/openapi-converter
      repository: https://github.com/mermade/swagger2openapi
      source_description:
        - An OpenAPI / Swagger 2.0 to OpenAPI 3.0.x converter and validator
        - >-
          Upgrade files from OpenAPI v2.0 to v3.0, bundling into one mega file
          or respecting $refs. Part of oas-kit.
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPQVMtS2l0CgpUaGlzIGlzIHRoZSBtb25vLXJlcG8gZm9yIHRoZSBmb2xsb3dpbmcgcmVsYXRlZCBwcm9qZWN0cwoKKiBbc3dhZ2dlcjJvcGVuYXBpXShwYWNrYWdlcy9zd2FnZ2VyMm9wZW5hcGkvUkVBRE1FLm1kKQoqIFtvYXMtdmFsaWRhdG9yXShwYWNrYWdlcy9vYXMtdmFsaWRhdG9yL1JFQURNRS5tZCkKKiBbb2FzLWxpbnRlcl0ocGFja2FnZXMvb2FzLWxpbnRlci9SRUFETUUubWQpCiogW29hcy1yZXNvbHZlcl0ocGFja2FnZXMvb2FzLXJlc29sdmVyL1JFQURNRS5tZCkKKiBbb2FzLXNjaGVtYS13YWxrZXJdKHBhY2thZ2VzL29hcy1zY2hlbWEtd2Fsa2VyL1JFQURNRS5tZCkKKiBbb2FzLWtpdC1jb21tb25dKHBhY2thZ2VzL29hcy1raXQtY29tbW9uL1JFQURNRS5tZCkKKiBbcmVmdG9vbHNdKHBhY2thZ2VzL3JlZnRvb2xzL1JFQURNRS5tZCkKCiMjIERvY3VtZW50YXRpb24KCiogW01haW4gc2l0ZV0oaHR0cHM6Ly9tZXJtYWRlLmdpdGh1Yi5pby9vYXMta2l0KQoqIFtDSEFOR0VMT0ddKGh0dHBzOi8vZ2l0aHViLmNvbS9NZXJtYWRlL29hcy1raXQvYmxvYi9tYXN0ZXIvQ0hBTkdFTE9HLm1kI2NoYW5nZS1sb2cpCgojIyBPbmxpbmUgY29udmVydGVyL3ZhbGlkYXRvcgoKKiBbT3BlbkFQSS13ZWJjb252ZXJ0ZXJdKGh0dHBzOi8vbWVybWFkZS5vcmcudWsvb3BlbmFwaS1jb252ZXJ0ZXIpCgojIyBTdXBwb3J0ZWQgTm9kZS5qcyB2ZXJzaW9ucwoKQW55IExUUyB2ZXJzaW9uLiBJdCBpcyAqKm5vdCoqIHJlY29tbWVuZGVkIHRvIHVzZSBOb2RlLmpzIDEyLjE3LngsMTIuMTgueCBvciAxMi4xOS54IGR1ZSB0byBhbiBbaHR0cDIgYnVnXShodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzI4MDAxKS4KCiMjIERldmVsb3BtZW50CgoqIGNsb25lIHRoZSByZXBvc2l0b3J5CiogYG5wbSBpYCBpbiB0aGUgdG9wIGxldmVsIGRpcmVjdG9yeQoqIGBucHggbGVybmEgYm9vdHN0cmFwYAoKUGxlYXNlIHRyeSBhbmQga2VlcCBjb21taXRzIHJlbGF0ZWQgdG8gYSBzaW5nbGUgcGFja2FnZSBvciBwaWVjZSBvZiBmdW5jdGlvbmFsaXR5LiBQbGVhc2UgcmV2aWV3IHRoZQpbQ09OVFJJQlVUSU5HLm1kXShDT05UUklCVVRJTkcubWQpIGZvciBhZGRpdGlvbmFsIGRldGFpbHMuCgojIyBTdXBwb3J0aW5nIGRldmVsb3BtZW50CgoqIFtBUElzLmd1cnUgb3Blbi1jb2xsZWN0aXZlXShodHRwczovL29wZW5jb2xsZWN0aXZlLmNvbS9vcGVuYXBpLWRpcmVjdG9yeSkKKiBbTGlub2RlIFZQUyByZWZlcnJhbCBsaW5rXShodHRwczovL3d3dy5saW5vZGUuY29tLz9yPTU3MzRiZTQ2N2NjNTAxYjIzMjY3Y2Y2NmQ0NTFiYzMzOTA0MmRkZmEpCg==
        readmeEtag: '"2204f5a47e36a0f28553f57b55877f2baf4cfd11734d07f0910c878360eb99b6"'
        readmeLastModified: Wed, 07 Jul 2021 12:13:38 GMT
        description: >-
          Convert Swagger 2.0 definitions to OpenAPI 3.0 and
          resolve/validate/lint
        created: '2016-10-20T13:17:42Z'
        updated: '2022-04-21T02:22:25Z'
        language: JavaScript
        archived: false
        stars: 598
        watchers: 598
        forks: 107
        owner: Mermade
        logo: https://avatars.githubusercontent.com/u/15950345?v=4
        license: BSD-3-Clause
        repoEtag: '"3de6c4e4a845a05559726850a966eb738a97aab9be43351bdd9a8df3faf663a1"'
        repoLastModified: Thu, 21 Apr 2022 02:22:25 GMT
      foundInMaster: true
      homepage: https://github.com/mermade/swagger2openapi
      id: 48c5505c3c024f64480d123af42fdd97
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'No'
      stars: 598
      watchers: 598
      forks: 107
      created: '2016-10-20T13:17:42Z'
      lastUpdated: '2022-04-21T02:22:25Z'
      readMe: >
        # OAS-Kit


        This is the mono-repo for the following related projects


        * [swagger2openapi](packages/swagger2openapi/README.md)

        * [oas-validator](packages/oas-validator/README.md)

        * [oas-linter](packages/oas-linter/README.md)

        * [oas-resolver](packages/oas-resolver/README.md)

        * [oas-schema-walker](packages/oas-schema-walker/README.md)

        * [oas-kit-common](packages/oas-kit-common/README.md)

        * [reftools](packages/reftools/README.md)


        ## Documentation


        * [Main site](https://mermade.github.io/oas-kit)

        *
        [CHANGELOG](https://github.com/Mermade/oas-kit/blob/master/CHANGELOG.md#change-log)


        ## Online converter/validator


        * [OpenAPI-webconverter](https://mermade.org.uk/openapi-converter)


        ## Supported Node.js versions


        Any LTS version. It is **not** recommended to use Node.js
        12.17.x,12.18.x or 12.19.x due to an [http2
        bug](https://github.com/nodejs/node/issues/28001).


        ## Development


        * clone the repository

        * `npm i` in the top level directory

        * `npx lerna bootstrap`


        Please try and keep commits related to a single package or piece of
        functionality. Please review the

        [CONTRIBUTING.md](CONTRIBUTING.md) for additional details.


        ## Supporting development


        * [APIs.guru
        open-collective](https://opencollective.com/openapi-directory)

        * [Linode VPS referral
        link](https://www.linode.com/?r=5734be467cc501b23267cf66d451bc339042ddfa)
    - source: IMPLEMENTATIONS.md
      name: Microsoft.OpenApi.net
      homepage: https://github.com/microsoft/openapi.net/
      language: dotnet
      source_description: C# based parser with definition validation and migration support from V2
      category:
        - Low-level Tooling
        - Parsers
      foundInMaster: true
      repository: https://github.com/microsoft/openapi.net/
      repositoryMetadata:
        base64Readme: >-
          IVtDYXRlZ29yeSBvdmVydmlldyBzY3JlZW5zaG90XShkb2NzL2ltYWdlcy9vYWluZXQucG5nICJNaWNyb3NvZnQgKyBPcGVuQVBJID0gTG92ZSIpDQoNCiMgT3BlbkFQSS5ORVQgDQoNCnxQYWNrYWdlfE51Z2V0fA0KfC0tfC0tfA0KfE1vZGVscyBhbmQgV3JpdGVyc3xbIVtudWdldF0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9udWdldC92L01pY3Jvc29mdC5PcGVuQXBpLnN2ZyldKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9NaWNyb3NvZnQuT3BlbkFwaS8pIHwNCnxSZWFkZXJzIHwgWyFbbnVnZXRdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnVnZXQvdi9NaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzLnN2ZyldKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9NaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzLykgfA0KDQoNClRoZSAqKk9wZW5BUEkuTkVUKiogU0RLIGNvbnRhaW5zIGEgdXNlZnVsIG9iamVjdCBtb2RlbCBmb3IgT3BlbkFQSSBkb2N1bWVudHMgaW4gLk5FVCBhbG9uZyB3aXRoIGNvbW1vbiBzZXJpYWxpemVycyB0byBleHRyYWN0IHJhdyBPcGVuQVBJIEpTT04gYW5kIFlBTUwgZG9jdW1lbnRzIGZyb20gdGhlIG1vZGVsLg0KDQoqKlNlZSBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZSBPcGVuQVBJIHNwZWNpZmljYXRpb24gYW5kIGl0cyBoaXN0b3J5IGhlcmU6IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wZW5hcGlzLm9yZyI+T3BlbkFQSSBJbml0aWF0aXZlPC9hPioqDQoNClByb2plY3QgT2JqZWN0aXZlcyANCg0KLSBQcm92aWRlIGEgc2luZ2xlIHNoYXJlZCBvYmplY3QgbW9kZWwgaW4gLk5FVCBmb3IgT3BlbkFQSSBkZXNjcmlwdGlvbnMuDQotIEluY2x1ZGUgdGhlIG1vc3QgcHJpbWl0aXZlIFJlYWRlciBmb3IgaW5nZXN0aW5nIE9wZW5BUEkgSlNPTiBhbmQgWUFNTCBkb2N1bWVudHMgaW4gYm90aCBWMiBhbmQgVjMgZm9ybWF0cy4NCi0gUHJvdmlkZSBPcGVuQVBJIGRlc2NyaXB0aW9uIHdyaXRlcnMgZm9yIGJvdGggVjIgYW5kIFYzIHNwZWNpZmljYXRpb24gZm9ybWF0cy4NCi0gRW5hYmxlIGRldmVsb3BlcnMgdG8gY3JlYXRlIFJlYWRlcnMgdGhhdCB0cmFuc2xhdGUgZGlmZmVyZW50IGRhdGEgZm9ybWF0cyBpbnRvIE9wZW5BUEkgZGVzY3JpcHRpb25zLiANCg0KIyBJbnN0YWxsYXRpb24NCg0KLSBJbnN0YWxsIGNvcmUgTnVnZXQgcGFja2FnZSBgTWljcm9zb2Z0Lk9wZW5BcGlgDQotIEluc3RhbGwgcmVhZGVycyBOdWdldCBwYWNrYWdlIGBNaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzYA0KDQojIFByb2Nlc3NvcnMNClRoZSBPcGVuQVBJLk5FVCBwcm9qZWN0IGhvbGRzIHRoZSBiYXNlIG9iamVjdCBtb2RlbCBmb3IgcmVwcmVzZW50aW5nIE9wZW5BUEkgZG9jdW1lbnRzIGFzIC5ORVQgb2JqZWN0cy4gU29tZSBkZXZlbG9wZXJzIGhhdmUgZm91bmQgdGhlIG5lZWQgdG8gd3JpdGUgcHJvY2Vzc29ycyB0aGF0IGNvbnZlcnQgb3RoZXIgZGF0YSBmb3JtYXRzIGludG8gdGhpcyBPcGVuQVBJLk5FVCBvYmplY3QgbW9kZWwuIFdlJ2QgbGlrZSB0byBjdXJhdGUgdGhhdCBsaXN0IG9mIHByb2Nlc3NvcnMgaW4gdGhpcyBzZWN0aW9uIG9mIHRoZSByZWFkbWUuIA0KDQpUaGUgYmFzZSBKU09OIGFuZCBZQU1MIHByb2Nlc3NvcnMgYXJlIGJ1aWx0IGludG8gdGhpcyBwcm9qZWN0LiBCZWxvdyBpcyB0aGUgbGlzdCBvZiB0aGUgb3RoZXIgc3VwcG9ydGVkIHByb2Nlc3NvciBwcm9qZWN0cy4NCg0KLSBbKipDIyBDb21tZW50IC8gQW5ub3RhdGlvbiBQcm9jZXNzb3IqKl0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9PcGVuQVBJLk5FVC5DU2hhcnBBbm5vdGF0aW9ucykgOiBDb252ZXJ0cyBzdGFuZGFyZCAuTkVUIGFubm90YXRpb25zICggLy8vIGNvbW1lbnRzICkgZW1pdHRlZCBmcm9tIHlvdXIgYnVpbGQgKE1TQnVpbGQuZXhlKSBpbnRvIE9wZW5BUEkuTkVUIGRvY3VtZW50IG9iamVjdC4gDQoNCi0gWyoqT0RhdGEgQ1NETCBQcm9jZXNzb3IqKl0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9PcGVuQVBJLk5FVC5PRGF0YSkgOiBDb252ZXJ0cyB0aGUgWE1MIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBFbnRpdHkgRGF0YSBNb2RlbCAoRURNKSBkZXNjcmliaW5nIGFuIE9EYXRhIFNlcnZpY2UgaW50byBPcGVuQVBJLk5FVCBkb2N1bWVudCBvYmplY3QuIA0KDQojIEV4YW1wbGUgVXNhZ2UNCg0KQ3JlYXRpbmcgYW4gT3BlbkFQSSBEb2N1bWVudA0KDQpgYGBDIw0KdmFyIGRvY3VtZW50ID0gbmV3IE9wZW5BcGlEb2N1bWVudA0Kew0KICAgIEluZm8gPSBuZXcgT3BlbkFwaUluZm8NCiAgICB7DQogICAgICAgIFZlcnNpb24gPSAiMS4wLjAiLA0KICAgICAgICBUaXRsZSA9ICJTd2FnZ2VyIFBldHN0b3JlIChTaW1wbGUpIiwNCiAgICB9LA0KICAgIFNlcnZlcnMgPSBuZXcgTGlzdDxPcGVuQXBpU2VydmVyPg0KICAgIHsNCiAgICAgICAgbmV3IE9wZW5BcGlTZXJ2ZXIgeyBVcmwgPSAiaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vYXBpIiB9DQogICAgfSwNCiAgICBQYXRocyA9IG5ldyBPcGVuQXBpUGF0aHMNCiAgICB7DQogICAgICAgIFsiL3BldHMiXSA9IG5ldyBPcGVuQXBpUGF0aEl0ZW0NCiAgICAgICAgew0KICAgICAgICAgICAgT3BlcmF0aW9ucyA9IG5ldyBEaWN0aW9uYXJ5PE9wZXJhdGlvblR5cGUsIE9wZW5BcGlPcGVyYXRpb24+DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgW09wZXJhdGlvblR5cGUuR2V0XSA9IG5ldyBPcGVuQXBpT3BlcmF0aW9uDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbiA9ICJSZXR1cm5zIGFsbCBwZXRzIGZyb20gdGhlIHN5c3RlbSB0aGF0IHRoZSB1c2VyIGhhcyBhY2Nlc3MgdG8iLA0KICAgICAgICAgICAgICAgICAgICBSZXNwb25zZXMgPSBuZXcgT3BlbkFwaVJlc3BvbnNlcw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBbIjIwMCJdID0gbmV3IE9wZW5BcGlSZXNwb25zZQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uID0gIk9LIg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfTsNCmBgYA0KDQpSZWFkaW5nIGFuZCB3cml0aW5nIGEgT3BlbkFQSSBkZXNjcmlwdGlvbg0KDQpgYGBDIw0KdmFyIGh0dHBDbGllbnQgPSBuZXcgSHR0cENsaWVudA0Kew0KICAgIEJhc2VBZGRyZXNzID0gbmV3IFVyaSgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vIikNCn07DQoNCnZhciBzdHJlYW0gPSBhd2FpdCBodHRwQ2xpZW50LkdldFN0cmVhbUFzeW5jKCJtYXN0ZXIvZXhhbXBsZXMvdjMuMC9wZXRzdG9yZS55YW1sIik7DQoNCi8vIFJlYWQgVjMgYXMgWUFNTA0KdmFyIG9wZW5BcGlEb2N1bWVudCA9IG5ldyBPcGVuQXBpU3RyZWFtUmVhZGVyKCkuUmVhZChzdHJlYW0sIG91dCB2YXIgZGlhZ25vc3RpYyk7DQoNCi8vIFdyaXRlIFYyIGFzIEpTT04NCnZhciBvdXRwdXRTdHJpbmcgPSBvcGVuQXBpRG9jdW1lbnQuU2VyaWFsaXplKE9wZW5BcGlTcGVjVmVyc2lvbi5PcGVuQXBpMl8wLCBPcGVuQXBpRm9ybWF0Lkpzb24pOw0KDQpgYGANCg0KIyBCdWlsZCBTdGF0dXMNCg0KfCoqbWFzdGVyKip8DQp8LS18DQp8WyFbQnVpbGQgc3RhdHVzXShodHRwczovL2NpLmFwcHZleW9yLmNvbS9hcGkvcHJvamVjdHMvc3RhdHVzLzlsNmhseTN2amV1MHRtdHgvYnJhbmNoL21hc3Rlcj9zdmc9dHJ1ZSldKGh0dHBzOi8vY2kuYXBwdmV5b3IuY29tL3Byb2plY3QvTWljcm9zb2Z0T3BlbkFQSU5FVEFkbWluL29wZW5hcGktbmV0LTU0ZTdpL2JyYW5jaC9tYXN0ZXIpfA0KDQojIENvbnRyaWJ1dGluZw0KDQpUaGlzIHByb2plY3Qgd2VsY29tZXMgY29udHJpYnV0aW9ucyBhbmQgc3VnZ2VzdGlvbnMuICBNb3N0IGNvbnRyaWJ1dGlvbnMgcmVxdWlyZSB5b3UgdG8gYWdyZWUgdG8gYQ0KQ29udHJpYnV0b3IgTGljZW5zZSBBZ3JlZW1lbnQgKENMQSkgZGVjbGFyaW5nIHRoYXQgeW91IGhhdmUgdGhlIHJpZ2h0IHRvLCBhbmQgYWN0dWFsbHkgZG8sIGdyYW50IHVzDQp0aGUgcmlnaHRzIHRvIHVzZSB5b3VyIGNvbnRyaWJ1dGlvbi4gRm9yIGRldGFpbHMsIHZpc2l0IGh0dHBzOi8vY2xhLm1pY3Jvc29mdC5jb20uDQoNCldoZW4geW91IHN1Ym1pdCBhIHB1bGwgcmVxdWVzdCwgYSBDTEEtYm90IHdpbGwgYXV0b21hdGljYWxseSBkZXRlcm1pbmUgd2hldGhlciB5b3UgbmVlZCB0byBwcm92aWRlDQphIENMQSBhbmQgZGVjb3JhdGUgdGhlIFBSIGFwcHJvcHJpYXRlbHkgKGUuZy4sIGxhYmVsLCBjb21tZW50KS4gU2ltcGx5IGZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zDQpwcm92aWRlZCBieSB0aGUgYm90LiBZb3Ugd2lsbCBvbmx5IG5lZWQgdG8gZG8gdGhpcyBvbmNlIGFjcm9zcyBhbGwgcmVwb3MgdXNpbmcgb3VyIENMQS4NCg0KVGhpcyBwcm9qZWN0IGhhcyBhZG9wdGVkIHRoZSBbTWljcm9zb2Z0IE9wZW4gU291cmNlIENvZGUgb2YgQ29uZHVjdF0oaHR0cHM6Ly9vcGVuc291cmNlLm1pY3Jvc29mdC5jb20vY29kZW9mY29uZHVjdC8pLg0KRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIHRoZSBbQ29kZSBvZiBDb25kdWN0IEZBUV0oaHR0cHM6Ly9vcGVuc291cmNlLm1pY3Jvc29mdC5jb20vY29kZW9mY29uZHVjdC9mYXEvKSBvcg0KY29udGFjdCBbb3BlbmNvZGVAbWljcm9zb2Z0LmNvbV0obWFpbHRvOm9wZW5jb2RlQG1pY3Jvc29mdC5jb20pIHdpdGggYW55IGFkZGl0aW9uYWwgcXVlc3Rpb25zIG9yIGNvbW1lbnRzLg0KDQpUbyBwcm92aWRlIGZlZWRiYWNrIGFuZCBhc2sgcXVlc3Rpb25zIHlvdSBjYW4gdXNlIFN0YWNrIE92ZXJmbG93IHdpdGggdGhlIFtPcGVuQVBJLk5FVF0oaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL29wZW5hcGkubmV0KSB0YWcgb3IgdXNlIHRoZSBPcGVuQVBJLk5FVCBTbGFjayBjaGFubmVsIHdoaWNoIHlvdSBjYW4gam9pbiBieSByZWdpc3RlcmluZyBmb3IgdGhlIEhUVFAgQVBJcyB0ZWFtIGF0IGh0dHA6Ly9zbGFjay5odHRwYXBpcy5jb20uDQo=
        readmeEtag: '"b7bde59273ed6cbe369b619531bdf02db228fb99eeac268ff8fb6155b389f9b6"'
        readmeLastModified: Tue, 19 Apr 2022 23:46:22 GMT
        description: >-
          The OpenAPI.NET SDK contains a useful object model for OpenAPI
          documents in .NET along with common serializers to extract raw OpenAPI
          JSON and YAML documents from the model.
        created: '2017-07-14T00:24:14Z'
        updated: '2022-04-29T05:14:02Z'
        language: C#
        archived: false
        stars: 960
        watchers: 960
        forks: 158
        owner: microsoft
        logo: https://avatars.githubusercontent.com/u/6154722?v=4
        license: MIT
        repoEtag: '"c4019337a54cfa5e1cd48985351e388572718a94a2bf493b308b99866c97cf07"'
        repoLastModified: Fri, 29 Apr 2022 05:14:02 GMT
      id: f3215034d64cfcbcc28a4bdb0205a075
      swagger: 'No'
      version30: 'No'
      version31: 'No'
      stars: 960
      watchers: 960
      forks: 158
      created: '2017-07-14T00:24:14Z'
      lastUpdated: '2022-04-29T05:14:02Z'
      readMe: "![Category overview screenshot](docs/images/oainet.png \"Microsoft + OpenAPI = Love\")\r\n\r\n# OpenAPI.NET \r\n\r\n|Package|Nuget|\r\n|--|--|\r\n|Models and Writers|[![nuget](https://img.shields.io/nuget/v/Microsoft.OpenApi.svg)](https://www.nuget.org/packages/Microsoft.OpenApi/) |\r\n|Readers | [![nuget](https://img.shields.io/nuget/v/Microsoft.OpenApi.Readers.svg)](https://www.nuget.org/packages/Microsoft.OpenApi.Readers/) |\r\n\r\n\r\nThe **OpenAPI.NET** SDK contains a useful object model for OpenAPI documents in .NET along with common serializers to extract raw OpenAPI JSON and YAML documents from the model.\r\n\r\n**See more information on the OpenAPI specification and its history here: <a href=\"https://www.openapis.org\">OpenAPI Initiative</a>**\r\n\r\nProject Objectives \r\n\r\n- Provide a single shared object model in .NET for OpenAPI descriptions.\r\n- Include the most primitive Reader for ingesting OpenAPI JSON and YAML documents in both V2 and V3 formats.\r\n- Provide OpenAPI description writers for both V2 and V3 specification formats.\r\n- Enable developers to create Readers that translate different data formats into OpenAPI descriptions. \r\n\r\n# Installation\r\n\r\n- Install core Nuget package `Microsoft.OpenApi`\r\n- Install readers Nuget package `Microsoft.OpenApi.Readers`\r\n\r\n# Processors\r\nThe OpenAPI.NET project holds the base object model for representing OpenAPI documents as .NET objects. Some developers have found the need to write processors that convert other data formats into this OpenAPI.NET object model. We'd like to curate that list of processors in this section of the readme. \r\n\r\nThe base JSON and YAML processors are built into this project. Below is the list of the other supported processor projects.\r\n\r\n- [**C# Comment / Annotation Processor**](https://github.com/Microsoft/OpenAPI.NET.CSharpAnnotations) : Converts standard .NET annotations ( /// comments ) emitted from your build (MSBuild.exe) into OpenAPI.NET document object. \r\n\r\n- [**OData CSDL Processor**](https://github.com/Microsoft/OpenAPI.NET.OData) : Converts the XML representation of the Entity Data Model (EDM) describing an OData Service into OpenAPI.NET document object. \r\n\r\n# Example Usage\r\n\r\nCreating an OpenAPI Document\r\n\r\n```C#\r\nvar document = new OpenApiDocument\r\n{\r\n    Info = new OpenApiInfo\r\n    {\r\n        Version = \"1.0.0\",\r\n        Title = \"Swagger Petstore (Simple)\",\r\n    },\r\n    Servers = new List<OpenApiServer>\r\n    {\r\n        new OpenApiServer { Url = \"http://petstore.swagger.io/api\" }\r\n    },\r\n    Paths = new OpenApiPaths\r\n    {\r\n        [\"/pets\"] = new OpenApiPathItem\r\n        {\r\n            Operations = new Dictionary<OperationType, OpenApiOperation>\r\n            {\r\n                [OperationType.Get] = new OpenApiOperation\r\n                {\r\n                    Description = \"Returns all pets from the system that the user has access to\",\r\n                    Responses = new OpenApiResponses\r\n                    {\r\n                        [\"200\"] = new OpenApiResponse\r\n                        {\r\n                            Description = \"OK\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nReading and writing a OpenAPI description\r\n\r\n```C#\r\nvar httpClient = new HttpClient\r\n{\r\n    BaseAddress = new Uri(\"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/\")\r\n};\r\n\r\nvar stream = await httpClient.GetStreamAsync(\"master/examples/v3.0/petstore.yaml\");\r\n\r\n// Read V3 as YAML\r\nvar openApiDocument = new OpenApiStreamReader().Read(stream, out var diagnostic);\r\n\r\n// Write V2 as JSON\r\nvar outputString = openApiDocument.Serialize(OpenApiSpecVersion.OpenApi2_0, OpenApiFormat.Json);\r\n\r\n```\r\n\r\n# Build Status\r\n\r\n|**master**|\r\n|--|\r\n|[![Build status](https://ci.appveyor.com/api/projects/status/9l6hly3vjeu0tmtx/branch/master?svg=true)](https://ci.appveyor.com/project/MicrosoftOpenAPINETAdmin/openapi-net-54e7i/branch/master)|\r\n\r\n# Contributing\r\n\r\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\r\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\r\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\r\n\r\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\r\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\r\nprovided by the bot. You will only need to do this once across all repos using our CLA.\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\r\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\r\n\r\nTo provide feedback and ask questions you can use Stack Overflow with the [OpenAPI.NET](https://stackoverflow.com/questions/tagged/openapi.net) tag or use the OpenAPI.NET Slack channel which you can join by registering for the HTTP APIs team at http://slack.httpapis.com.\r\n"
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name:
        - odata-openapi
        - OData OpenAPI
      homepage: https://github.com/oasis-tcs/odata-openapi
      language:
        - XSLT
        - Node.js
      source_description:
        - OData 4.0 to OpenAPI 3.0.0 converter
        - OData 4.0, 3.0, and 2.0 to OpenAPI v3.1, v3.0, and v2.0 converter
      category:
        - Low-level Tooling
        - Converters
      repository: https://github.com/oasis-tcs/odata-openapi
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          PGRpdj4KPGgyPlJFQURNRTwvaDI+Cgo8cD5NZW1iZXJzIG9mIHRoZSA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9jb21taXR0ZWVzL29kYXRhLyI+T0FTSVMgT3BlbiBEYXRhIFByb3RvY29sIChPRGF0YSkgVGVjaG5pY2FsIENvbW1pdHRlZTwvYT4gY3JlYXRlIGFuZCBtYW5hZ2UgdGVjaG5pY2FsIGNvbnRlbnQgaW4gdGhpcyBUQyBHaXRIdWIgcmVwb3NpdG9yeSAoIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaSI+aHR0cHM6Ly9naXRodWIuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpPC9hPiApIGFzIHBhcnQgb2YgdGhlIFRDJ3MgY2hhcnRlcmVkIHdvcmsgKDxpPmkuZS48L2k+LCB0aGUgcHJvZ3JhbSBvZiB3b3JrIGFuZCBkZWxpdmVyYWJsZXMgZGVzY3JpYmVkIGluIGl0cyA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9jb21taXR0ZWVzL29kYXRhL2NoYXJ0ZXIucGhwIj5jaGFydGVyPC9hPikuPC9wPgoKPHA+T0FTSVMgVEMgR2l0SHViIHJlcG9zaXRvcmllcywgYXMgZGVzY3JpYmVkIGluIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3Jlc291cmNlcy90Y2FkbWluL2dpdGh1Yi1yZXBvc2l0b3JpZXMtZm9yLW9hc2lzLXRjLW1lbWJlcnMtY2hhcnRlcmVkLXdvcmsiPkdpdEh1YiBSZXBvc2l0b3JpZXMgZm9yIE9BU0lTIFRDIE1lbWJlcnMnIENoYXJ0ZXJlZCBXb3JrPC9hPiwgYXJlIGdvdmVybmVkIGJ5IHRoZSBPQVNJUyA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9wb2xpY2llcy1ndWlkZWxpbmVzL3RjLXByb2Nlc3MiPlRDIFByb2Nlc3M8L2E+LCA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9wb2xpY2llcy1ndWlkZWxpbmVzL2lwciI+SVBSIFBvbGljeTwvYT4sIGFuZCBvdGhlciBwb2xpY2llcywgc2ltaWxhciB0byBUQyBXaWtpcywgVEMgSklSQSBpc3N1ZXMgdHJhY2tpbmcgaW5zdGFuY2VzLCBUQyBTVk4vU3VidmVyc2lvbiByZXBvc2l0b3JpZXMsIGV0Yy4gIFdoaWxlIHRoZXkgbWFrZSB1c2Ugb2YgcHVibGljIEdpdEh1YiByZXBvc2l0b3JpZXMsIHRoZXNlIFRDIEdpdEh1YiByZXBvc2l0b3JpZXMgYXJlIGRpc3RpbmN0IGZyb20gPGEgaHJlZj0iaHR0cHM6Ly93d3cub2FzaXMtb3Blbi5vcmcvcmVzb3VyY2VzL29wZW4tcmVwb3NpdG9yaWVzIj5PQVNJUyBPcGVuIFJlcG9zaXRvcmllczwvYT4sIHdoaWNoIGFyZSB1c2VkIGZvciBkZXZlbG9wbWVudCBvZiBvcGVuIHNvdXJjZSA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9yZXNvdXJjZXMvb3Blbi1yZXBvc2l0b3JpZXMvbGljZW5zZXMiPmxpY2Vuc2VkPC9hPiBjb250ZW50LjwvcD4KPC9kaXY+Cgo8ZGl2Pgo8aDM+RGVzY3JpcHRpb248L2gzPgoKPHA+VGhlIHB1cnBvc2Ugb2YgdGhpcyByZXBvc2l0b3J5IGlzIHRvIHN1cHBvcnQgZGV2ZWxvcG1lbnQgb2YgdG9vbHMgZm9yIHByb2R1Y2luZyA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbiI+T3BlbkFQSTwvYT4gZGVzY3JpcHRpb25zIGZvciBPRGF0YSBzZXJ2aWNlcy48L3A+CjxwPlBsYW5uZWQgd29yayBpdGVtcyBpbmNsdWRlOgo8dWw+CjxsaT5jb252ZXJ0IE9EYXRhIENTREwgSlNPTiBvciBPRGF0YSBDU0RMIFhNTCB0byBPcGVuQVBJIEpTT048L2xpPgo8bGk+ZXhhbXBsZSBYTUwgZmlsZXM8L2xpPgo8bGk+ZXhhbXBsZSBvcGVuYXBpLmpzb24gZmlsZXM8L2xpPgo8bGk+ZXhhbXBsZSBmaWxlcyBmb3IgdGhlIGxpdmUgb2RhdGEub3JnIHNlcnZpY2VzPC9saT4KPC91bD48L3A+Cgo8L2Rpdj4KCjxkaXY+CjxoMz5Db250cmlidXRpb25zPC9oMz4KPHA+QXMgc3RhdGVkIGluIHRoaXMgcmVwb3NpdG9yeSdzIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9ibG9iL21hc3Rlci9DT05UUklCVVRJTkcubWQiPkNPTlRSSUJVVElORyBmaWxlPC9hPiwgY29udHJpYnV0b3JzIHRvIHRoaXMgcmVwb3NpdG9yeSBhcmUgZXhwZWN0ZWQgdG8gYmUgTWVtYmVycyBvZiB0aGUgT0FTSVMgT0RhdGEgVEMsIGZvciBhbnkgc3Vic3RhbnRpdmUgY2hhbmdlIHJlcXVlc3RzLiAgQW55b25lIHdpc2hpbmcgdG8gY29udHJpYnV0ZSB0byB0aGlzIEdpdEh1YiBwcm9qZWN0IGFuZCA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9qb2luL3BhcnRpY2lwYXRpb24taW5zdHJ1Y3Rpb25zIj5wYXJ0aWNpcGF0ZTwvYT4gaW4gdGhlIFRDJ3MgdGVjaG5pY2FsIGFjdGl2aXR5IGlzIGludml0ZWQgdG8gam9pbiBhcyBhbiBPQVNJUyBUQyBNZW1iZXIuICBQdWJsaWMgZmVlZGJhY2sgaXMgYWxzbyBhY2NlcHRlZCwgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3BvbGljaWVzLWd1aWRlbGluZXMvaXByI2FwcGVuZGl4YSI+T0FTSVMgRmVlZGJhY2sgTGljZW5zZTwvYT4uPC9wPgo8L2Rpdj4KCjxkaXY+CjxoMz5MaWNlbnNpbmc8L2gzPgo8cD5QbGVhc2Ugc2VlIHRoZSA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vb2FzaXMtdGNzL29kYXRhLW9wZW5hcGkvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZCI+TElDRU5TRTwvYT4gZmlsZSBmb3IgZGVzY3JpcHRpb24gb2YgdGhlIGxpY2Vuc2UgdGVybXMgYW5kIE9BU0lTIHBvbGljaWVzIGFwcGxpY2FibGUgdG8gdGhlIFRDJ3Mgd29yayBpbiB0aGlzIEdpdEh1YiBwcm9qZWN0LiBDb250ZW50IGluIHRoaXMgcmVwb3NpdG9yeSBpcyBpbnRlbmRlZCB0byBiZSBwYXJ0IG9mIHRoZSBPRGF0YSBUQydzIHBlcm1hbmVudCByZWNvcmQgb2YgYWN0aXZpdHksIHZpc2libGUgYW5kIGZyZWVseSBhdmFpbGFibGUgZm9yIGFsbCB0byB1c2UsIHN1YmplY3QgdG8gYXBwbGljYWJsZSBPQVNJUyBwb2xpY2llcywgYXMgcHJlc2VudGVkIGluIHRoZSByZXBvc2l0b3J5IDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9ibG9iL21hc3Rlci9MSUNFTlNFLm1kIj5MSUNFTlNFPC9hPiBmaWxlLjwvcD4KPC9kaXY+CgoKPGgzPkZ1cnRoZXIgRGVzY3JpcHRpb24gb2YgdGhpcyBSZXBvc2l0b3J5PC9oMz4KClRoZSBPRGF0YSBUQyBoYXMgcHVibGlzaGVkIHRoZSBbT0RhdGEgdG8gT3BlbkFQSSBNYXBwaW5nIFZlcnNpb24gMS4wXShodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9vZGF0YS9vZGF0YS1vcGVuYXBpL3YxLjAvb2RhdGEtb3BlbmFwaS12MS4wLmh0bWwpLCBhIHJlY29tbWVuZGF0aW9uIG9uIGhvdyB0byBjcmVhdGUgT3BlbkFQSSBkZXNjcmlwdGlvbnMgZm9yIE9EYXRhIHNlcnZpY2VzLiBUaGlzIHByb2plY3QgY29udGFpbnMgdHdvIHByb29mLW9mLWNvbmNlcHQgaW1wbGVtZW50YXRpb25zIG9mIHRoYXQgbWFwcGluZywgW29uZSB1c2luZyBKYXZhU2NyaXB0XShsaWIpLCBhbmQgW29uZSB1c2luZyBYU0xUXSh0b29scykuCgpUaGUgW2BleGFtcGxlc2AgZm9sZGVyXShleGFtcGxlcykgY29udGFpbnMgW09wZW5BUEkgMy4wLjJdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uKSBkZXNjcmlwdGlvbnMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZCBmcm9tIHRoZSBYTUwgYCRtZXRhZGF0YWAgZG9jdW1lbnRzIG9mIGxpdmUgYW5kIGV4YW1wbGUgT0RhdGEgc2VydmljZXMgd2l0aCB0aGVzZSBwcm9vZi1vZi1jb25jZXB0IGltcGxlbWVudGF0aW9ucy4gCgpUaGUgZW50aXR5LXJlbGF0aW9uc2hpcCBkaWFncmFtcyB2aXN1YWxpemluZyB0aGUgcmVzb3VyY2UgbW9kZWxzIG9mIGVhY2ggc2VydmljZSBhcmUgZ2VuZXJhdGVkIG9uLXRoZS1mbHkgd2l0aCBbeVVNTF0oaHR0cDovL3l1bWwubWUvKS4KCk9wZW5BUEkgZGVzY3JpcHRpb25zIGZvciBsaXZlIGV4YW1wbGUgT0RhdGEgc2VydmljZXMgYXQgW3d3dy5vZGF0YS5vcmddKGh0dHA6Ly93d3cub2RhdGEub3JnLykKIC0gW1RyaXBQaW4gKHJlYWQvd3JpdGUpXShodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby8/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9tYXN0ZXIvZXhhbXBsZXMvVHJpcFBpbi5vcGVuYXBpMy5qc29uKQogLSBbU2ltcGxlIHJlYWQvd3JpdGUgc2VydmljZV0oaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vP3VybD1odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vb2FzaXMtdGNzL29kYXRhLW9wZW5hcGkvbWFzdGVyL2V4YW1wbGVzL2V4YW1wbGUub3BlbmFwaTMuanNvbikKIC0gW05vcnRod2luZCAocmVhZCldKGh0dHA6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvLz91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpL21hc3Rlci9leGFtcGxlcy9Ob3J0aHdpbmQub3BlbmFwaTMuanNvbikKCk9wZW5BUEkgZGVzY3JpcHRpb25zIGZvciBPRGF0YSBzZXJ2aWNlcyB0aGF0IHJlZmVyZW5jZSBlYWNoIG90aGVyIChjcm9zcy1zZXJ2aWNlIHJlZmVyZW5jZXMpCiAtIFtQZW9wbGVdKGh0dHA6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvLz91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpL21hc3Rlci9leGFtcGxlcy9QZW9wbGUub3BlbmFwaTMuanNvbikKIC0gW1Byb2R1Y3RzXShodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby8/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9tYXN0ZXIvZXhhbXBsZXMvUHJvZHVjdHMub3BlbmFwaTMuanNvbikKCjxkaXY+CjxoMz5Db250YWN0PC9oMz4KPHA+UGxlYXNlIHNlbmQgcXVlc3Rpb25zIG9yIGNvbW1lbnRzIGFib3V0IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3Jlc291cmNlcy90Y2FkbWluL2dpdGh1Yi1yZXBvc2l0b3JpZXMtZm9yLW9hc2lzLXRjLW1lbWJlcnMtY2hhcnRlcmVkLXdvcmsiPk9BU0lTIFRDIEdpdEh1YiByZXBvc2l0b3JpZXM8L2E+IHRvIHRoZSBPQVNJUyA8YSBocmVmPSJtYWlsdG86dGMtYWRtaW5Ab2FzaXMtb3Blbi5vcmciPlRDIEFkbWluaXN0cmF0b3I8L2E+LiAgRm9yIHF1ZXN0aW9ucyBhYm91dCBjb250ZW50IGluIHRoaXMgcmVwb3NpdG9yeSwgcGxlYXNlIGNvbnRhY3QgdGhlIFRDIENoYWlyIG9yIENvLUNoYWlycyBhcyBsaXN0ZWQgb24gdGhlIHRoZSBPRGF0YSBUQydzIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL2NvbW1pdHRlZXMvb2RhdGEvIj5ob21lIHBhZ2U8L2E+LjwvcD4KPC9kaXY+Cg==
        readmeEtag: '"4688bebb62d8eac0d103d205eba4240046456df2c542b2c463db0700539af0db"'
        readmeLastModified: Mon, 11 Apr 2022 07:17:27 GMT
        description: >-
          OASIS OData TC: Tools for producing API descriptions for OData
          services that adhere to the OpenAPI Specification
        created: '2016-11-17T21:11:22Z'
        updated: '2022-04-13T09:09:28Z'
        language: XSLT
        archived: false
        stars: 135
        watchers: 135
        forks: 59
        owner: oasis-tcs
        logo: https://avatars.githubusercontent.com/u/20116735?v=4
        license: NOASSERTION
        repoEtag: '"f50941e39f8085571f1608b9df2abe800fba17648a9d29bd670c0468d4a06c70"'
        repoLastModified: Wed, 13 Apr 2022 09:09:28 GMT
      foundInMaster: true
      v3_1: true
      id: 9039f84e8e8b63849cbf15578564033e
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'Yes'
      stars: 135
      watchers: 135
      forks: 59
      created: '2016-11-17T21:11:22Z'
      lastUpdated: '2022-04-13T09:09:28Z'
      readMe: >
        <div>

        <h2>README</h2>


        <p>Members of the <a
        href="https://www.oasis-open.org/committees/odata/">OASIS Open Data
        Protocol (OData) Technical Committee</a> create and manage technical
        content in this TC GitHub repository ( <a
        href="https://github.com/oasis-tcs/odata-openapi">https://github.com/oasis-tcs/odata-openapi</a>
        ) as part of the TC's chartered work (<i>i.e.</i>, the program of work
        and deliverables described in its <a
        href="https://www.oasis-open.org/committees/odata/charter.php">charter</a>).</p>


        <p>OASIS TC GitHub repositories, as described in <a
        href="https://www.oasis-open.org/resources/tcadmin/github-repositories-for-oasis-tc-members-chartered-work">GitHub
        Repositories for OASIS TC Members' Chartered Work</a>, are governed by
        the OASIS <a
        href="https://www.oasis-open.org/policies-guidelines/tc-process">TC
        Process</a>, <a
        href="https://www.oasis-open.org/policies-guidelines/ipr">IPR
        Policy</a>, and other policies, similar to TC Wikis, TC JIRA issues
        tracking instances, TC SVN/Subversion repositories, etc.  While they
        make use of public GitHub repositories, these TC GitHub repositories are
        distinct from <a
        href="https://www.oasis-open.org/resources/open-repositories">OASIS Open
        Repositories</a>, which are used for development of open source <a
        href="https://www.oasis-open.org/resources/open-repositories/licenses">licensed</a>
        content.</p>

        </div>


        <div>

        <h3>Description</h3>


        <p>The purpose of this repository is to support development of tools for
        producing <a
        href="https://github.com/OAI/OpenAPI-Specification">OpenAPI</a>
        descriptions for OData services.</p>

        <p>Planned work items include:

        <ul>

        <li>convert OData CSDL JSON or OData CSDL XML to OpenAPI JSON</li>

        <li>example XML files</li>

        <li>example openapi.json files</li>

        <li>example files for the live odata.org services</li>

        </ul></p>


        </div>


        <div>

        <h3>Contributions</h3>

        <p>As stated in this repository's <a
        href="https://github.com/oasis-tcs/odata-openapi/blob/master/CONTRIBUTING.md">CONTRIBUTING
        file</a>, contributors to this repository are expected to be Members of
        the OASIS OData TC, for any substantive change requests.  Anyone wishing
        to contribute to this GitHub project and <a
        href="https://www.oasis-open.org/join/participation-instructions">participate</a>
        in the TC's technical activity is invited to join as an OASIS TC
        Member.  Public feedback is also accepted, subject to the terms of the
        <a
        href="https://www.oasis-open.org/policies-guidelines/ipr#appendixa">OASIS
        Feedback License</a>.</p>

        </div>


        <div>

        <h3>Licensing</h3>

        <p>Please see the <a
        href="https://github.com/oasis-tcs/odata-openapi/blob/master/LICENSE.md">LICENSE</a>
        file for description of the license terms and OASIS policies applicable
        to the TC's work in this GitHub project. Content in this repository is
        intended to be part of the OData TC's permanent record of activity,
        visible and freely available for all to use, subject to applicable OASIS
        policies, as presented in the repository <a
        href="https://github.com/oasis-tcs/odata-openapi/blob/master/LICENSE.md">LICENSE</a>
        file.</p>

        </div>



        <h3>Further Description of this Repository</h3>


        The OData TC has published the [OData to OpenAPI Mapping Version
        1.0](http://docs.oasis-open.org/odata/odata-openapi/v1.0/odata-openapi-v1.0.html),
        a recommendation on how to create OpenAPI descriptions for OData
        services. This project contains two proof-of-concept implementations of
        that mapping, [one using JavaScript](lib), and [one using XSLT](tools).


        The [`examples` folder](examples) contains [OpenAPI
        3.0.2](https://github.com/OAI/OpenAPI-Specification) descriptions that
        have been created from the XML `$metadata` documents of live and example
        OData services with these proof-of-concept implementations. 


        The entity-relationship diagrams visualizing the resource models of each
        service are generated on-the-fly with [yUML](http://yuml.me/).


        OpenAPI descriptions for live example OData services at
        [www.odata.org](http://www.odata.org/)
         - [TripPin (read/write)](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/TripPin.openapi3.json)
         - [Simple read/write service](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/example.openapi3.json)
         - [Northwind (read)](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/Northwind.openapi3.json)

        OpenAPI descriptions for OData services that reference each other
        (cross-service references)
         - [People](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/People.openapi3.json)
         - [Products](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/Products.openapi3.json)

        <div>

        <h3>Contact</h3>

        <p>Please send questions or comments about <a
        href="https://www.oasis-open.org/resources/tcadmin/github-repositories-for-oasis-tc-members-chartered-work">OASIS
        TC GitHub repositories</a> to the OASIS <a
        href="mailto:tc-admin@oasis-open.org">TC Administrator</a>.  For
        questions about content in this repository, please contact the TC Chair
        or Co-Chairs as listed on the the OData TC's <a
        href="https://www.oasis-open.org/committees/odata/">home page</a>.</p>

        </div>
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name: openapi3_parser
      homepage: https://github.com/kevindew/openapi3_parser
      language: Ruby
      source_description:
        - >-
          A Ruby implementation of parser and validator for the OpenAPI 3
          Specification
        - >-
          A Ruby implementation of parser and validator for the OpenAPI 3
          Specification.
      category:
        - Low-level Tooling
        - Parsers
      repository: https://github.com/kevindew/openapi3_parser
      v2: false
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPcGVuQVBJIDMgUGFyc2VyCgpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9rZXZpbmRldy9vcGVuYXBpM19wYXJzZXIuc3ZnP2JyYW5jaD1tYWluKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2tldmluZGV3L29wZW5hcGkzX3BhcnNlcikKClRoaXMgYSBSdWJ5IGJhc2VkIHBhcnNlci92YWxpZGF0b3IgZm9yIFtPcGVuQVBJIDNdW29wZW5hcGktM10uIEl0IGlzIHVzZWQgdG8KY29udmVydCBhbiBPcGVuQVBJIGZpbGUgKGNhbiBiZSBhIGxvY2FsIGZpbGUsIGEgVVJMLCBhIHN0cmluZyBvciBldmVuIGEgUnVieQpoYXNoKSBpbnRvIGFuIG9iamVjdCBncmFwaCB3aXRoIGEgc2ltcGxlIEFQSSB0aGF0IGZvbGxvd3MgdGhlIFtPcGVuQVBJCnNwZWNpZmljYXRpb25dW29wZW5hcGktMy1zcGVjXS4KCkJhc2ljIGV4YW1wbGU6CgpgYGBydWJ5CnJlcXVpcmUgIm9wZW5hcGkzX3BhcnNlciIKCmRvY3VtZW50ID0gT3BlbmFwaTNQYXJzZXIubG9hZF91cmwoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL21hc3Rlci9leGFtcGxlcy92My4wL3BldHN0b3JlLnlhbWwiKQoKZG9jdW1lbnQucGF0aHNbIi9wZXRzIl0uZ2V0LnN1bW1hcnkKIyA9PiAiTGlzdCBhbGwgcGV0cyIKYGBgCgpJdCBhaW1zIHRvIHN1cHBvcnQgMTAwJSBvZiB0aGUgT3BlbkFQSSAzLjAgc3BlY2lmaWNhdGlvbiwgd2l0aCBrZXkgZmVhdHVyZXMKYmVpbmc6CgotIFN1cHBvcnRzIGxvYWRpbmcgYSBzcGVjaWZpY2F0aW9uIGJ5IHBhdGggdG8gYSBmaWxlLCBVUkwsIFJ1YnkgZmlsZSBvYmplY3RzLAogIGFuZCBzdHJpbmdzIGluIFlBTUwgYW5kIEpTT04gZm9ybWF0cywgaXQgZXZlbiBzdXBwb3J0cyBsb2FkaW5nIHZpYSBhIFJ1YnkgaGFzaDsKLSBTdXBwb3J0IGZvciBsb2FkaW5nIHJlZmVyZW5jZXMgZnJvbSBleHRlcm5hbCBmaWxlcyBpbmNsdWRpbmcgVVJMczsKLSBIYW5kbGVzIHJlY3Vyc2l2ZSByZWZlcmVuY2VzOwotIEFsbCBvZiBPcGVuQVBJIHNwZWNpZmljYXRpb24gbWFwcGVkIHRvIFJ1Ynkgb2JqZWN0cywgcHJvdmlkaW5nIGEgbmF0dXJhbAogIFJ1YnkgaW50ZXJmYWNlIHRoYXQgbWFwcyBjbGVhcmx5IHRvIHRoZSBzcGVjaWZpY2F0aW9uOwotIE9wZW5BUEkgZmlsZXMgdmFsaWRhdGVkIHdpdGggYSBzaW1wbGUgQVBJIHRvIHF1aWNrbHkgYW5kIHNpbXBseSBzZWUgYWxsCiAgcHJvYmxlbXMgd2l0aCBhIGZpbGUKLSBCdWlsdC1pbiBNYXJrZG93biB0byBIVE1MIGNvbnZlcnNpb247Ci0gRG9jdW1lbnRhdGlvbiBmb3IgdGhlIEFQSSB0byBuYXZpZ2F0ZSB0aGUgT3BlbkFQSSBub2RlcyBpcyBhdmFpbGFibGUgb24KICBbcnVieWRvYy5pbmZvXVtkb2NzXS4KCkkndmUgd3JvdGUgYSBibG9nIHBvc3QgcmVmbGVjdGluZyBvbiB0aGUgZGVjaXNpb25zIGludm9sdmVkIGluIGJ1aWxkaW5nIHRoaXMKcGFyc2VyIGluIFtIb3cgdG8gd3JpdGUgYW4gT3BlbkFQSSAzIHBhcnNlcl1bYmxvZ10uCgpbb3BlbmFwaS0zXTogaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24KW29wZW5hcGktMy1zcGVjXTogaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4wLjIubWQjc3BlY2lmaWNhdGlvbgpbZG9jc106IGh0dHA6Ly93d3cucnVieWRvYy5pbmZvL2dpdGh1Yi9rZXZpbmRldy9vcGVuYXBpM19wYXJzZXIvT3BlbmFwaTNQYXJzZXIvTm9kZS9PcGVuYXBpCltibG9nXTogaHR0cHM6Ly9rZXZpbmRldy5tZS9wb3N0LzE4ODYxMTQyMzIzMS9ob3ctdG8td3JpdGUtYW4tb3BlbmFwaS0zLXBhcnNlcgoKIyMgVXNhZ2UKCiMjIyBMb2FkaW5nIGEgc3BlY2lmaWNhdGlvbgoKYGBgcnVieQojIGJ5IFVSTApPcGVuYXBpM1BhcnNlci5sb2FkX3VybCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tldmluZGV3L29wZW5hcGkzX3BhcnNlci9tYWluL3NwZWMvc3VwcG9ydC9leGFtcGxlcy9wZXRzdG9yZS1leHBhbmRlZC55YW1sIikKCiMgYnkgcGF0aCB0byBmaWxlCk9wZW5hcGkzUGFyc2VyLmxvYWRfZmlsZSgic3BlYy9zdXBwb3J0L2V4YW1wbGVzL3ViZXIueWFtbCIpCgojIGJ5IEZpbGUKT3BlbmFwaTNQYXJzZXIubG9hZChGaWxlLm9wZW4oInNwZWMvc3VwcG9ydC9leGFtcGxlcy91YmVyLnlhbWwiKSkKCiMgYnkgU3RyaW5nCk9wZW5hcGkzUGFyc2VyLmxvYWQoJ3sgIm9wZW5hcGkiOiAiMy4wLjAiLCAiaW5mbyI6IHsgInRpdGxlIjogIkFQSSIsICJ2ZXJzaW9uIjogIjEuMC4wIiB9LCAicGF0aHMiOiB7fSAgfScpCgojIGJ5IEhhc2gKT3BlbmFwaTNQYXJzZXIubG9hZChvcGVuYXBpOiAiMy4wLjAiLCBpbmZvOiB7IHRpdGxlOiAiQVBJIiwgdmVyc2lvbjogIjEuMC4wIiB9LCBwYXRoczoge30pCgpgYGAKCiMjIyBWYWxpZGF0aW5nCgpgYGBydWJ5CmRvY3VtZW50ID0gT3BlbmFwaTNQYXJzZXIubG9hZChvcGVuYXBpOiAiMy4wLjAiLCBpbmZvOiB7fSwgcGF0aHM6IHt9KQpkb2N1bWVudC52YWxpZD8KIyA9PiBmYWxzZQpkb2N1bWVudC5lcnJvcnMKI8KgPT4gT3BlbmFwaTNQYXJzZXI6OlZhbGlkYXRpb246OkVycm9yQ29sbGVjdGlvbihlcnJvcnM6IHsiIy9pbmZvIj0+WyJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkczogdGl0bGUgYW5kIHZlcnNpb24iXX0pCmBgYAoKIyMjIFRyYXZlcnNpbmcKCmBgYHJ1YnkKZG9jdW1lbnQgPSBPcGVuYXBpM1BhcnNlci5sb2FkX3VybCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tldmluZGV3L29wZW5hcGkzX3BhcnNlci9tYWluL3NwZWMvc3VwcG9ydC9leGFtcGxlcy9wZXRzdG9yZS1leHBhbmRlZC55YW1sIikKCiMgYnkgb2JqZWN0cwoKZG9jdW1lbnQuaW5mby50ZXJtc19vZl9zZXJ2aWNlCiMgPT4gImh0dHA6Ly9zd2FnZ2VyLmlvL3Rlcm1zLyIKCmRvY3VtZW50LnBhdGhzLmtleXMKIyA9PiBbIi9wZXRzIiwgIi9wZXRzL3tpZH0iXQoKZG9jdW1lbnQucGF0aHNbIi9wZXRzIl0uZ2V0LnBhcmFtZXRlcnMubWFwKCY6bmFtZSkKIyA9PiBbInRhZ3MiLCAibGltaXQiXQoKIyBieSBoYXNoIHN5bnRheAoKZG9jdW1lbnRbImluZm8iXVsidGVybXNPZlNlcnZpY2UiXQo9PiAiaHR0cDovL3N3YWdnZXIuaW8vdGVybXMvIgoKZG9jdW1lbnRbInBhdGhzIl0ua2V5cwojID0+IFsiL3BldHMiLCAiL3BldHMve2lkfSJdCgpkb2N1bWVudFsicGF0aHMiXVsiL3BldHMiXVsiZ2V0Il1bInBhcmFtZXRlcnMiXS5tYXAoJjpuYW1lKQojID0+IFsidGFncyIsICJsaW1pdCJdCgojIGJ5IGEgcGF0aCB0byBhIG5vZGUKZG9jdW1lbnQubm9kZV9hdCgiIy9wYXRocy8lMkZwZXRzL2dldC9vcGVyYXRpb25JZCIpCj0+ICJmaW5kUGV0cyIKCmRvY3VtZW50Lm5vZGVfYXQoIiMvY29tcG9uZW50cy9zY2hlbWFzL1BldC9hbGxPZi8wL3JlcXVpcmVkLzAiKQo9PiAibmFtZSIKCiMgb3IgY29tYmluaW5nCgpkb2N1bWVudC5jb21wb25lbnRzLnNjaGVtYXNbIlBldCJdLm5vZGVfYXQoIiMuLi9OZXdQZXQiKQo9PiBPcGVuYXBpM1BhcnNlcjo6Tm9kZTo6U2NoZW1hKCMvY29tcG9uZW50cy9zY2hlbWFzL05ld1BldCkKYGBgCgpZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgdGhlIEFQSSBvbiBbcnVieWRvYy5pbmZvXVtkb2NzXQoKIyMgSW5zdGFsbGF0aW9uCgpZb3UgY2FuIGluc3RhbGwgdGhpcyBnZW0gaW50byB5b3VyIGJ1bmRsZXIgYXBwbGljYXRpb24gYnkgYWRkaW5nIHRoaXMgbGluZSB0bwp5b3VyIEdlbWZpbGU6CgpgYGAKZ2VtICJvcGVuYXBpM19wYXJzZXIiLCAifj4gMC45LjAiCmBgYAoKYW5kIHRoZW4gcnVubmluZyBgJCBidW5kbGUgaW5zdGFsbGAKCk9yIGluc3RhbGwgdGhlIGdlbSBvbnRvIHlvdXIgbWFjaGluZSB2aWEgYCQgZ2VtIGluc3RhbGwgb3BlbmFwaTNfcGFyc2VyYAoKIyMgU3RhdHVzCgpUaGlzIGlzIGN1cnJlbnRseSBhIHdvcmsgaW4gcHJvZ3Jlc3MgYW5kIHdpbGwgcmVtYWluIHNvIHVudGlsIGl0IHJlYWNoZXMgMS4wLgoKU2VlIFtUT0RPXShUT0RPLm1kKSBmb3IgZGV0YWlscyBvZiB0aGUgZmVhdHVyZXMgc3RpbGwgdG8gaW1wbGVtZW50LgoKIyMgTGljZW5jZQoKW01JVCBMaWNlbnNlXShMSUNFTkNFKQo=
        readmeEtag: '"dd9f9975ac0af5e29d1c5676b1b13cc1850ee64255170754291a0a7912e785ad"'
        readmeLastModified: Mon, 21 Mar 2022 01:53:24 GMT
        description: Open API 3 Parser/Validator for Ruby
        created: '2017-10-19T23:33:52Z'
        updated: '2022-04-19T11:38:26Z'
        language: Ruby
        archived: false
        stars: 68
        watchers: 68
        forks: 11
        owner: kevindew
        logo: https://avatars.githubusercontent.com/u/282717?v=4
        license: MIT
        repoEtag: '"42c4c00d3369f7d9e7db20151c9b33d1c75a511ef171cf2572e77b6ab92411a6"'
        repoLastModified: Tue, 19 Apr 2022 11:38:26 GMT
      foundInMaster: true
      id: 609fe191ac5d7b1b89c772e47fd2deb8
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      stars: 68
      watchers: 68
      forks: 11
      created: '2017-10-19T23:33:52Z'
      lastUpdated: '2022-04-19T11:38:26Z'
      readMe: "# OpenAPI 3 Parser\n\n[![Build Status](https://travis-ci.org/kevindew/openapi3_parser.svg?branch=main)](https://travis-ci.org/kevindew/openapi3_parser)\n\nThis a Ruby based parser/validator for [OpenAPI 3][openapi-3]. It is used to\nconvert an OpenAPI file (can be a local file, a URL, a string or even a Ruby\nhash) into an object graph with a simple API that follows the [OpenAPI\nspecification][openapi-3-spec].\n\nBasic example:\n\n```ruby\nrequire \"openapi3_parser\"\n\ndocument = Openapi3Parser.load_url(\"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml\")\n\ndocument.paths[\"/pets\"].get.summary\n# => \"List all pets\"\n```\n\nIt aims to support 100% of the OpenAPI 3.0 specification, with key features\nbeing:\n\n- Supports loading a specification by path to a file, URL, Ruby file objects,\n  and strings in YAML and JSON formats, it even supports loading via a Ruby hash;\n- Support for loading references from external files including URLs;\n- Handles recursive references;\n- All of OpenAPI specification mapped to Ruby objects, providing a natural\n  Ruby interface that maps clearly to the specification;\n- OpenAPI files validated with a simple API to quickly and simply see all\n  problems with a file\n- Built-in Markdown to HTML conversion;\n- Documentation for the API to navigate the OpenAPI nodes is available on\n  [rubydoc.info][docs].\n\nI've wrote a blog post reflecting on the decisions involved in building this\nparser in [How to write an OpenAPI 3 parser][blog].\n\n[openapi-3]: https://github.com/OAI/OpenAPI-Specification\n[openapi-3-spec]: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#specification\n[docs]: http://www.rubydoc.info/github/kevindew/openapi3_parser/Openapi3Parser/Node/Openapi\n[blog]: https://kevindew.me/post/188611423231/how-to-write-an-openapi-3-parser\n\n## Usage\n\n### Loading a specification\n\n```ruby\n# by URL\nOpenapi3Parser.load_url(\"https://raw.githubusercontent.com/kevindew/openapi3_parser/main/spec/support/examples/petstore-expanded.yaml\")\n\n# by path to file\nOpenapi3Parser.load_file(\"spec/support/examples/uber.yaml\")\n\n# by File\nOpenapi3Parser.load(File.open(\"spec/support/examples/uber.yaml\"))\n\n# by String\nOpenapi3Parser.load('{ \"openapi\": \"3.0.0\", \"info\": { \"title\": \"API\", \"version\": \"1.0.0\" }, \"paths\": {}  }')\n\n# by Hash\nOpenapi3Parser.load(openapi: \"3.0.0\", info: { title: \"API\", version: \"1.0.0\" }, paths: {})\n\n```\n\n### Validating\n\n```ruby\ndocument = Openapi3Parser.load(openapi: \"3.0.0\", info: {}, paths: {})\ndocument.valid?\n# => false\ndocument.errors\n#\_=> Openapi3Parser::Validation::ErrorCollection(errors: {\"#/info\"=>[\"Missing required fields: title and version\"]})\n```\n\n### Traversing\n\n```ruby\ndocument = Openapi3Parser.load_url(\"https://raw.githubusercontent.com/kevindew/openapi3_parser/main/spec/support/examples/petstore-expanded.yaml\")\n\n# by objects\n\ndocument.info.terms_of_service\n# => \"http://swagger.io/terms/\"\n\ndocument.paths.keys\n# => [\"/pets\", \"/pets/{id}\"]\n\ndocument.paths[\"/pets\"].get.parameters.map(&:name)\n# => [\"tags\", \"limit\"]\n\n# by hash syntax\n\ndocument[\"info\"][\"termsOfService\"]\n=> \"http://swagger.io/terms/\"\n\ndocument[\"paths\"].keys\n# => [\"/pets\", \"/pets/{id}\"]\n\ndocument[\"paths\"][\"/pets\"][\"get\"][\"parameters\"].map(&:name)\n# => [\"tags\", \"limit\"]\n\n# by a path to a node\ndocument.node_at(\"#/paths/%2Fpets/get/operationId\")\n=> \"findPets\"\n\ndocument.node_at(\"#/components/schemas/Pet/allOf/0/required/0\")\n=> \"name\"\n\n# or combining\n\ndocument.components.schemas[\"Pet\"].node_at(\"#../NewPet\")\n=> Openapi3Parser::Node::Schema(#/components/schemas/NewPet)\n```\n\nYou can learn more about the API on [rubydoc.info][docs]\n\n## Installation\n\nYou can install this gem into your bundler application by adding this line to\nyour Gemfile:\n\n```\ngem \"openapi3_parser\", \"~> 0.9.0\"\n```\n\nand then running `$ bundle install`\n\nOr install the gem onto your machine via `$ gem install openapi3_parser`\n\n## Status\n\nThis is currently a work in progress and will remain so until it reaches 1.0.\n\nSee [TODO](TODO.md) for details of the features still to implement.\n\n## Licence\n\n[MIT License](LICENCE)\n"
- category: Parsers
  tools:
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
        - openapi3 tags
      name: swagger-parser
      homepage: https://github.com/swagger-api/swagger-parser
      language: Java
      source_description:
        - Swagger 1.0, 1.1, 1.2, 2.0 to OpenAPI Specification converter
        - Swagger Parser reads OpenAPI definitions into current Java POJOs.
      category:
        - Low-level Tooling
        - Parsers
      repository: https://github.com/swagger-api/swagger-parser
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"893e0a7f358342c960a2d8329a2d4f6d57161ad2006abc6286d80dce3023ef93"'
        readmeLastModified: Wed, 27 Apr 2022 16:49:25 GMT
        description: Swagger Spec to Java POJOs
        created: '2014-04-21T16:00:22Z'
        updated: '2022-04-25T08:33:55Z'
        language: Java
        archived: false
        stars: 568
        watchers: 568
        forks: 455
        owner: swagger-api
        logo: https://avatars.githubusercontent.com/u/7658037?v=4
        license: Apache-2.0
        repoEtag: '"8230b2eabe4563bba93dcf97ef7e8f45f856324d8abc5fa5d36e19f4effb9a4f"'
        repoLastModified: Mon, 25 Apr 2022 08:33:55 GMT
      foundInMaster: true
      id: 45f46a8f7ac698cfe3926303bf3dff9d
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'No'
      stars: 568
      watchers: 568
      forks: 455
      created: '2014-04-21T16:00:22Z'
      lastUpdated: '2022-04-25T08:33:55Z'
      readMe: >
        # Swagger Parser <img
        src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
        height="50" align="right">


        **NOTE:** If you're looking for `swagger-parser` 1.X and OpenAPI 2.0,
        please refer to [v1
        branch](https://github.com/swagger-api/swagger-parser/tree/v1)


        ![Build Master - Java 8, 11, and
        14](https://github.com/swagger-api/swagger-parser/workflows/Build%20Test%20Deploy%20master/badge.svg?branch=master)


        # Table of contents

          - [Overview](#overview)
          - [Table of Contents](#table-of-contents)
          - [Usage](#usage)
          - [Adding to your project](#adding-to-your-project)
            - [Prerequisites](#prerequisites)
          - [Authentication](#authentication)  
          - [Options](#options)
            - [Resolve](#1-resolve)
            - [ResolveFully](#2-resolvefully)
            - [Flatten](#3-flatten)
            - [ResolveCombinators](#4-resolvecombinators)
          - [Extensions](#extensions)
          - [License](#license)
           
        ## Overview 


        This is the Swagger Parser project, which parses OpenAPI definitions in
        JSON or YAML format into
        [swagger-core](https://github.com/swagger-api/swagger-core)
        representation as [Java
        POJO](https://github.com/swagger-api/swagger-core/blob/master/modules/swagger-models/src/main/java/io/swagger/v3/oas/models/OpenAPI.java#L36),
        returning any validation warnings/errors.  


        It also provides a simple framework to add additional converters from
        different formats into the Swagger objects, making the entire toolchain
        available.



        ### Usage

        Using the Swagger Parser is simple.  Once included in your project, you
        can read a OpenAPI Specification from any location:


        ```java

        import io.swagger.parser.OpenAPIParser;

        import io.swagger.v3.parser.OpenAPIV3Parser;

        import io.swagger.v3.parser.core.models.SwaggerParseResult;

        import io.swagger.v3.oas.models.OpenAPI;


        // ... your code

          // parse a swagger description from the petstore and get the result
          SwaggerParseResult result = new OpenAPIParser().readLocation("https://petstore3.swagger.io/api/v3/openapi.json", null, null);
          
          // or from a file
          //   SwaggerParseResult result = new OpenAPIParser().readLocation("./path/to/openapi.yaml", null, null);
          
          // the parsed POJO
          OpenAPI openAPI = result.getOpenAPI();
          
          if (result.getMessages() != null) result.getMessages().forEach(System.err::println); // validation errors and warnings
          
          if (openAPI != null) {
            ...
          }
          
        ```


        or from a string:


        ```java

        import io.swagger.parser.OpenAPIParser;

        import io.swagger.v3.parser.OpenAPIV3Parser;

        import io.swagger.v3.parser.core.models.SwaggerParseResult;

        import io.swagger.v3.oas.models.OpenAPI;


        // ... your code

          // parse a swagger description from the petstore and get the result
          SwaggerParseResult result = new OpenAPIParser().readContents("https://petstore3.swagger.io/api/v3/openapi.json", null, null);
          
          // or from a file
          //   SwaggerParseResult result = new OpenAPIParser().readContents("./path/to/openapi.yaml", null, null);
          
          // the parsed POJO
          OpenAPI openAPI = result.getOpenAPI();
          
          if (result.getMessages() != null) result.getMessages().forEach(System.err::println); // validation errors and warnings
          
          if (openAPI != null) {
            ...
          }
          
        ```


        If you are providing a Swagger/OpenAPI 2.0 document to the parser ,
        e.g.:


        ```java

        SwaggerParseResult result = new
        OpenAPIParser().readContents("./path/to/swagger.yaml", null, null);

        ```


        the Swagger/OpenAPI 2.0 document will be first converted into a
        comparable OpenAPI 3.0 one.


        You can also directly use `OpenAPIV3Parser` which only handles OpenAPI
        3.0 documents, and provides a convenience method to get directly the
        parsed `OpenAPI object:


        ```java

        import io.swagger.v3.parser.OpenAPIV3Parser;

        import io.swagger.v3.oas.models.OpenAPI;


        // ... your code

          // read a swagger description from the petstore
            
          OpenAPI openAPI = new OpenAPIV3Parser().read("https://petstore3.swagger.io/api/v3/openapi.json");
          
        ```


        ### Adding to your project

        You can include this library from Sonatype OSS for SNAPSHOTS, or Maven
        central for releases.  In your dependencies:


        ```xml

        <dependency>
          <groupId>io.swagger.parser.v3</groupId>
          <artifactId>swagger-parser</artifactId>
          <version>2.0.32</version>
        </dependency>

        ```


        #### Prerequisites

        You need the following installed and available in your $PATH:


        * [Java 1.8](http://java.oracle.com)

        * [Apache maven 3.x](http://maven.apache.org/)


        After cloning the project, you can build it from source with this
        command:


        ```

        mvn package

        ```


        ### Authentication


        If your OpenAPI definition is protected, you can pass headers in the
        request:

        ```java

        import io.swagger.v3.parser.core.models.AuthorizationValue;


        // ... your code

          // build a authorization value
          AuthorizationValue mySpecialHeader = new AuthorizationValue()
            .keyName("x-special-access")  //  the name of the authorization to pass
            .value("i-am-special")        //  the value of the authorization
            .type("header");              //  the location, as either `header` or `query`

          // or in a single constructor
          AuthorizationValue apiKey = new AuthorizationValue("api_key", "special-key", "header");
          OpenAPI openAPI = new OpenAPIV3Parser().readWithInfo(
            "https://petstore3.swagger.io/api/v3/openapi.json",
            Arrays.asList(mySpecialHeader, apiKey)
          );
        ```


        #### Dealing with self-signed SSL certificates

        If you're dealing with self-signed SSL certificates, or those signed by
        GoDaddy, you'll need to disable SSL Trust 

        Manager.  That's done by setting a system environment variable as such:


        ```

        export TRUST_ALL=true

        ```


        And then the Swagger Parser will _ignore_ invalid certificates.  Of
        course this is generally a bad idea, but if you're 

        working inside a firewall or really know what you're doing, well,
        there's your rope.


        #### Dealing with Let's Encrypt

        Depending on the version of Java that you use, certificates signed by
        the [Let's Encrypt](https://letsencrypt.org) certificate authority _may
        not work_ by default.  If you are using any version of Java prior to
        1.8u101, you most likely _must_ install an additional CA in your

        JVM.  Also note that 1.8u101 may _not_ be sufficient on it's own.  Some
        users have reported that certain operating systems are 

        not accepting Let's Encrypt signed certificates.


        Your options include:


        * Accepting all certificates per above

        * Installing the certificate manually in your JVM using the keystore
        using the `keytool` command

        * Configuring the JVM on startup to load your certificate


        But... this is all standard SSL configuration stuff and is well
        documented across the web.



        ### Options

        Parser uses options as a way to customize the behavior while parsing:


        #### 1. resolve:


        ```java

        ParseOptions parseOptions = new ParseOptions();

        parseOptions.setResolve(true); 

        final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
        parseOptions);

        ```



        - When remote or relative references are found in the parsed document,
        parser will attempt to:


        1. resolve the reference in the remote or relative location 

        1. parse the resolved reference

        1. add the resolved "component" (e.g. parameter, schema, response, etc.)
        to the resolved `OpenAPI` POJO components section

        1. replace the remote/relative reference with a local reference,  e.g. :
        `#/components/schemas/NameOfRemoteSchema`. 


        This applies to schemas, parameters, responses, pretty much everything
        containing a ref.


        #### 2. resolveFully:


        ```java

        ParseOptions parseOptions = new ParseOptions();

        parseOptions.setResolve(true); // implicit

        parseOptions.setResolveFully(true);

        final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
        parseOptions);

        ```


        - In some scenarios, after references are resolved (with `resolve`, see
        above), you might need to have all local references removed replacing
        the reference with the content of the referenced element. This is for
        example used in [Swagger
        Inflector](https://github.com/swagger-api/swagger-inflector). Be aware
        that the result could be more heavy/long due to duplication
            
        Original document:


        `a.yaml` 

        ```

        openapi: 3.0.1

        paths:
          "/newPerson":
            post:
              summary: Create new person
              description: Create new person
              responses:
                '200':
                  description: ok
                  content:
                    "*/*":
                      schema:
                        "$ref": "./ref-without-component/b.yaml#/components/schemas/CustomerType"
        ```

        `b.yaml`

        ```

        openapi: 3.0.1

        components:
          schemas:
            CustomerType:
              type: string
              example: Example value
        ```


        Serialized result after parsing with option `resolveFully(true)`


        `a.yaml`

        ```

        openapi: 3.0.1

        servers:

        - url: /

        paths:
          /newPerson:
            post:
              summary: Create new person
              description: Create new person
              responses:
                200:
                  description: ok
                  content:
                    '*/*':
                      schema:
                        type: string
                        example: Example value
        components:
          schemas:
            CustomerType:
              type: string
              example: Example value
        ```


        #### 3. flatten: 


        ```java

        ParseOptions parseOptions = new ParseOptions();

        parseOptions.setFlatten(true); 

        final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
        parseOptions);

        ```



        This is kind of the opposite of resolveFully, limited to defined
        schemas.


        In some scenarios, you might need to have all schemas defined inline
        (e.g. a response schema) moved to the `components/schemas` section and
        replaced with a reference to the newly added schema within
        `components/schemas`. This is for example used in [Swagger
        Codegen](https://github.com/swagger-api/swagger-codegen).


        Original document:


        `flatten.yaml`


        ```

        openapi: 3.0.0

        info:
          version: 1.0.0
          title: Swagger Petstore
          license:
            name: MIT
        paths:
          /pets:
            get:
              summary: List all pets
              operationId: listPets
              responses:
                '200':
                  description: An paged array of pets
                  headers:
                    x-next:
                      description: A link to the next page of responses
                      schema:
                        type: string
                  content:
                    application/json:
                      schema:
                         type: object
                         properties:
                            id:
                              type: integer
                              format: int64
                            name:
                              type: string
                            tag:
                              type: string
        ```


        Serialized result after parsing with option `flatten(true)`


        ```

        openapi: 3.0.0

        info:
          title: Swagger Petstore
          license:
            name: MIT
          version: 1.0.0
        servers:

        - url: /

        paths:
          /pets:
            get:
              tags:
              - pets
              summary: List all pets
              responses:
                200:
                  description: An paged array of pets
                  headers:
                    x-next:
                      description: A link to the next page of responses
                      style: simple
                      explode: false
                      schema:
                        type: string
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/inline_response_200'
        components:
          schemas:
            inline_response_200:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
                tag:
                  type: string
        ```


        #### 4. resolveCombinators: 


        ```java

        ParseOptions parseOptions = new ParseOptions();

        parseOptions.setResolve(true); // implicit

        parseOptions.setResolveFully(true);

        parseOptions.setResolveCombinators(false); // default is true 

        final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
        parseOptions);

        ```


        This option (only available with `resolveFully = true`) allows to
        customize behaviour related to `allOf/anyOf/oneOf` (composed schemas) 
        processing. With option set to `true` (default), composed schemas are
        transformed into "non composed" ones, by having all properties merged
        into a single resulting schema (see example below).

        If option is set to `false`, the resulting schema will instead maintain
        its "composed" nature, keeping properties within e.g. the `allOf`
        members.


        Please see examples below:


        **Unresolved yaml**


        ```

        openapi: 3.0.1

        servers:

        - url: http://petstore.swagger.io/api


        info:
          description: 'This is a sample server Petstore'
          version: 1.0.0
          title: testing source file
          termsOfService: http://swagger.io/terms/

        paths:
          "/withInvalidComposedModel":
            post:
              operationId: withInvalidComposedModel
              requestBody:
                content:
                  "application/json":
                    schema:
                      "$ref": "#/components/schemas/ExtendedAddress"
                required: false
              responses:
                '200':
                  description: success!
        components:
          schemas:
            ExtendedAddress:
              type: object
              allOf:
                - $ref: '#/components/schemas/Address'
                - type: object
                  required:
                  - gps
                  properties:
                    gps:
                      type: string
            Address:
              required:
              - street
              type: object
              properties:
                street:
                  type: string
                  example: 12345 El Monte Road
                city:
                  type: string
                  example: Los Altos Hills
                state:
                  type: string
                  example: CA
                zip:
                  type: string
                  example: '94022'
        ```


        **resolvedCombinator = true (default) - Test case**


        ```

        @Test
            public void resolveAllOfWithoutAggregatingParameters(@Injectable final List<AuthorizationValue> auths) {
                ParseOptions options = new ParseOptions();
                options.setResolveFully(true);
                options.setResolveCombinators(true);

                // Testing components/schemas
                OpenAPI openAPI = new OpenAPIV3Parser().readLocation("src/test/resources/composed.yaml",auths,options).getOpenAPI();
                
                ComposedSchema allOf = (ComposedSchema) openAPI.getComponents().getSchemas().get("ExtendedAddress");
                assertEquals(allOf.getAllOf().size(), 2);

                assertTrue(allOf.getAllOf().get(0).get$ref() != null);
                assertTrue(allOf.getAllOf().get(1).getProperties().containsKey("gps"));


                // Testing path item
                ObjectSchema schema = (ObjectSchema) openAPI.getPaths().get("/withInvalidComposedModel").getPost().getRequestBody().getContent().get("application/json").getSchema();

                assertEquals(schema.getProperties().size(), 5);
                assertTrue(schema.getProperties().containsKey("street"));
                assertTrue(schema.getProperties().containsKey("gps"));

            }
        ```


        **resolvedCombinator = true (default) - Resolved Yaml**


        ```

        openapi: 3.0.1

        info:
          title: testing source file
          description: This is a sample server Petstore
          termsOfService: http://swagger.io/terms/
          version: 1.0.0
        servers:

        - url: http://petstore.swagger.io/api

        paths:
          /withInvalidComposedModel:
            post:
              operationId: withInvalidComposedModel
              requestBody:
                content:
                  application/json:
                    schema:
                      required:
                      - gps
                      - street
                      type: object
                      properties:
                        street:
                          type: string
                          example: 12345 El Monte Road
                        city:
                          type: string
                          example: Los Altos Hills
                        state:
                          type: string
                          example: CA
                        zip:
                          type: string
                          example: "94022"
                        gps:
                          type: string
                required: false
              responses:
                200:
                  description: success!
        components:
          schemas:
            ExtendedAddress:
              type: object
              allOf:
              - $ref: '#/components/schemas/Address'
              - required:
                - gps
                type: object
                properties:
                  gps:
                    type: string
            Address:
              required:
              - street
              type: object
              properties:
                street:
                  type: string
                  example: 12345 El Monte Road
                city:
                  type: string
                  example: Los Altos Hills
                state:
                  type: string
                  example: CA
                zip:
                  type: string
                  example: "94022"
         ```
         
         **resolvedCombinator = false - Test case**
         
         ```
         @Test
            public void resolveAllOfWithoutAggregatingParameters(@Injectable final List<AuthorizationValue> auths) {
                ParseOptions options = new ParseOptions();
                options.setResolveFully(true);
                options.setResolveCombinators(false);

                // Testing components/schemas
                OpenAPI openAPI = new OpenAPIV3Parser().readLocation("src/test/resources/composed.yaml",auths,options).getOpenAPI();
               
                ComposedSchema allOf = (ComposedSchema) openAPI.getComponents().getSchemas().get("ExtendedAddress");
                assertEquals(allOf.getAllOf().size(), 2);
                assertTrue(allOf.getAllOf().get(0).getProperties().containsKey("street"));
                assertTrue(allOf.getAllOf().get(1).getProperties().containsKey("gps"));

                // Testing path item
                ComposedSchema schema = (ComposedSchema) openAPI.getPaths().get("/withInvalidComposedModel").getPost().getRequestBody().getContent().get("application/json").getSchema();
                // In fact the schema resolved previously is the same of /withInvalidComposedModel
                assertEquals(schema, allOf);
                assertEquals(schema.getAllOf().size(), 2);
                assertTrue(schema.getAllOf().get(0).getProperties().containsKey("street"));
                assertTrue(schema.getAllOf().get(1).getProperties().containsKey("gps"));

            }
          ```
          
          **resolvedCombinator = false - Resolved Yaml**
          
          ```
        openapi: 3.0.1

        info:
          title: testing source file
          description: This is a sample server Petstore
          termsOfService: http://swagger.io/terms/
          version: 1.0.0
        servers:

        - url: http://petstore.swagger.io/api

        paths:
          /withInvalidComposedModel:
            post:
              operationId: withInvalidComposedModel
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      allOf:
                      - required:
                        - street
                        type: object
                        properties:
                          street:
                            type: string
                            example: 12345 El Monte Road
                          city:
                            type: string
                            example: Los Altos Hills
                          state:
                            type: string
                            example: CA
                          zip:
                            type: string
                            example: "94022"
                      - required:
                        - gps
                        type: object
                        properties:
                          gps:
                            type: string
                required: false
              responses:
                200:
                  description: success!
        components:
          schemas:
            ExtendedAddress:
              type: object
              allOf:
              - required:
                - street
                type: object
                properties:
                  street:
                    type: string
                    example: 12345 El Monte Road
                  city:
                    type: string
                    example: Los Altos Hills
                  state:
                    type: string
                    example: CA
                  zip:
                    type: string
                    example: "94022"
              - required:
                - gps
                type: object
                properties:
                  gps:
                    type: string
            Address:
              required:
              - street
              type: object
              properties:
                street:
                  type: string
                  example: 12345 El Monte Road
                city:
                  type: string
                  example: Los Altos Hills
                state:
                  type: string
                  example: CA
                zip:
                  type: string
                  example: "94022"
        ```


        ### Extensions

        This project has a core artifact--`swagger-parser`, which uses Java
        Service Provider Interface (SPI) so additional extensions can be added. 


        To build your own extension, you simply need to create a
        `src/main/resources/META-INF/services/io.swagger.v3.parser.core.extensions.SwaggerParserExtension`
        file with the full classname of your implementation.  Your class must
        also implement the
        `io.swagger.v3.parser.core.extensions.SwaggerParserExtension`
        interface.  Then, including your library with the `swagger-parser`
        module will cause it to be triggered automatically.


        ## Security contact


        Please disclose any security-related issues or vulnerabilities by
        emailing [security@swagger.io](mailto:security@swagger.io), instead of
        using the public issue tracker.
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
        - openapi3 tags
      name: KaiZen OpenAPI Parser
      repository: https://github.com/reprezen/kaizen-openapi-parser
      owner: RepreZen
      category:
        - Low-level Tooling
        - Parsers
      language: Java
      source_description: >-
        High-performance Parser, Validator, and Java Object Model for OpenAPI
        3.x
      v3: true
      repositoryMetadata:
        base64Readme: >-
          
        readmeEtag: '"b726f629bf836bd2ac47731213481aa1e9ac7f3820062aa0a498bb475c79540a"'
        readmeLastModified: Wed, 17 Jul 2019 13:54:46 GMT
        description: >-
          High-performance Parser, Validator, and Java Object Model for OpenAPI
          3.x
        created: '2017-03-28T02:00:01Z'
        updated: '2022-04-27T04:58:15Z'
        language: Java
        archived: false
        stars: 119
        watchers: 119
        forks: 33
        owner: RepreZen
        logo: https://avatars.githubusercontent.com/u/15205934?v=4
        repoEtag: '"d0e952752ea8bc776dd94cddb7690c551d2036cccac0cd8f78de233fe7699605"'
        repoLastModified: Wed, 27 Apr 2022 04:58:15 GMT
      foundInMaster: true
      homepage: https://github.com/RepreZen/KaiZen-OpenAPI-Parser
      id: f542543d6021da9cbce2c66599690853
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      stars: 119
      watchers: 119
      forks: 33
      created: '2017-03-28T02:00:01Z'
      lastUpdated: '2022-04-27T04:58:15Z'
      readMe: >
        <img
        src="https://cdn2.hubspot.net/hubfs/597611/Assets_Swagger/KaiZen%20OpenAPI%20Parser%20Logo%20(medium).png"
        height="50%" width="50%" alt="KaiZen OpenAPI Parser Logo" />


        # KaiZen OpenAPI Parser


        ## Overview ##


        The KaiZen OpenApi Parser from RepreZen is a Java-based validating

        parser for OpenAPI 3.0 offering full compliance with the

        [OpenAPI 3.0
        Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md),

        and a highly uniform read/write programming API.

        [OpenAPI](http://openapis.org), formerly known as the Swagger

        specification, is the industry-standard format for machine-readable

        REST API descriptions.


        Feature highlights of KaiZen OpenAPI Parser include:

        * **High Performance** - Informal testing shows a 3x-4x performance
          improvement over the current Java Swagger 2.0 parser. This is
          largely attributable to a design based on adapting Jackson
          `JsonNode` objects, rather than deserializing to internal POJOs.
          
        * **Read/Write API** - All aspects of a model may be interrogated and
          modified. We also plan to provide fluent builders for all
          model object types. We provide bidirectional navigation throughout the
          model, and every object that is a property value of its containing
          object (whether as a named field or a map entry) knows its own name.
          
        * **Tolerant Reader** - The parser yields a fully accessible result
          from any valid JSON or YAML input - whether or not the input is a
          valid OpenAPI specification.
          
        * **Separate validation** - All validation beyond basic
          JSON/YAML parsing is performed after the initial parse, and it can
          be disabled for speed. Validation goes beyond checking what can be
          expressed in JSON Schema, to include all requirements described in
          the OpenAPI specification.

        * **Serialization** - Serialization to JSON or YAML is supported, and
          by default, round-tripping will not cause any reordering of model
          content.
          
        * **Easy Evolution** - A YAML-based DSL is used to capture most of the
          details of the OpenAPI Specification. We use code generation to
          create interfaces and implementation classes. Member-level
          `@Generated` annotations make it possible to augment the generated
          sources with manual code that is preserved during re-generation.
          
        * **Flexible Reference Handling** - All references are detected and
          during parsing, including references not technically permitted by
          the OpenAPI specification. References are normally traversed 
          automatically by the API, but full details of references and 
          their resolution status are also available.
          
        * **Unpolluted API** - Many features of the parser API are not directly
          accessible from modeled objects, but are accessed via adapter objects.
          This ensures that these features will not collide with generated
          methods of the model API, even as new features are added to the
          OpenAPI specification in the future.
            
        ## Documentation


        The [Getting Started Guide](GettingStarted.md) shows how to build the 

        software locally, and contains a simple sample program that shows how 

        to use the parser.


        The [API Overview](API-Overview.md) describes the APIs presented in

        the project, including the parser, the serializer, the read/write

        model, and the treatment of references.


        ## Who's using KaiZen Parser?


        Here's a starting list of projects that are currently using KaiZen
        OpenAPI Parser. If you don't see your project here, please open an issue
        or pull request to add it:


        | Project Link | Description |

        | --- | --- | 

        | [Eclipse Vert.x](http://vertx.io/) | Eclipse Vert.x is a tool-kit for
        building reactive applications on the JVM. | 

        | [Light-rest-4j](https://github.com/networknt/light-rest-4j) | Light-4j
        RESTful framework for building fast, lightweight microservices on the
        JVM. | 

        | [RepreZen API Studio](http://reprezen.com/OpenAPI) | RepreZen API
        Studio is an integrated workbench for API design, documentation and
        development, built on the Eclipse platform. | 



        ## Current State


        * The parser is currently based on the pre-release [revision
        3.0.0-rc0](https://github.com/OAI/OpenAPI-Specification/blob/d232e6d3e1ea4038a533329a82876ae868e9cf13/versions/3.0.md).
        We are nearly ready with an upgrade to the [3.0.2 draft
        revision](https://github.com/OAI/OpenAPI-Specification/blob/v3.0.2-dev/versions/3.0.2.md).


        * The [JsonOverlay Project](https://github.com/RepreZen/JsonOverlay) is
        a framework for creating parsers and APIs for YAML/JSON based DSLs. It
        is the backbone of the KaiZen OpenApi Parser. Features that that it
        provides include:
         
          * Read-Write API for all model objects, based on a YAML document that describes the OpenAPI model structure
          * Factories for model objects (used internally, but not currently well exposed to user code; that will change shortly)
          * Full handling of all references.
          * Serialization, reference inspection, navigation, and numerous other features via its `Overlay` adapter classes.
          * Position-aware parser providing URL, line and file number for all parsed objects, available through `Overlay` adapters and used by the KaiZen parser in its validation messages.

        * Validations are currently all contained within this project, however
        many routine validations (e.g. validating proper JSON types throughout a
        model document, checking that required properties are present, etc.)
        will at some point be moved into the JsonOverlay project.


        * Most validations are present, but there are a number that are
        currently missing, and some existing validations still reflect the
        OpenAPI specification in its pre-release revision 3.0.0-rc0. Work is
        underway on Issue
        #26](https://github.com/RepreZen/KaiZen-OpenApi-Parser/issues/26), which
        should result in a complete and robust implementation of all model
        validations, updated to the 3.0.2 revision (currently in draft status).


        * Serialization is available via the `Overlay` adapter's `toJson`
        method. By default references appear in the serialized output, but an
        option causes references to be followed and inlined in the output.
        Recursive references cause serialization to blow up if this option is
        used.
          - A separate component, called "OpenAPI Normalizer," will soon be made available that will provide much greater control over the treatment of references. This is currently a private feature embedded in [RepreZen API Studio](https://www.reprezen.com/). Its primary function is to turn an OpenAPI model spread across multiple files into an equivalent single-file model. Options control which references are inlined, and which are _localized_ as named component objects in the constructed single-file model.
          
        * A handful of high-level tests have been implemented:
          - *BigParseTest* parses a large model without validation and checks
            that every value node in the input is accessible in the expected
            fashion in the resulting model object.
          - *ExamplesTest* - Parses and validates all example models currently
            in the the `OAI/OpenAPI-Specification` GitHub repo.

            Many more tests are required!

        * Few JavaDocs exist at present, unfortunately. There's an open issue
          to correct that.

        ### Packages


        _Some of these packages are likely to be refactored out into separate

        component Maven projects._


        All packages are prefixed by `com.reprezen.kaizen`


        * `oasparser`: Top-level package, directly includes
          `OpenApiParser` class and some things related to code generation.
          
        * `oasparser.model3`: Generated model interfaces (generated by
        JsonOverlay)


        * `oasparser.ovl3`: Generated model implementation classes (generated by
        JsonOverlay)


        * `oasparser.val`: Base classes for validators


        * `oasparser.val3`: Validators for all OpenAPI objects.


        * `oasparser.test`: The handful of tests that have been
          implemented so far. More needed


        ## License

        KaiZen OpenAPI Parser is provided under the Eclipse Public License
        (https://www.eclipse.org/legal/epl-v10.html)


        ## Contributing


        We welcome serious contributors. However, we are at an early and

        fast-changing phase in this project, so we recommend coordinating

        with us before diving into a juicy bit of coding. This might spare 

        you the frustration of finding that some sweeping low-level change

        has rendered your efforts unusable.


        If you would like to work with us, please drop us a line at

        API.Community@RepreZen.com, or open a new issue if you have

        a suggestion or want to report a bug or omission.


        ## Resources

        * Blog Post: [Introducing KaiZen OpenAPI 3.0 Parser: fast, flexible Java
        parsing &
        validation](http://www.reprezen.com/blog/kaizen-openapi-3_0-parser-swagger-java-open-source)

        * [Getting Started Guide](GettingStarted.md)

        * [API Overview](API-Overview.md)
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name:
        - openapi3-ts
        - OpenAPI-TS
      homepage: https://github.com/metadevpro/openapi3-ts
      language: TypeScript
      source_description: TS Model & utils for OpenAPI 3.0.x contracts
      category:
        - Low-level Tooling
        - Parsers
      repository: https://github.com/metadevpro/openapi3-ts
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPcGVuQXBpMy1UUwoKVHlwZVNjcmlwdCBsaWJyYXJ5IHRvIGhlbHAgYnVpbGRpbmcgT3BlbkFQSSAzLnggY29tcGxpYW50IEFQSSBjb250cmFjdHMuCgpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9tZXRhZGV2cHJvL29wZW5hcGkzLXRzLnN2Zz9icmFuY2g9bWFzdGVyKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL21ldGFkZXZwcm8vb3BlbmFwaTMtdHMpClshW0NvdmVyYWdlIFN0YXR1c10oaHR0cHM6Ly9jb3ZlcmFsbHMuaW8vcmVwb3MvZ2l0aHViL21ldGFkZXZwcm8vb3BlbmFwaTMtdHMvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL2NvdmVyYWxscy5pby9naXRodWIvbWV0YWRldnByby9vcGVuYXBpMy10cz9icmFuY2g9bWFzdGVyKQpbIVtLbm93biBWdWxuZXJhYmlsaXRpZXNdKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9tZXRhZGV2cHJvL29wZW5hcGkzLXRzL2JhZGdlLnN2Zz90YXJnZXRGaWxlPXBhY2thZ2UuanNvbildKGh0dHBzOi8vc255ay5pby90ZXN0L2dpdGh1Yi9tZXRhZGV2cHJvL29wZW5hcGkzLXRzP3RhcmdldEZpbGU9cGFja2FnZS5qc29uKQpbIVtucG0gdmVyc2lvbl0oaHR0cHM6Ly9iYWRnZS5mdXJ5LmlvL2pzL29wZW5hcGkzLXRzLnN2ZyldKGh0dHA6Ly9iYWRnZS5mdXJ5LmlvL2pzL29wZW5hcGkzLXRzKQoKWyFbTlBNXShodHRwczovL25vZGVpLmNvL25wbS9vcGVuYXBpMy10cy5wbmc/ZG93bmxvYWRzPXRydWUmZG93bmxvYWRSYW5rPXRydWUmc3RhcnM9dHJ1ZSldKGh0dHBzOi8vbm9kZWkuY28vbnBtL29wZW5hcGkzLXRzLykKCiMjIEluY2x1ZGVzCgoqIGAvc3JjL21vZGVsYCBUUyB0eXBlZCBpbnRlcmZhY2VzIGZvciBoZWxwaW5nIGJ1aWxkaW5nIGEgY29udHJhY3QuCiogYC9zcmMvZHNsYCBGbHVlbnQgRFNMIGZvciBidWlsZGluZyBhIGNvbnRyYWN0LgoKIyMgSW5zdGFsbAoKSW5zdGFsbCBwYWNrYWdlIHZpYSAqKm5wbSoqOgoKYGBgYmFzaApucG0gaSAtLXNhdmUgb3BlbmFwaTMtdHMKYGBgCgojIyBWZXJzaW9ucyBhbmQgQ2hhbmdlbG9nCgpTZWUgW2NoYW5nZWxvZ10oQ2hhbmdlbG9nLm1kKS4KCiMjIFJlZmVyZW5jZXMKCiogT3BlbkFQSSBzcGVjIDMuMS4wLiBbaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4xLjAubWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3ZlcnNpb25zLzMuMS4wLm1kKQoKIyMgTGljZW5zZQoKTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLgoKIyMgQ3JlZGl0cwoKKipDb250YWN0OioqIFBlZHJvIEouIE1vbGluYSB8IGdpdGh1YjogW3BqbW9saW5hXShodHRwczovL2dpdGh1Yi5jb20vcGptb2xpbmEpIHwgdHdpdHRlcjogW3Btb2xpbmFtXShodHRwczovL3R3aXR0ZXIuY29tL3Btb2xpbmFtKQoKKGMpIDIwMTctMjAyMi4gW1BlZHJvIEouIE1vbGluYV0oaHR0cDovL3BqbW9saW5hLmNvbSkgYXQgTWV0YWRldiBTLkwuIFtodHRwczovL21ldGFkZXYucHJvXShodHRwczovL21ldGFkZXYucHJvKSAmIGNvbnRyaWJ1dG9ycy4K
        readmeEtag: '"499bb41664454e09a1cfab64d047f500fab7f33b191461ab419f25703b19cb1c"'
        readmeLastModified: Thu, 21 Apr 2022 07:20:23 GMT
        description: TS Model & utils for creating and exposing OpenAPI 3.x contracts.
        created: '2017-03-06T18:47:56Z'
        updated: '2022-04-24T11:05:31Z'
        language: TypeScript
        archived: false
        stars: 270
        watchers: 270
        forks: 47
        owner: metadevpro
        logo: https://avatars.githubusercontent.com/u/24300914?v=4
        license: MIT
        repoEtag: '"a62bd90627b9616c75bdd78422501f6a4d1c5c172da79ddd04164a77c65b1812"'
        repoLastModified: Sun, 24 Apr 2022 11:05:31 GMT
      foundInMaster: true
      id: 390339b2a28f2e5660519a2422c29196
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      stars: 270
      watchers: 270
      forks: 47
      created: '2017-03-06T18:47:56Z'
      lastUpdated: '2022-04-24T11:05:31Z'
      readMe: >
        # OpenApi3-TS


        TypeScript library to help building OpenAPI 3.x compliant API contracts.


        [![Build
        Status](https://travis-ci.org/metadevpro/openapi3-ts.svg?branch=master)](https://travis-ci.org/metadevpro/openapi3-ts)

        [![Coverage
        Status](https://coveralls.io/repos/github/metadevpro/openapi3-ts/badge.svg?branch=master)](https://coveralls.io/github/metadevpro/openapi3-ts?branch=master)

        [![Known
        Vulnerabilities](https://snyk.io/test/github/metadevpro/openapi3-ts/badge.svg?targetFile=package.json)](https://snyk.io/test/github/metadevpro/openapi3-ts?targetFile=package.json)

        [![npm
        version](https://badge.fury.io/js/openapi3-ts.svg)](http://badge.fury.io/js/openapi3-ts)


        [![NPM](https://nodei.co/npm/openapi3-ts.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/openapi3-ts/)


        ## Includes


        * `/src/model` TS typed interfaces for helping building a contract.

        * `/src/dsl` Fluent DSL for building a contract.


        ## Install


        Install package via **npm**:


        ```bash

        npm i --save openapi3-ts

        ```


        ## Versions and Changelog


        See [changelog](Changelog.md).


        ## References


        * OpenAPI spec 3.1.0.
        [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md)


        ## License


        Licensed under the MIT License.


        ## Credits


        **Contact:** Pedro J. Molina | github:
        [pjmolina](https://github.com/pjmolina) | twitter:
        [pmolinam](https://twitter.com/pmolinam)


        (c) 2017-2022. [Pedro J. Molina](http://pjmolina.com) at Metadev S.L.
        [https://metadev.pro](https://metadev.pro) & contributors.
    - source: IMPLEMENTATIONS.md
      name: Microsoft.OpenApi.net
      homepage: https://github.com/microsoft/openapi.net/
      language: dotnet
      source_description: C# based parser with definition validation and migration support from V2
      category:
        - Low-level Tooling
        - Parsers
      foundInMaster: true
      repository: https://github.com/microsoft/openapi.net/
      repositoryMetadata:
        base64Readme: >-
          IVtDYXRlZ29yeSBvdmVydmlldyBzY3JlZW5zaG90XShkb2NzL2ltYWdlcy9vYWluZXQucG5nICJNaWNyb3NvZnQgKyBPcGVuQVBJID0gTG92ZSIpDQoNCiMgT3BlbkFQSS5ORVQgDQoNCnxQYWNrYWdlfE51Z2V0fA0KfC0tfC0tfA0KfE1vZGVscyBhbmQgV3JpdGVyc3xbIVtudWdldF0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9udWdldC92L01pY3Jvc29mdC5PcGVuQXBpLnN2ZyldKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9NaWNyb3NvZnQuT3BlbkFwaS8pIHwNCnxSZWFkZXJzIHwgWyFbbnVnZXRdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnVnZXQvdi9NaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzLnN2ZyldKGh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9NaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzLykgfA0KDQoNClRoZSAqKk9wZW5BUEkuTkVUKiogU0RLIGNvbnRhaW5zIGEgdXNlZnVsIG9iamVjdCBtb2RlbCBmb3IgT3BlbkFQSSBkb2N1bWVudHMgaW4gLk5FVCBhbG9uZyB3aXRoIGNvbW1vbiBzZXJpYWxpemVycyB0byBleHRyYWN0IHJhdyBPcGVuQVBJIEpTT04gYW5kIFlBTUwgZG9jdW1lbnRzIGZyb20gdGhlIG1vZGVsLg0KDQoqKlNlZSBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZSBPcGVuQVBJIHNwZWNpZmljYXRpb24gYW5kIGl0cyBoaXN0b3J5IGhlcmU6IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9wZW5hcGlzLm9yZyI+T3BlbkFQSSBJbml0aWF0aXZlPC9hPioqDQoNClByb2plY3QgT2JqZWN0aXZlcyANCg0KLSBQcm92aWRlIGEgc2luZ2xlIHNoYXJlZCBvYmplY3QgbW9kZWwgaW4gLk5FVCBmb3IgT3BlbkFQSSBkZXNjcmlwdGlvbnMuDQotIEluY2x1ZGUgdGhlIG1vc3QgcHJpbWl0aXZlIFJlYWRlciBmb3IgaW5nZXN0aW5nIE9wZW5BUEkgSlNPTiBhbmQgWUFNTCBkb2N1bWVudHMgaW4gYm90aCBWMiBhbmQgVjMgZm9ybWF0cy4NCi0gUHJvdmlkZSBPcGVuQVBJIGRlc2NyaXB0aW9uIHdyaXRlcnMgZm9yIGJvdGggVjIgYW5kIFYzIHNwZWNpZmljYXRpb24gZm9ybWF0cy4NCi0gRW5hYmxlIGRldmVsb3BlcnMgdG8gY3JlYXRlIFJlYWRlcnMgdGhhdCB0cmFuc2xhdGUgZGlmZmVyZW50IGRhdGEgZm9ybWF0cyBpbnRvIE9wZW5BUEkgZGVzY3JpcHRpb25zLiANCg0KIyBJbnN0YWxsYXRpb24NCg0KLSBJbnN0YWxsIGNvcmUgTnVnZXQgcGFja2FnZSBgTWljcm9zb2Z0Lk9wZW5BcGlgDQotIEluc3RhbGwgcmVhZGVycyBOdWdldCBwYWNrYWdlIGBNaWNyb3NvZnQuT3BlbkFwaS5SZWFkZXJzYA0KDQojIFByb2Nlc3NvcnMNClRoZSBPcGVuQVBJLk5FVCBwcm9qZWN0IGhvbGRzIHRoZSBiYXNlIG9iamVjdCBtb2RlbCBmb3IgcmVwcmVzZW50aW5nIE9wZW5BUEkgZG9jdW1lbnRzIGFzIC5ORVQgb2JqZWN0cy4gU29tZSBkZXZlbG9wZXJzIGhhdmUgZm91bmQgdGhlIG5lZWQgdG8gd3JpdGUgcHJvY2Vzc29ycyB0aGF0IGNvbnZlcnQgb3RoZXIgZGF0YSBmb3JtYXRzIGludG8gdGhpcyBPcGVuQVBJLk5FVCBvYmplY3QgbW9kZWwuIFdlJ2QgbGlrZSB0byBjdXJhdGUgdGhhdCBsaXN0IG9mIHByb2Nlc3NvcnMgaW4gdGhpcyBzZWN0aW9uIG9mIHRoZSByZWFkbWUuIA0KDQpUaGUgYmFzZSBKU09OIGFuZCBZQU1MIHByb2Nlc3NvcnMgYXJlIGJ1aWx0IGludG8gdGhpcyBwcm9qZWN0LiBCZWxvdyBpcyB0aGUgbGlzdCBvZiB0aGUgb3RoZXIgc3VwcG9ydGVkIHByb2Nlc3NvciBwcm9qZWN0cy4NCg0KLSBbKipDIyBDb21tZW50IC8gQW5ub3RhdGlvbiBQcm9jZXNzb3IqKl0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9PcGVuQVBJLk5FVC5DU2hhcnBBbm5vdGF0aW9ucykgOiBDb252ZXJ0cyBzdGFuZGFyZCAuTkVUIGFubm90YXRpb25zICggLy8vIGNvbW1lbnRzICkgZW1pdHRlZCBmcm9tIHlvdXIgYnVpbGQgKE1TQnVpbGQuZXhlKSBpbnRvIE9wZW5BUEkuTkVUIGRvY3VtZW50IG9iamVjdC4gDQoNCi0gWyoqT0RhdGEgQ1NETCBQcm9jZXNzb3IqKl0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9PcGVuQVBJLk5FVC5PRGF0YSkgOiBDb252ZXJ0cyB0aGUgWE1MIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBFbnRpdHkgRGF0YSBNb2RlbCAoRURNKSBkZXNjcmliaW5nIGFuIE9EYXRhIFNlcnZpY2UgaW50byBPcGVuQVBJLk5FVCBkb2N1bWVudCBvYmplY3QuIA0KDQojIEV4YW1wbGUgVXNhZ2UNCg0KQ3JlYXRpbmcgYW4gT3BlbkFQSSBEb2N1bWVudA0KDQpgYGBDIw0KdmFyIGRvY3VtZW50ID0gbmV3IE9wZW5BcGlEb2N1bWVudA0Kew0KICAgIEluZm8gPSBuZXcgT3BlbkFwaUluZm8NCiAgICB7DQogICAgICAgIFZlcnNpb24gPSAiMS4wLjAiLA0KICAgICAgICBUaXRsZSA9ICJTd2FnZ2VyIFBldHN0b3JlIChTaW1wbGUpIiwNCiAgICB9LA0KICAgIFNlcnZlcnMgPSBuZXcgTGlzdDxPcGVuQXBpU2VydmVyPg0KICAgIHsNCiAgICAgICAgbmV3IE9wZW5BcGlTZXJ2ZXIgeyBVcmwgPSAiaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vYXBpIiB9DQogICAgfSwNCiAgICBQYXRocyA9IG5ldyBPcGVuQXBpUGF0aHMNCiAgICB7DQogICAgICAgIFsiL3BldHMiXSA9IG5ldyBPcGVuQXBpUGF0aEl0ZW0NCiAgICAgICAgew0KICAgICAgICAgICAgT3BlcmF0aW9ucyA9IG5ldyBEaWN0aW9uYXJ5PE9wZXJhdGlvblR5cGUsIE9wZW5BcGlPcGVyYXRpb24+DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgW09wZXJhdGlvblR5cGUuR2V0XSA9IG5ldyBPcGVuQXBpT3BlcmF0aW9uDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbiA9ICJSZXR1cm5zIGFsbCBwZXRzIGZyb20gdGhlIHN5c3RlbSB0aGF0IHRoZSB1c2VyIGhhcyBhY2Nlc3MgdG8iLA0KICAgICAgICAgICAgICAgICAgICBSZXNwb25zZXMgPSBuZXcgT3BlbkFwaVJlc3BvbnNlcw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBbIjIwMCJdID0gbmV3IE9wZW5BcGlSZXNwb25zZQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uID0gIk9LIg0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfTsNCmBgYA0KDQpSZWFkaW5nIGFuZCB3cml0aW5nIGEgT3BlbkFQSSBkZXNjcmlwdGlvbg0KDQpgYGBDIw0KdmFyIGh0dHBDbGllbnQgPSBuZXcgSHR0cENsaWVudA0Kew0KICAgIEJhc2VBZGRyZXNzID0gbmV3IFVyaSgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vIikNCn07DQoNCnZhciBzdHJlYW0gPSBhd2FpdCBodHRwQ2xpZW50LkdldFN0cmVhbUFzeW5jKCJtYXN0ZXIvZXhhbXBsZXMvdjMuMC9wZXRzdG9yZS55YW1sIik7DQoNCi8vIFJlYWQgVjMgYXMgWUFNTA0KdmFyIG9wZW5BcGlEb2N1bWVudCA9IG5ldyBPcGVuQXBpU3RyZWFtUmVhZGVyKCkuUmVhZChzdHJlYW0sIG91dCB2YXIgZGlhZ25vc3RpYyk7DQoNCi8vIFdyaXRlIFYyIGFzIEpTT04NCnZhciBvdXRwdXRTdHJpbmcgPSBvcGVuQXBpRG9jdW1lbnQuU2VyaWFsaXplKE9wZW5BcGlTcGVjVmVyc2lvbi5PcGVuQXBpMl8wLCBPcGVuQXBpRm9ybWF0Lkpzb24pOw0KDQpgYGANCg0KIyBCdWlsZCBTdGF0dXMNCg0KfCoqbWFzdGVyKip8DQp8LS18DQp8WyFbQnVpbGQgc3RhdHVzXShodHRwczovL2NpLmFwcHZleW9yLmNvbS9hcGkvcHJvamVjdHMvc3RhdHVzLzlsNmhseTN2amV1MHRtdHgvYnJhbmNoL21hc3Rlcj9zdmc9dHJ1ZSldKGh0dHBzOi8vY2kuYXBwdmV5b3IuY29tL3Byb2plY3QvTWljcm9zb2Z0T3BlbkFQSU5FVEFkbWluL29wZW5hcGktbmV0LTU0ZTdpL2JyYW5jaC9tYXN0ZXIpfA0KDQojIENvbnRyaWJ1dGluZw0KDQpUaGlzIHByb2plY3Qgd2VsY29tZXMgY29udHJpYnV0aW9ucyBhbmQgc3VnZ2VzdGlvbnMuICBNb3N0IGNvbnRyaWJ1dGlvbnMgcmVxdWlyZSB5b3UgdG8gYWdyZWUgdG8gYQ0KQ29udHJpYnV0b3IgTGljZW5zZSBBZ3JlZW1lbnQgKENMQSkgZGVjbGFyaW5nIHRoYXQgeW91IGhhdmUgdGhlIHJpZ2h0IHRvLCBhbmQgYWN0dWFsbHkgZG8sIGdyYW50IHVzDQp0aGUgcmlnaHRzIHRvIHVzZSB5b3VyIGNvbnRyaWJ1dGlvbi4gRm9yIGRldGFpbHMsIHZpc2l0IGh0dHBzOi8vY2xhLm1pY3Jvc29mdC5jb20uDQoNCldoZW4geW91IHN1Ym1pdCBhIHB1bGwgcmVxdWVzdCwgYSBDTEEtYm90IHdpbGwgYXV0b21hdGljYWxseSBkZXRlcm1pbmUgd2hldGhlciB5b3UgbmVlZCB0byBwcm92aWRlDQphIENMQSBhbmQgZGVjb3JhdGUgdGhlIFBSIGFwcHJvcHJpYXRlbHkgKGUuZy4sIGxhYmVsLCBjb21tZW50KS4gU2ltcGx5IGZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zDQpwcm92aWRlZCBieSB0aGUgYm90LiBZb3Ugd2lsbCBvbmx5IG5lZWQgdG8gZG8gdGhpcyBvbmNlIGFjcm9zcyBhbGwgcmVwb3MgdXNpbmcgb3VyIENMQS4NCg0KVGhpcyBwcm9qZWN0IGhhcyBhZG9wdGVkIHRoZSBbTWljcm9zb2Z0IE9wZW4gU291cmNlIENvZGUgb2YgQ29uZHVjdF0oaHR0cHM6Ly9vcGVuc291cmNlLm1pY3Jvc29mdC5jb20vY29kZW9mY29uZHVjdC8pLg0KRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIHRoZSBbQ29kZSBvZiBDb25kdWN0IEZBUV0oaHR0cHM6Ly9vcGVuc291cmNlLm1pY3Jvc29mdC5jb20vY29kZW9mY29uZHVjdC9mYXEvKSBvcg0KY29udGFjdCBbb3BlbmNvZGVAbWljcm9zb2Z0LmNvbV0obWFpbHRvOm9wZW5jb2RlQG1pY3Jvc29mdC5jb20pIHdpdGggYW55IGFkZGl0aW9uYWwgcXVlc3Rpb25zIG9yIGNvbW1lbnRzLg0KDQpUbyBwcm92aWRlIGZlZWRiYWNrIGFuZCBhc2sgcXVlc3Rpb25zIHlvdSBjYW4gdXNlIFN0YWNrIE92ZXJmbG93IHdpdGggdGhlIFtPcGVuQVBJLk5FVF0oaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL29wZW5hcGkubmV0KSB0YWcgb3IgdXNlIHRoZSBPcGVuQVBJLk5FVCBTbGFjayBjaGFubmVsIHdoaWNoIHlvdSBjYW4gam9pbiBieSByZWdpc3RlcmluZyBmb3IgdGhlIEhUVFAgQVBJcyB0ZWFtIGF0IGh0dHA6Ly9zbGFjay5odHRwYXBpcy5jb20uDQo=
        readmeEtag: '"b7bde59273ed6cbe369b619531bdf02db228fb99eeac268ff8fb6155b389f9b6"'
        readmeLastModified: Tue, 19 Apr 2022 23:46:22 GMT
        description: >-
          The OpenAPI.NET SDK contains a useful object model for OpenAPI
          documents in .NET along with common serializers to extract raw OpenAPI
          JSON and YAML documents from the model.
        created: '2017-07-14T00:24:14Z'
        updated: '2022-04-29T05:14:02Z'
        language: C#
        archived: false
        stars: 960
        watchers: 960
        forks: 158
        owner: microsoft
        logo: https://avatars.githubusercontent.com/u/6154722?v=4
        license: MIT
        repoEtag: '"c4019337a54cfa5e1cd48985351e388572718a94a2bf493b308b99866c97cf07"'
        repoLastModified: Fri, 29 Apr 2022 05:14:02 GMT
      id: f3215034d64cfcbcc28a4bdb0205a075
      swagger: 'No'
      version30: 'No'
      version31: 'No'
      stars: 960
      watchers: 960
      forks: 158
      created: '2017-07-14T00:24:14Z'
      lastUpdated: '2022-04-29T05:14:02Z'
      readMe: "![Category overview screenshot](docs/images/oainet.png \"Microsoft + OpenAPI = Love\")\r\n\r\n# OpenAPI.NET \r\n\r\n|Package|Nuget|\r\n|--|--|\r\n|Models and Writers|[![nuget](https://img.shields.io/nuget/v/Microsoft.OpenApi.svg)](https://www.nuget.org/packages/Microsoft.OpenApi/) |\r\n|Readers | [![nuget](https://img.shields.io/nuget/v/Microsoft.OpenApi.Readers.svg)](https://www.nuget.org/packages/Microsoft.OpenApi.Readers/) |\r\n\r\n\r\nThe **OpenAPI.NET** SDK contains a useful object model for OpenAPI documents in .NET along with common serializers to extract raw OpenAPI JSON and YAML documents from the model.\r\n\r\n**See more information on the OpenAPI specification and its history here: <a href=\"https://www.openapis.org\">OpenAPI Initiative</a>**\r\n\r\nProject Objectives \r\n\r\n- Provide a single shared object model in .NET for OpenAPI descriptions.\r\n- Include the most primitive Reader for ingesting OpenAPI JSON and YAML documents in both V2 and V3 formats.\r\n- Provide OpenAPI description writers for both V2 and V3 specification formats.\r\n- Enable developers to create Readers that translate different data formats into OpenAPI descriptions. \r\n\r\n# Installation\r\n\r\n- Install core Nuget package `Microsoft.OpenApi`\r\n- Install readers Nuget package `Microsoft.OpenApi.Readers`\r\n\r\n# Processors\r\nThe OpenAPI.NET project holds the base object model for representing OpenAPI documents as .NET objects. Some developers have found the need to write processors that convert other data formats into this OpenAPI.NET object model. We'd like to curate that list of processors in this section of the readme. \r\n\r\nThe base JSON and YAML processors are built into this project. Below is the list of the other supported processor projects.\r\n\r\n- [**C# Comment / Annotation Processor**](https://github.com/Microsoft/OpenAPI.NET.CSharpAnnotations) : Converts standard .NET annotations ( /// comments ) emitted from your build (MSBuild.exe) into OpenAPI.NET document object. \r\n\r\n- [**OData CSDL Processor**](https://github.com/Microsoft/OpenAPI.NET.OData) : Converts the XML representation of the Entity Data Model (EDM) describing an OData Service into OpenAPI.NET document object. \r\n\r\n# Example Usage\r\n\r\nCreating an OpenAPI Document\r\n\r\n```C#\r\nvar document = new OpenApiDocument\r\n{\r\n    Info = new OpenApiInfo\r\n    {\r\n        Version = \"1.0.0\",\r\n        Title = \"Swagger Petstore (Simple)\",\r\n    },\r\n    Servers = new List<OpenApiServer>\r\n    {\r\n        new OpenApiServer { Url = \"http://petstore.swagger.io/api\" }\r\n    },\r\n    Paths = new OpenApiPaths\r\n    {\r\n        [\"/pets\"] = new OpenApiPathItem\r\n        {\r\n            Operations = new Dictionary<OperationType, OpenApiOperation>\r\n            {\r\n                [OperationType.Get] = new OpenApiOperation\r\n                {\r\n                    Description = \"Returns all pets from the system that the user has access to\",\r\n                    Responses = new OpenApiResponses\r\n                    {\r\n                        [\"200\"] = new OpenApiResponse\r\n                        {\r\n                            Description = \"OK\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nReading and writing a OpenAPI description\r\n\r\n```C#\r\nvar httpClient = new HttpClient\r\n{\r\n    BaseAddress = new Uri(\"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/\")\r\n};\r\n\r\nvar stream = await httpClient.GetStreamAsync(\"master/examples/v3.0/petstore.yaml\");\r\n\r\n// Read V3 as YAML\r\nvar openApiDocument = new OpenApiStreamReader().Read(stream, out var diagnostic);\r\n\r\n// Write V2 as JSON\r\nvar outputString = openApiDocument.Serialize(OpenApiSpecVersion.OpenApi2_0, OpenApiFormat.Json);\r\n\r\n```\r\n\r\n# Build Status\r\n\r\n|**master**|\r\n|--|\r\n|[![Build status](https://ci.appveyor.com/api/projects/status/9l6hly3vjeu0tmtx/branch/master?svg=true)](https://ci.appveyor.com/project/MicrosoftOpenAPINETAdmin/openapi-net-54e7i/branch/master)|\r\n\r\n# Contributing\r\n\r\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\r\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\r\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\r\n\r\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\r\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\r\nprovided by the bot. You will only need to do this once across all repos using our CLA.\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\r\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\r\n\r\nTo provide feedback and ask questions you can use Stack Overflow with the [OpenAPI.NET](https://stackoverflow.com/questions/tagged/openapi.net) tag or use the OpenAPI.NET Slack channel which you can join by registering for the HTTP APIs team at http://slack.httpapis.com.\r\n"
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name: openapi3_parser
      homepage: https://github.com/kevindew/openapi3_parser
      language: Ruby
      source_description:
        - >-
          A Ruby implementation of parser and validator for the OpenAPI 3
          Specification
        - >-
          A Ruby implementation of parser and validator for the OpenAPI 3
          Specification.
      category:
        - Low-level Tooling
        - Parsers
      repository: https://github.com/kevindew/openapi3_parser
      v2: false
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPcGVuQVBJIDMgUGFyc2VyCgpbIVtCdWlsZCBTdGF0dXNdKGh0dHBzOi8vdHJhdmlzLWNpLm9yZy9rZXZpbmRldy9vcGVuYXBpM19wYXJzZXIuc3ZnP2JyYW5jaD1tYWluKV0oaHR0cHM6Ly90cmF2aXMtY2kub3JnL2tldmluZGV3L29wZW5hcGkzX3BhcnNlcikKClRoaXMgYSBSdWJ5IGJhc2VkIHBhcnNlci92YWxpZGF0b3IgZm9yIFtPcGVuQVBJIDNdW29wZW5hcGktM10uIEl0IGlzIHVzZWQgdG8KY29udmVydCBhbiBPcGVuQVBJIGZpbGUgKGNhbiBiZSBhIGxvY2FsIGZpbGUsIGEgVVJMLCBhIHN0cmluZyBvciBldmVuIGEgUnVieQpoYXNoKSBpbnRvIGFuIG9iamVjdCBncmFwaCB3aXRoIGEgc2ltcGxlIEFQSSB0aGF0IGZvbGxvd3MgdGhlIFtPcGVuQVBJCnNwZWNpZmljYXRpb25dW29wZW5hcGktMy1zcGVjXS4KCkJhc2ljIGV4YW1wbGU6CgpgYGBydWJ5CnJlcXVpcmUgIm9wZW5hcGkzX3BhcnNlciIKCmRvY3VtZW50ID0gT3BlbmFwaTNQYXJzZXIubG9hZF91cmwoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uL21hc3Rlci9leGFtcGxlcy92My4wL3BldHN0b3JlLnlhbWwiKQoKZG9jdW1lbnQucGF0aHNbIi9wZXRzIl0uZ2V0LnN1bW1hcnkKIyA9PiAiTGlzdCBhbGwgcGV0cyIKYGBgCgpJdCBhaW1zIHRvIHN1cHBvcnQgMTAwJSBvZiB0aGUgT3BlbkFQSSAzLjAgc3BlY2lmaWNhdGlvbiwgd2l0aCBrZXkgZmVhdHVyZXMKYmVpbmc6CgotIFN1cHBvcnRzIGxvYWRpbmcgYSBzcGVjaWZpY2F0aW9uIGJ5IHBhdGggdG8gYSBmaWxlLCBVUkwsIFJ1YnkgZmlsZSBvYmplY3RzLAogIGFuZCBzdHJpbmdzIGluIFlBTUwgYW5kIEpTT04gZm9ybWF0cywgaXQgZXZlbiBzdXBwb3J0cyBsb2FkaW5nIHZpYSBhIFJ1YnkgaGFzaDsKLSBTdXBwb3J0IGZvciBsb2FkaW5nIHJlZmVyZW5jZXMgZnJvbSBleHRlcm5hbCBmaWxlcyBpbmNsdWRpbmcgVVJMczsKLSBIYW5kbGVzIHJlY3Vyc2l2ZSByZWZlcmVuY2VzOwotIEFsbCBvZiBPcGVuQVBJIHNwZWNpZmljYXRpb24gbWFwcGVkIHRvIFJ1Ynkgb2JqZWN0cywgcHJvdmlkaW5nIGEgbmF0dXJhbAogIFJ1YnkgaW50ZXJmYWNlIHRoYXQgbWFwcyBjbGVhcmx5IHRvIHRoZSBzcGVjaWZpY2F0aW9uOwotIE9wZW5BUEkgZmlsZXMgdmFsaWRhdGVkIHdpdGggYSBzaW1wbGUgQVBJIHRvIHF1aWNrbHkgYW5kIHNpbXBseSBzZWUgYWxsCiAgcHJvYmxlbXMgd2l0aCBhIGZpbGUKLSBCdWlsdC1pbiBNYXJrZG93biB0byBIVE1MIGNvbnZlcnNpb247Ci0gRG9jdW1lbnRhdGlvbiBmb3IgdGhlIEFQSSB0byBuYXZpZ2F0ZSB0aGUgT3BlbkFQSSBub2RlcyBpcyBhdmFpbGFibGUgb24KICBbcnVieWRvYy5pbmZvXVtkb2NzXS4KCkkndmUgd3JvdGUgYSBibG9nIHBvc3QgcmVmbGVjdGluZyBvbiB0aGUgZGVjaXNpb25zIGludm9sdmVkIGluIGJ1aWxkaW5nIHRoaXMKcGFyc2VyIGluIFtIb3cgdG8gd3JpdGUgYW4gT3BlbkFQSSAzIHBhcnNlcl1bYmxvZ10uCgpbb3BlbmFwaS0zXTogaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24KW29wZW5hcGktMy1zcGVjXTogaHR0cHM6Ly9naXRodWIuY29tL09BSS9PcGVuQVBJLVNwZWNpZmljYXRpb24vYmxvYi9tYXN0ZXIvdmVyc2lvbnMvMy4wLjIubWQjc3BlY2lmaWNhdGlvbgpbZG9jc106IGh0dHA6Ly93d3cucnVieWRvYy5pbmZvL2dpdGh1Yi9rZXZpbmRldy9vcGVuYXBpM19wYXJzZXIvT3BlbmFwaTNQYXJzZXIvTm9kZS9PcGVuYXBpCltibG9nXTogaHR0cHM6Ly9rZXZpbmRldy5tZS9wb3N0LzE4ODYxMTQyMzIzMS9ob3ctdG8td3JpdGUtYW4tb3BlbmFwaS0zLXBhcnNlcgoKIyMgVXNhZ2UKCiMjIyBMb2FkaW5nIGEgc3BlY2lmaWNhdGlvbgoKYGBgcnVieQojIGJ5IFVSTApPcGVuYXBpM1BhcnNlci5sb2FkX3VybCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tldmluZGV3L29wZW5hcGkzX3BhcnNlci9tYWluL3NwZWMvc3VwcG9ydC9leGFtcGxlcy9wZXRzdG9yZS1leHBhbmRlZC55YW1sIikKCiMgYnkgcGF0aCB0byBmaWxlCk9wZW5hcGkzUGFyc2VyLmxvYWRfZmlsZSgic3BlYy9zdXBwb3J0L2V4YW1wbGVzL3ViZXIueWFtbCIpCgojIGJ5IEZpbGUKT3BlbmFwaTNQYXJzZXIubG9hZChGaWxlLm9wZW4oInNwZWMvc3VwcG9ydC9leGFtcGxlcy91YmVyLnlhbWwiKSkKCiMgYnkgU3RyaW5nCk9wZW5hcGkzUGFyc2VyLmxvYWQoJ3sgIm9wZW5hcGkiOiAiMy4wLjAiLCAiaW5mbyI6IHsgInRpdGxlIjogIkFQSSIsICJ2ZXJzaW9uIjogIjEuMC4wIiB9LCAicGF0aHMiOiB7fSAgfScpCgojIGJ5IEhhc2gKT3BlbmFwaTNQYXJzZXIubG9hZChvcGVuYXBpOiAiMy4wLjAiLCBpbmZvOiB7IHRpdGxlOiAiQVBJIiwgdmVyc2lvbjogIjEuMC4wIiB9LCBwYXRoczoge30pCgpgYGAKCiMjIyBWYWxpZGF0aW5nCgpgYGBydWJ5CmRvY3VtZW50ID0gT3BlbmFwaTNQYXJzZXIubG9hZChvcGVuYXBpOiAiMy4wLjAiLCBpbmZvOiB7fSwgcGF0aHM6IHt9KQpkb2N1bWVudC52YWxpZD8KIyA9PiBmYWxzZQpkb2N1bWVudC5lcnJvcnMKI8KgPT4gT3BlbmFwaTNQYXJzZXI6OlZhbGlkYXRpb246OkVycm9yQ29sbGVjdGlvbihlcnJvcnM6IHsiIy9pbmZvIj0+WyJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkczogdGl0bGUgYW5kIHZlcnNpb24iXX0pCmBgYAoKIyMjIFRyYXZlcnNpbmcKCmBgYHJ1YnkKZG9jdW1lbnQgPSBPcGVuYXBpM1BhcnNlci5sb2FkX3VybCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2tldmluZGV3L29wZW5hcGkzX3BhcnNlci9tYWluL3NwZWMvc3VwcG9ydC9leGFtcGxlcy9wZXRzdG9yZS1leHBhbmRlZC55YW1sIikKCiMgYnkgb2JqZWN0cwoKZG9jdW1lbnQuaW5mby50ZXJtc19vZl9zZXJ2aWNlCiMgPT4gImh0dHA6Ly9zd2FnZ2VyLmlvL3Rlcm1zLyIKCmRvY3VtZW50LnBhdGhzLmtleXMKIyA9PiBbIi9wZXRzIiwgIi9wZXRzL3tpZH0iXQoKZG9jdW1lbnQucGF0aHNbIi9wZXRzIl0uZ2V0LnBhcmFtZXRlcnMubWFwKCY6bmFtZSkKIyA9PiBbInRhZ3MiLCAibGltaXQiXQoKIyBieSBoYXNoIHN5bnRheAoKZG9jdW1lbnRbImluZm8iXVsidGVybXNPZlNlcnZpY2UiXQo9PiAiaHR0cDovL3N3YWdnZXIuaW8vdGVybXMvIgoKZG9jdW1lbnRbInBhdGhzIl0ua2V5cwojID0+IFsiL3BldHMiLCAiL3BldHMve2lkfSJdCgpkb2N1bWVudFsicGF0aHMiXVsiL3BldHMiXVsiZ2V0Il1bInBhcmFtZXRlcnMiXS5tYXAoJjpuYW1lKQojID0+IFsidGFncyIsICJsaW1pdCJdCgojIGJ5IGEgcGF0aCB0byBhIG5vZGUKZG9jdW1lbnQubm9kZV9hdCgiIy9wYXRocy8lMkZwZXRzL2dldC9vcGVyYXRpb25JZCIpCj0+ICJmaW5kUGV0cyIKCmRvY3VtZW50Lm5vZGVfYXQoIiMvY29tcG9uZW50cy9zY2hlbWFzL1BldC9hbGxPZi8wL3JlcXVpcmVkLzAiKQo9PiAibmFtZSIKCiMgb3IgY29tYmluaW5nCgpkb2N1bWVudC5jb21wb25lbnRzLnNjaGVtYXNbIlBldCJdLm5vZGVfYXQoIiMuLi9OZXdQZXQiKQo9PiBPcGVuYXBpM1BhcnNlcjo6Tm9kZTo6U2NoZW1hKCMvY29tcG9uZW50cy9zY2hlbWFzL05ld1BldCkKYGBgCgpZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgdGhlIEFQSSBvbiBbcnVieWRvYy5pbmZvXVtkb2NzXQoKIyMgSW5zdGFsbGF0aW9uCgpZb3UgY2FuIGluc3RhbGwgdGhpcyBnZW0gaW50byB5b3VyIGJ1bmRsZXIgYXBwbGljYXRpb24gYnkgYWRkaW5nIHRoaXMgbGluZSB0bwp5b3VyIEdlbWZpbGU6CgpgYGAKZ2VtICJvcGVuYXBpM19wYXJzZXIiLCAifj4gMC45LjAiCmBgYAoKYW5kIHRoZW4gcnVubmluZyBgJCBidW5kbGUgaW5zdGFsbGAKCk9yIGluc3RhbGwgdGhlIGdlbSBvbnRvIHlvdXIgbWFjaGluZSB2aWEgYCQgZ2VtIGluc3RhbGwgb3BlbmFwaTNfcGFyc2VyYAoKIyMgU3RhdHVzCgpUaGlzIGlzIGN1cnJlbnRseSBhIHdvcmsgaW4gcHJvZ3Jlc3MgYW5kIHdpbGwgcmVtYWluIHNvIHVudGlsIGl0IHJlYWNoZXMgMS4wLgoKU2VlIFtUT0RPXShUT0RPLm1kKSBmb3IgZGV0YWlscyBvZiB0aGUgZmVhdHVyZXMgc3RpbGwgdG8gaW1wbGVtZW50LgoKIyMgTGljZW5jZQoKW01JVCBMaWNlbnNlXShMSUNFTkNFKQo=
        readmeEtag: '"dd9f9975ac0af5e29d1c5676b1b13cc1850ee64255170754291a0a7912e785ad"'
        readmeLastModified: Mon, 21 Mar 2022 01:53:24 GMT
        description: Open API 3 Parser/Validator for Ruby
        created: '2017-10-19T23:33:52Z'
        updated: '2022-04-19T11:38:26Z'
        language: Ruby
        archived: false
        stars: 68
        watchers: 68
        forks: 11
        owner: kevindew
        logo: https://avatars.githubusercontent.com/u/282717?v=4
        license: MIT
        repoEtag: '"42c4c00d3369f7d9e7db20151c9b33d1c75a511ef171cf2572e77b6ab92411a6"'
        repoLastModified: Tue, 19 Apr 2022 11:38:26 GMT
      foundInMaster: true
      id: 609fe191ac5d7b1b89c772e47fd2deb8
      swagger: 'No'
      version30: 'Yes'
      version31: 'No'
      stars: 68
      watchers: 68
      forks: 11
      created: '2017-10-19T23:33:52Z'
      lastUpdated: '2022-04-19T11:38:26Z'
      readMe: "# OpenAPI 3 Parser\n\n[![Build Status](https://travis-ci.org/kevindew/openapi3_parser.svg?branch=main)](https://travis-ci.org/kevindew/openapi3_parser)\n\nThis a Ruby based parser/validator for [OpenAPI 3][openapi-3]. It is used to\nconvert an OpenAPI file (can be a local file, a URL, a string or even a Ruby\nhash) into an object graph with a simple API that follows the [OpenAPI\nspecification][openapi-3-spec].\n\nBasic example:\n\n```ruby\nrequire \"openapi3_parser\"\n\ndocument = Openapi3Parser.load_url(\"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml\")\n\ndocument.paths[\"/pets\"].get.summary\n# => \"List all pets\"\n```\n\nIt aims to support 100% of the OpenAPI 3.0 specification, with key features\nbeing:\n\n- Supports loading a specification by path to a file, URL, Ruby file objects,\n  and strings in YAML and JSON formats, it even supports loading via a Ruby hash;\n- Support for loading references from external files including URLs;\n- Handles recursive references;\n- All of OpenAPI specification mapped to Ruby objects, providing a natural\n  Ruby interface that maps clearly to the specification;\n- OpenAPI files validated with a simple API to quickly and simply see all\n  problems with a file\n- Built-in Markdown to HTML conversion;\n- Documentation for the API to navigate the OpenAPI nodes is available on\n  [rubydoc.info][docs].\n\nI've wrote a blog post reflecting on the decisions involved in building this\nparser in [How to write an OpenAPI 3 parser][blog].\n\n[openapi-3]: https://github.com/OAI/OpenAPI-Specification\n[openapi-3-spec]: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#specification\n[docs]: http://www.rubydoc.info/github/kevindew/openapi3_parser/Openapi3Parser/Node/Openapi\n[blog]: https://kevindew.me/post/188611423231/how-to-write-an-openapi-3-parser\n\n## Usage\n\n### Loading a specification\n\n```ruby\n# by URL\nOpenapi3Parser.load_url(\"https://raw.githubusercontent.com/kevindew/openapi3_parser/main/spec/support/examples/petstore-expanded.yaml\")\n\n# by path to file\nOpenapi3Parser.load_file(\"spec/support/examples/uber.yaml\")\n\n# by File\nOpenapi3Parser.load(File.open(\"spec/support/examples/uber.yaml\"))\n\n# by String\nOpenapi3Parser.load('{ \"openapi\": \"3.0.0\", \"info\": { \"title\": \"API\", \"version\": \"1.0.0\" }, \"paths\": {}  }')\n\n# by Hash\nOpenapi3Parser.load(openapi: \"3.0.0\", info: { title: \"API\", version: \"1.0.0\" }, paths: {})\n\n```\n\n### Validating\n\n```ruby\ndocument = Openapi3Parser.load(openapi: \"3.0.0\", info: {}, paths: {})\ndocument.valid?\n# => false\ndocument.errors\n#\_=> Openapi3Parser::Validation::ErrorCollection(errors: {\"#/info\"=>[\"Missing required fields: title and version\"]})\n```\n\n### Traversing\n\n```ruby\ndocument = Openapi3Parser.load_url(\"https://raw.githubusercontent.com/kevindew/openapi3_parser/main/spec/support/examples/petstore-expanded.yaml\")\n\n# by objects\n\ndocument.info.terms_of_service\n# => \"http://swagger.io/terms/\"\n\ndocument.paths.keys\n# => [\"/pets\", \"/pets/{id}\"]\n\ndocument.paths[\"/pets\"].get.parameters.map(&:name)\n# => [\"tags\", \"limit\"]\n\n# by hash syntax\n\ndocument[\"info\"][\"termsOfService\"]\n=> \"http://swagger.io/terms/\"\n\ndocument[\"paths\"].keys\n# => [\"/pets\", \"/pets/{id}\"]\n\ndocument[\"paths\"][\"/pets\"][\"get\"][\"parameters\"].map(&:name)\n# => [\"tags\", \"limit\"]\n\n# by a path to a node\ndocument.node_at(\"#/paths/%2Fpets/get/operationId\")\n=> \"findPets\"\n\ndocument.node_at(\"#/components/schemas/Pet/allOf/0/required/0\")\n=> \"name\"\n\n# or combining\n\ndocument.components.schemas[\"Pet\"].node_at(\"#../NewPet\")\n=> Openapi3Parser::Node::Schema(#/components/schemas/NewPet)\n```\n\nYou can learn more about the API on [rubydoc.info][docs]\n\n## Installation\n\nYou can install this gem into your bundler application by adding this line to\nyour Gemfile:\n\n```\ngem \"openapi3_parser\", \"~> 0.9.0\"\n```\n\nand then running `$ bundle install`\n\nOr install the gem onto your machine via `$ gem install openapi3_parser`\n\n## Status\n\nThis is currently a work in progress and will remain so until it reaches 1.0.\n\nSee [TODO](TODO.md) for details of the features still to implement.\n\n## Licence\n\n[MIT License](LICENCE)\n"
- category: Code Generators
  tools:
    - source: IMPLEMENTATIONS.md
      name: swagger-models
      homepage: >-
        https://github.com/swagger-api/swagger-core/tree/master/modules/swagger-models
      language: Java
      source_description: OpenAPI 3.0 Java Pojos
      category:
        - Low-level Tooling
        - Code Generators
      foundInMaster: true
      repository: >-
        https://github.com/swagger-api/swagger-core/tree/master/modules/swagger-models
      repositoryMetadata:
        base64Readme: >-
          IyBTd2FnZ2VyIENvcmUgPGltZyBzcmM9Imh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLmlvL3dvcmRwcmVzcy9pbWFnZXMvYXNzZXRzL1NXLWxvZ28tY2xyLnBuZyIgaGVpZ2h0PSI1MCIgYWxpZ249InJpZ2h0Ij4KCioqTk9URToqKiBJZiB5b3UncmUgbG9va2luZyBmb3IgU3dhZ2dlciBDb3JlIDEuNS5YIGFuZCBPcGVuQVBJIDIuMCwgcGxlYXNlIHJlZmVyIHRvIFsxLjUgYnJhbmNoXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvMS41KS4KCioqTk9URToqKiBTaW5jZSB2ZXJzaW9uIDIuMS43LCBTd2FnZ2VyIENvcmUgYWxzbyBzdXBwb3J0cyB0aGUgSmFrYXJ0YSBuYW1lc3BhY2UuIFRoZXJlIGFyZSBhIHBhcmFsbGVsIHNldCBvZiBhcnRpZmFjdHMgd2l0aCB0aGUgYC1qYWthcnRhYCBzdWZmaXgsIHByb3ZpZGluZyB0aGUgc2FtZSBmdW5jdGlvbmFsaXR5IGFzIHRoZSB1bnN1ZmZpeGVkIChpLmUuOiBgamF2YXhgKSBhcnRpZmFjdHMuClBsZWFzZSBzZWUgdGhlIFtXaWtpXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3dpa2kvU3dhZ2dlci0yLlgtLS1HZXR0aW5nLXN0YXJ0ZWQpIGZvciBtb3JlIGRldGFpbHMuCgohW0J1aWxkIFRlc3QgRGVwbG95XShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3dvcmtmbG93cy9CdWlsZCUyMFRlc3QlMjBEZXBsb3klMjBtYXN0ZXIvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIpClshW01hdmVuIENlbnRyYWxdKGh0dHBzOi8vbWF2ZW4tYmFkZ2VzLmhlcm9rdWFwcC5jb20vbWF2ZW4tY2VudHJhbC9pby5zd2FnZ2VyLmNvcmUudjMvc3dhZ2dlci1wcm9qZWN0L2JhZGdlLnN2Zz9zdHlsZT1wbGFzdGljKV0oaHR0cHM6Ly9tYXZlbi1iYWRnZXMuaGVyb2t1YXBwLmNvbS9tYXZlbi1jZW50cmFsL2lvLnN3YWdnZXIuY29yZS52My9zd2FnZ2VyLXByb2plY3QpCgpTd2FnZ2VyIENvcmUgaXMgYSBKYXZhIGltcGxlbWVudGF0aW9uIG9mIHRoZSBPcGVuQVBJIFNwZWNpZmljYXRpb24uIEN1cnJlbnQgdmVyc2lvbiBzdXBwb3J0cyAqSkFYLVJTMiogKGBqYXZheGAgYW5kIGBqYWthcnRhYCBuYW1lc3BhY2VzKS4KCiMjIEdldCBzdGFydGVkIHdpdGggU3dhZ2dlciBDb3JlIQpTZWUgdGhlIGd1aWRlIG9uIFtnZXR0aW5nIHN0YXJ0ZWQgd2l0aCBTd2FnZ2VyIENvcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvd2lraS9Td2FnZ2VyLTIuWC0tLUdldHRpbmctc3RhcnRlZCkgdG8gZ2V0IHN0YXJ0ZWQgd2l0aCBhZGRpbmcgU3dhZ2dlciB0byB5b3VyIEFQSS4KCiMjIFNlZSB0aGUgV2lraSEKVGhlIFtnaXRodWIgd2lraV0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS93aWtpKSBjb250YWlucyBkb2N1bWVudGF0aW9uLCBzYW1wbGVzLCBjb250cmlidXRpb25zLCBldGMuIFN0YXJ0IHRoZXJlLgoKIyMgQ29tcGF0aWJpbGl0eQpUaGUgT3BlbkFQSSBTcGVjaWZpY2F0aW9uIGhhcyB1bmRlcmdvbmUgc2V2ZXJhbCByZXZpc2lvbnMgc2luY2UgaW5pdGlhbCBjcmVhdGlvbiBpbiAyMDEwLiAgVGhlIFN3YWdnZXIgQ29yZSBwcm9qZWN0IGhhcyB0aGUgZm9sbG93aW5nIGNvbXBhdGliaWxpdGllcyB3aXRoIHRoZSBPcGVuQVBJIFNwZWNpZmljYXRpb246CgpTd2FnZ2VyIGNvcmUgVmVyc2lvbiAgICAgIHwgUmVsZWFzZSBEYXRlIHwgT3BlbkFQSSBTcGVjIGNvbXBhdGliaWxpdHkgfCBOb3RlcyB8IFN0YXR1cwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLSB8IC0tLS0KMi4yLjAgKCoqY3VycmVudCBzdGFibGUqKil8IDIwMjItMDQtMDQgICB8IDMuMCAgICAgICAgICAgfCBbdGFnIHYyLjIuMF0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YyLjIuMCkgfCBTdXBwb3J0ZWQKMi4xLjEzICAgICAgICAgICAgICAgICAgICAgfCAyMDIyLTAyLTA3ICAgfCAzLjAgICAgICAgICAgIHwgW3RhZyB2Mi4xLjEzXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjIuMS4xMykgfCBTdXBwb3J0ZWQKMi4xLjEyICAgICAgICAgICAgICAgICAgICAgfCAyMDIxLTEyLTIzICAgfCAzLjAgICAgICAgICAgIHwgW3RhZyB2Mi4xLjEyXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjIuMS4xMikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMi4xLjExICAgICAgICAgICAgICAgICAgICAgfCAyMDIxLTA5LTI5ICAgfCAzLjAgICAgICAgICAgIHwgW3RhZyB2Mi4xLjExXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjIuMS4xMSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQqKgoyLjEuMTAgICAgICAgICAgICAgICAgICAgICB8IDIwMjEtMDYtMjggICB8IDMuMCAgICAgICAgICAgfCBbdGFnIHYyLjEuMTBdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92Mi4xLjEwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoyLjEuOSAgICAgICAgICAgICAgICAgICAgIHwgMjAyMS0wNC0yMCAgIHwgMy4wICAgICAgICAgICB8IFt0YWcgdjIuMS45XShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjIuMS45KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjIuMS44ICAgICAgICAgICAgICAgICAgICAgfCAyMDIxLTA0LTE4ICAgfCAzLjAgICAgICAgICAgIHwgW3RhZyB2Mi4xLjhdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92Mi4xLjgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMi4xLjcgICAgICAgICAgICAgICAgICAgICB8IDIwMjEtMDItMTggICB8IDMuMCAgICAgICAgICAgfCBbdGFnIHYyLjEuN10oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YyLjEuNykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoyLjEuNiAgICAgICAgICAgICAgICAgICAgIHwgMjAyMC0xMi0wNCAgIHwgMy4wICAgICAgICAgICB8IFt0YWcgdjIuMS42XShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjIuMS42KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjIuMS41ICAgICAgICAgICAgICAgICAgICAgfCAyMDIwLTEwLTAxICAgfCAzLjAgICAgICAgICAgIHwgW3RhZyB2Mi4xLjVdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92Mi4xLjUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMi4xLjQgICAgICAgICAgICAgICAgICAgICB8IDIwMjAtMDctMjQgICB8IDMuMCAgICAgICAgICAgfCBbdGFnIHYyLjEuNF0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YyLjEuNCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoyLjEuMyAgICAgICAgICAgICAgICAgICAgIHwgMjAyMC0wNi0yNyAgIHwgMy4wICAgICAgICAgICB8IFt0YWcgdjIuMS4zXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjIuMS4zKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjIuMS4yICAgICAgICAgICAgICAgICAgICAgfCAyMDIwLTA0LTAxICAgfCAzLjAgICAgICAgICAgIHwgW3RhZyB2Mi4xLjJdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92Mi4xLjIpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMi4xLjEgICAgICAgICAgICAgICAgICAgICB8IDIwMjAtMDEtMDIgICB8IDMuMCAgICAgICAgICAgfCBbdGFnIHYyLjEuMV0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YyLjEuMSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoyLjEuMCAgICAgICAgICAgICAgICAgICAgIHwgMjAxOS0xMS0xNiAgIHwgMy4wICAgICAgICAgICB8IFt0YWcgdjIuMS4wXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjIuMS4wKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjIuMC4xMCAgICAgICAgICAgICAgICAgICAgfCAyMDE5LTEwLTExICAgfCAzLjAgICAgICAgICAgIHwgW3RhZyB2Mi4wLjEwXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjIuMC4xMCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMi4wLjkgICAgICAgICAgICAgICAgICAgICB8IDIwMTktMDgtMjIgICB8IDMuMCAgICAgICAgICAgfCBbdGFnIHYyLjAuOV0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YyLjAuOSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoyLjAuOCAgICAgICAgICAgICAgICAgICAgIHwgMjAxOS0wNC0yNCAgIHwgMy4wICAgICAgICAgICB8IFt0YWcgdjIuMC44XShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjIuMC44KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjIuMC43ICAgICAgICAgICAgICAgICAgICAgfCAyMDE5LTAyLTE4ICAgfCAzLjAgICAgICAgICAgIHwgW3RhZyB2Mi4wLjddKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92Mi4wLjcpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMi4wLjYgICAgICAgICAgICAgICAgICAgICB8IDIwMTgtMTEtMjcgICB8IDMuMCAgICAgICAgICAgfCBbdGFnIHYyLjAuNl0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YyLjAuNikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoyLjAuNSAgICAgICAgICAgICAgICAgICAgIHwgMjAxOC0wOS0xOSAgIHwgMy4wICAgICAgICAgICB8IFt0YWcgdjIuMC41XShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjIuMC41KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjIuMC40ICAgICAgICAgICAgICAgICAgICAgfCAyMDE4LTA5LTA1ICAgfCAzLjAgICAgICAgICAgIHwgW3RhZyB2Mi4wLjRdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92Mi4wLjQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMi4wLjMgICAgICAgICAgICAgICAgICAgICB8IDIwMTgtMDgtMDkgICB8IDMuMCAgICAgICAgICAgfCBbdGFnIHYyLjAuM10oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YyLjAuMykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoxLjYuNCAoKipjdXJyZW50IHN0YWJsZSoqKXwgMjAyMS0xMi0yMyAgIHwgMi4wICAgICAgICAgICB8IFt0YWcgdjEuNi40XShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjEuNi40KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjEuNi4zICAgICAgICAgICAgICAgICAgICAgfCAyMDIxLTA5LTI5ICAgfCAyLjAgICAgICAgICAgIHwgW3RhZyB2MS42LjNdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92MS42LjMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMS42LjIgICAgICAgICAgICAgICAgICAgICB8IDIwMjAtMDctMDEgICB8IDIuMCAgICAgICAgICAgfCBbdGFnIHYxLjYuMl0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YxLjYuMikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoxLjYuMSAgICAgICAgICAgICAgICAgICAgIHwgMjAyMC0wNC0wMSAgIHwgMi4wICAgICAgICAgICB8IFt0YWcgdjEuNi4xXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjEuNi4xKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjEuNi4wICAgICAgICAgICAgICAgICAgICAgfCAyMDE5LTExLTE2ICAgfCAyLjAgICAgICAgICAgIHwgW3RhZyB2MS42LjBdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92MS42LjApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMS41LjI0ICAgICAgICAgICAgICAgICAgICB8IDIwMTktMTAtMTEgICB8IDIuMCAgICAgICAgICAgfCBbdGFnIHYxLjUuMjRdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92MS41LjI0KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoxLjUuMjMgICAgICAgICAgICAgICAgICAgIHwgMjAxOS0wOC0yMiAgIHwgMi4wICAgICAgICAgICB8IFt0YWcgdjEuNS4yM10oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YxLjUuMjMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjEuNS4yMiAgICAgICAgICAgICAgICAgICAgfCAyMDE5LTAyLTE4ICAgfCAyLjAgICAgICAgICAgIHwgW3RhZyB2MS41LjIyXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjEuNS4yMikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMS41LjIxICAgICAgICAgICAgICAgICAgICB8IDIwMTgtMDgtMDkgICB8IDIuMCAgICAgICAgICAgfCBbdGFnIHYxLjUuMjFdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92MS41LjIxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoxLjUuMjAgICAgICAgICAgICAgICAgICAgIHwgMjAxOC0wNS0yMyAgIHwgMi4wICAgICAgICAgICB8IFt0YWcgdjEuNS4yMF0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YxLjUuMjApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjIuMC4yICAgICAgICAgICAgICAgICAgICAgfCAyMDE4LTA1LTIzICAgfCAzLjAgICAgICAgICAgIHwgW3RhZyB2Mi4wLjJdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92Mi4wLjIpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMi4wLjEgICAgICAgICAgICAgICAgICAgICB8IDIwMTgtMDQtMTYgICB8IDMuMCAgICAgICAgICAgfCBbdGFnIHYyLjAuMV0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YyLjAuMSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoxLjUuMTkgICAgICAgICAgICAgICAgICAgIHwgMjAxOC0wNC0xNiAgIHwgMi4wICAgICAgICAgICB8IFt0YWcgdjEuNS4xOV0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YxLjUuMTkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjIuMC4wICAgICAgICAgICAgICAgICAgICAgfCAyMDE4LTAzLTIwICAgfCAzLjAgICAgICAgICAgIHwgW3RhZyB2Mi4wLjBdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92Mi4wLjApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMi4wLjAtcmM0ICAgICAgICAgICAgICAgICB8IDIwMTgtMDEtMjIgICB8IDMuMCAgICAgICAgICAgfCBbdGFnIHYyLjAuMC1yYzRdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92Mi4wLjAtcmM0KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoyLjAuMC1yYzMgICAgICAgICAgICAgICAgIHwgMjAxNy0xMS0yMSAgIHwgMy4wICAgICAgICAgICB8IFt0YWcgdjIuMC4wLXJjM10oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YyLjAuMC1yYzMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjIuMC4wLXJjMiAgICAgICAgICAgICAgICAgfCAyMDE3LTA5LTI5ICAgfCAzLjAgICAgICAgICAgIHwgW3RhZyB2Mi4wLjAtcmMyXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjIuMC4wLXJjMikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMi4wLjAtcmMxICAgICAgICAgICAgICAgICB8IDIwMTctMDgtMTcgICB8IDMuMCAgICAgICAgICAgfCBbdGFnIHYyLjAuMC1yYzFdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92Mi4wLjAtcmMxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoxLjUuMTggICAgICAgICAgICAgICAgICAgIHwgMjAxOC0wMS0yMiAgIHwgMi4wICAgICAgICAgICB8IFt0YWcgdjEuNS4xOF0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YxLjUuMTgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjEuNS4xNyAgICAgICAgICAgICAgICAgICAgfCAyMDE3LTExLTIxICAgfCAyLjAgICAgICAgICAgIHwgW3RhZyB2MS41LjE3XShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjEuNS4xNykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQKMS41LjE2ICAgICAgICAgICAgICAgICAgICB8IDIwMTctMDctMTUgICB8IDIuMCAgICAgICAgICAgfCBbdGFnIHYxLjUuMTZdKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvcmUvdHJlZS92MS41LjE2KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZAoxLjMuMTIgICAgICAgICAgICAgICAgICAgIHwgMjAxNC0xMi0yMyAgIHwgMS4yICAgICAgICAgICB8IFt0YWcgdjEuMy4xMl0oaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29yZS90cmVlL3YxLjMuMTIpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkCjEuMi40ICAgICAgICAgICAgICAgICAgICAgfCAyMDEzLTA2LTE5ICAgfCAxLjEgICAgICAgICAgIHwgW3RhZyBzd2FnZ2VyLXByb2plY3RfMi4xMC4wLTEuMi40XShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvc3dhZ2dlci1wcm9qZWN0XzIuMTAuMC0xLjIuNCkgfCBEZXByZWNhdGVkCjEuMC4wICAgICAgICAgICAgICAgICAgICAgfCAyMDExLTEwLTE2ICAgfCAxLjAgICAgICAgICAgIHwgW3RhZyB2MS4wXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3RyZWUvdjEuMCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEZXByZWNhdGVkCgoKIyMjIENoYW5nZSBIaXN0b3J5CklmIHlvdSdyZSBpbnRlcmVzdGVkIGluIHRoZSBjaGFuZ2UgaGlzdG9yeSBvZiBzd2FnZ2VyIGFuZCB0aGUgU3dhZ2dlciBDb3JlIGZyYW1ld29yaywgc2VlIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb3JlL3JlbGVhc2VzKS4KCiMjIyBQcmVyZXF1aXNpdGVzCllvdSBuZWVkIHRoZSBmb2xsb3dpbmcgaW5zdGFsbGVkIGFuZCBhdmFpbGFibGUgaW4geW91ciAkUEFUSDoKCiogSmF2YSA4CiogQXBhY2hlIG1hdmVuIDMuMC40IG9yIGdyZWF0ZXIKKiBKYWNrc29uIDIuNC41IG9yIGdyZWF0ZXIKCgojIyMgVG8gYnVpbGQgZnJvbSBzb3VyY2UgKGN1cnJlbnRseSAyLjIuMS1TTkFQU0hPVCkKYGBgCiMgZmlyc3QgdGltZSBidWlsZGluZyBsb2NhbGx5Cm12biAtTgpgYGAKClN1YnNlcXVlbnQgYnVpbGRzOgpgYGAKbXZuIGluc3RhbGwKYGBgCgpUaGlzIHdpbGwgYnVpbGQgdGhlIG1vZHVsZXMuCgpPZiBjb3Vyc2UgaWYgeW91IGRvbid0IHdhbnQgdG8gYnVpbGQgbG9jYWxseSB5b3UgY2FuIGdyYWIgYXJ0aWZhY3RzIGZyb20gbWF2ZW4gY2VudHJhbDoKCmBodHRwczovL3JlcG8xLm1hdmVuLm9yZy9tYXZlbjIvaW8vc3dhZ2dlci9jb3JlL2AKCiMjIFNhbXBsZSBBcHBzClRoZSBzYW1wbGVzIGhhdmUgbW92ZWQgdG8gW2EgbmV3IHJlcG9zaXRvcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLXNhbXBsZXMvdHJlZS8yLjApIGFuZCBjb250YWluIHZhcmlvdXMgaW50ZWdyYXRpb25zIGFuZCBjb25maWd1cmF0aW9ucy4KCiMjIFNlY3VyaXR5IGNvbnRhY3QKClBsZWFzZSBkaXNjbG9zZSBhbnkgc2VjdXJpdHktcmVsYXRlZCBpc3N1ZXMgb3IgdnVsbmVyYWJpbGl0aWVzIGJ5IGVtYWlsaW5nIFtzZWN1cml0eUBzd2FnZ2VyLmlvXShtYWlsdG86c2VjdXJpdHlAc3dhZ2dlci5pbyksIGluc3RlYWQgb2YgdXNpbmcgdGhlIHB1YmxpYyBpc3N1ZSB0cmFja2VyLgo=
        readmeEtag: '"98bc89d482d68119986f3131f16310ce12e8e2884a0aedfe502915818b5b9c60"'
        readmeLastModified: Mon, 04 Apr 2022 16:09:24 GMT
        description: >-
          Examples and server integrations for generating the Swagger API
          Specification, which enables easy access to your REST API
        created: '2011-07-05T23:44:11Z'
        updated: '2022-04-29T13:28:08Z'
        language: Java
        archived: false
        stars: 6972
        watchers: 6972
        forks: 2107
        owner: swagger-api
        logo: https://avatars.githubusercontent.com/u/7658037?v=4
        license: Apache-2.0
        repoEtag: '"719a0d4c2107223a733e1ed4b1e77a186957f81d27bb6ba07d90340a30d6c7f2"'
        repoLastModified: Fri, 29 Apr 2022 13:28:08 GMT
      id: 266d60df2d48ad8a47539de3c1071f3a
      swagger: 'No'
      version30: 'No'
      version31: 'No'
      stars: 6972
      watchers: 6972
      forks: 2107
      created: '2011-07-05T23:44:11Z'
      lastUpdated: '2022-04-29T13:28:08Z'
      readMe: >
        # Swagger Core <img
        src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
        height="50" align="right">


        **NOTE:** If you're looking for Swagger Core 1.5.X and OpenAPI 2.0,
        please refer to [1.5
        branch](https://github.com/swagger-api/swagger-core/tree/1.5).


        **NOTE:** Since version 2.1.7, Swagger Core also supports the Jakarta
        namespace. There are a parallel set of artifacts with the `-jakarta`
        suffix, providing the same functionality as the unsuffixed (i.e.:
        `javax`) artifacts.

        Please see the
        [Wiki](https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Getting-started)
        for more details.


        ![Build Test
        Deploy](https://github.com/swagger-api/swagger-core/workflows/Build%20Test%20Deploy%20master/badge.svg?branch=master)

        [![Maven
        Central](https://maven-badges.herokuapp.com/maven-central/io.swagger.core.v3/swagger-project/badge.svg?style=plastic)](https://maven-badges.herokuapp.com/maven-central/io.swagger.core.v3/swagger-project)


        Swagger Core is a Java implementation of the OpenAPI Specification.
        Current version supports *JAX-RS2* (`javax` and `jakarta` namespaces).


        ## Get started with Swagger Core!

        See the guide on [getting started with Swagger
        Core](https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Getting-started)
        to get started with adding Swagger to your API.


        ## See the Wiki!

        The [github wiki](https://github.com/swagger-api/swagger-core/wiki)
        contains documentation, samples, contributions, etc. Start there.


        ## Compatibility

        The OpenAPI Specification has undergone several revisions since initial
        creation in 2010.  The Swagger Core project has the following
        compatibilities with the OpenAPI Specification:


        Swagger core Version      | Release Date | OpenAPI Spec compatibility |
        Notes | Status

        ------------------------- | ------------ | -------------------------- |
        ----- | ----

        2.2.0 (**current stable**)| 2022-04-04   | 3.0           | [tag
        v2.2.0](https://github.com/swagger-api/swagger-core/tree/v2.2.0) |
        Supported

        2.1.13                     | 2022-02-07   | 3.0           | [tag
        v2.1.13](https://github.com/swagger-api/swagger-core/tree/v2.1.13) |
        Supported

        2.1.12                     | 2021-12-23   | 3.0           | [tag
        v2.1.12](https://github.com/swagger-api/swagger-core/tree/v2.1.12)                                          
        | Supported

        2.1.11                     | 2021-09-29   | 3.0           | [tag
        v2.1.11](https://github.com/swagger-api/swagger-core/tree/v2.1.11)                                          
        | Supported**

        2.1.10                     | 2021-06-28   | 3.0           | [tag
        v2.1.10](https://github.com/swagger-api/swagger-core/tree/v2.1.10)                                          
        | Supported

        2.1.9                     | 2021-04-20   | 3.0           | [tag
        v2.1.9](https://github.com/swagger-api/swagger-core/tree/v2.1.9)                                            
        | Supported

        2.1.8                     | 2021-04-18   | 3.0           | [tag
        v2.1.8](https://github.com/swagger-api/swagger-core/tree/v2.1.8)                                            
        | Supported

        2.1.7                     | 2021-02-18   | 3.0           | [tag
        v2.1.7](https://github.com/swagger-api/swagger-core/tree/v2.1.7)                                            
        | Supported

        2.1.6                     | 2020-12-04   | 3.0           | [tag
        v2.1.6](https://github.com/swagger-api/swagger-core/tree/v2.1.6)                                            
        | Supported

        2.1.5                     | 2020-10-01   | 3.0           | [tag
        v2.1.5](https://github.com/swagger-api/swagger-core/tree/v2.1.5)                                            
        | Supported

        2.1.4                     | 2020-07-24   | 3.0           | [tag
        v2.1.4](https://github.com/swagger-api/swagger-core/tree/v2.1.4)                                            
        | Supported

        2.1.3                     | 2020-06-27   | 3.0           | [tag
        v2.1.3](https://github.com/swagger-api/swagger-core/tree/v2.1.3)                                            
        | Supported

        2.1.2                     | 2020-04-01   | 3.0           | [tag
        v2.1.2](https://github.com/swagger-api/swagger-core/tree/v2.1.2)                                            
        | Supported

        2.1.1                     | 2020-01-02   | 3.0           | [tag
        v2.1.1](https://github.com/swagger-api/swagger-core/tree/v2.1.1)                                            
        | Supported

        2.1.0                     | 2019-11-16   | 3.0           | [tag
        v2.1.0](https://github.com/swagger-api/swagger-core/tree/v2.1.0)                                            
        | Supported

        2.0.10                    | 2019-10-11   | 3.0           | [tag
        v2.0.10](https://github.com/swagger-api/swagger-core/tree/v2.0.10)                                          
        | Supported

        2.0.9                     | 2019-08-22   | 3.0           | [tag
        v2.0.9](https://github.com/swagger-api/swagger-core/tree/v2.0.9)                                            
        | Supported

        2.0.8                     | 2019-04-24   | 3.0           | [tag
        v2.0.8](https://github.com/swagger-api/swagger-core/tree/v2.0.8)                                            
        | Supported

        2.0.7                     | 2019-02-18   | 3.0           | [tag
        v2.0.7](https://github.com/swagger-api/swagger-core/tree/v2.0.7)                                            
        | Supported

        2.0.6                     | 2018-11-27   | 3.0           | [tag
        v2.0.6](https://github.com/swagger-api/swagger-core/tree/v2.0.6)                                            
        | Supported

        2.0.5                     | 2018-09-19   | 3.0           | [tag
        v2.0.5](https://github.com/swagger-api/swagger-core/tree/v2.0.5)                                            
        | Supported

        2.0.4                     | 2018-09-05   | 3.0           | [tag
        v2.0.4](https://github.com/swagger-api/swagger-core/tree/v2.0.4)                                            
        | Supported

        2.0.3                     | 2018-08-09   | 3.0           | [tag
        v2.0.3](https://github.com/swagger-api/swagger-core/tree/v2.0.3)                                            
        | Supported

        1.6.4 (**current stable**)| 2021-12-23   | 2.0           | [tag
        v1.6.4](https://github.com/swagger-api/swagger-core/tree/v1.6.4)                                            
        | Supported

        1.6.3                     | 2021-09-29   | 2.0           | [tag
        v1.6.3](https://github.com/swagger-api/swagger-core/tree/v1.6.3)                                            
        | Supported

        1.6.2                     | 2020-07-01   | 2.0           | [tag
        v1.6.2](https://github.com/swagger-api/swagger-core/tree/v1.6.2)                                            
        | Supported

        1.6.1                     | 2020-04-01   | 2.0           | [tag
        v1.6.1](https://github.com/swagger-api/swagger-core/tree/v1.6.1)                                            
        | Supported

        1.6.0                     | 2019-11-16   | 2.0           | [tag
        v1.6.0](https://github.com/swagger-api/swagger-core/tree/v1.6.0)                                            
        | Supported

        1.5.24                    | 2019-10-11   | 2.0           | [tag
        v1.5.24](https://github.com/swagger-api/swagger-core/tree/v1.5.24)                                          
        | Supported

        1.5.23                    | 2019-08-22   | 2.0           | [tag
        v1.5.23](https://github.com/swagger-api/swagger-core/tree/v1.5.23)                                          
        | Supported

        1.5.22                    | 2019-02-18   | 2.0           | [tag
        v1.5.22](https://github.com/swagger-api/swagger-core/tree/v1.5.22)                                          
        | Supported

        1.5.21                    | 2018-08-09   | 2.0           | [tag
        v1.5.21](https://github.com/swagger-api/swagger-core/tree/v1.5.21)                                          
        | Supported

        1.5.20                    | 2018-05-23   | 2.0           | [tag
        v1.5.20](https://github.com/swagger-api/swagger-core/tree/v1.5.20)                                          
        | Supported

        2.0.2                     | 2018-05-23   | 3.0           | [tag
        v2.0.2](https://github.com/swagger-api/swagger-core/tree/v2.0.2)                                            
        | Supported

        2.0.1                     | 2018-04-16   | 3.0           | [tag
        v2.0.1](https://github.com/swagger-api/swagger-core/tree/v2.0.1)                                            
        | Supported

        1.5.19                    | 2018-04-16   | 2.0           | [tag
        v1.5.19](https://github.com/swagger-api/swagger-core/tree/v1.5.19)                                          
        | Supported

        2.0.0                     | 2018-03-20   | 3.0           | [tag
        v2.0.0](https://github.com/swagger-api/swagger-core/tree/v2.0.0)                                            
        | Supported

        2.0.0-rc4                 | 2018-01-22   | 3.0           | [tag
        v2.0.0-rc4](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc4)                                    
        | Supported

        2.0.0-rc3                 | 2017-11-21   | 3.0           | [tag
        v2.0.0-rc3](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc3)                                    
        | Supported

        2.0.0-rc2                 | 2017-09-29   | 3.0           | [tag
        v2.0.0-rc2](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc2)                                    
        | Supported

        2.0.0-rc1                 | 2017-08-17   | 3.0           | [tag
        v2.0.0-rc1](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc1)                                    
        | Supported

        1.5.18                    | 2018-01-22   | 2.0           | [tag
        v1.5.18](https://github.com/swagger-api/swagger-core/tree/v1.5.18)                                          
        | Supported

        1.5.17                    | 2017-11-21   | 2.0           | [tag
        v1.5.17](https://github.com/swagger-api/swagger-core/tree/v1.5.17)                                          
        | Supported

        1.5.16                    | 2017-07-15   | 2.0           | [tag
        v1.5.16](https://github.com/swagger-api/swagger-core/tree/v1.5.16)                                          
        | Supported

        1.3.12                    | 2014-12-23   | 1.2           | [tag
        v1.3.12](https://github.com/swagger-api/swagger-core/tree/v1.3.12)                                          
        | Supported

        1.2.4                     | 2013-06-19   | 1.1           | [tag
        swagger-project_2.10.0-1.2.4](https://github.com/swagger-api/swagger-core/tree/swagger-project_2.10.0-1.2.4)
        | Deprecated

        1.0.0                     | 2011-10-16   | 1.0           | [tag
        v1.0](https://github.com/swagger-api/swagger-core/tree/v1.0)                                                
        | Deprecated



        ### Change History

        If you're interested in the change history of swagger and the Swagger
        Core framework, see
        [here](https://github.com/swagger-api/swagger-core/releases).


        ### Prerequisites

        You need the following installed and available in your $PATH:


        * Java 8

        * Apache maven 3.0.4 or greater

        * Jackson 2.4.5 or greater



        ### To build from source (currently 2.2.1-SNAPSHOT)

        ```

        # first time building locally

        mvn -N

        ```


        Subsequent builds:

        ```

        mvn install

        ```


        This will build the modules.


        Of course if you don't want to build locally you can grab artifacts from
        maven central:


        `https://repo1.maven.org/maven2/io/swagger/core/`


        ## Sample Apps

        The samples have moved to [a new
        repository](https://github.com/swagger-api/swagger-samples/tree/2.0) and
        contain various integrations and configurations.


        ## Security contact


        Please disclose any security-related issues or vulnerabilities by
        emailing [security@swagger.io](mailto:security@swagger.io), instead of
        using the public issue tracker.
- category: Converters
  tools:
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name: swagger2openapi
      category:
        - Low-level Tooling
        - Converters
      language:
        - Node.js
        - CLI
      link: https://mermade.org.uk/openapi-converter
      repository: https://github.com/mermade/swagger2openapi
      source_description:
        - An OpenAPI / Swagger 2.0 to OpenAPI 3.0.x converter and validator
        - >-
          Upgrade files from OpenAPI v2.0 to v3.0, bundling into one mega file
          or respecting $refs. Part of oas-kit.
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          IyBPQVMtS2l0CgpUaGlzIGlzIHRoZSBtb25vLXJlcG8gZm9yIHRoZSBmb2xsb3dpbmcgcmVsYXRlZCBwcm9qZWN0cwoKKiBbc3dhZ2dlcjJvcGVuYXBpXShwYWNrYWdlcy9zd2FnZ2VyMm9wZW5hcGkvUkVBRE1FLm1kKQoqIFtvYXMtdmFsaWRhdG9yXShwYWNrYWdlcy9vYXMtdmFsaWRhdG9yL1JFQURNRS5tZCkKKiBbb2FzLWxpbnRlcl0ocGFja2FnZXMvb2FzLWxpbnRlci9SRUFETUUubWQpCiogW29hcy1yZXNvbHZlcl0ocGFja2FnZXMvb2FzLXJlc29sdmVyL1JFQURNRS5tZCkKKiBbb2FzLXNjaGVtYS13YWxrZXJdKHBhY2thZ2VzL29hcy1zY2hlbWEtd2Fsa2VyL1JFQURNRS5tZCkKKiBbb2FzLWtpdC1jb21tb25dKHBhY2thZ2VzL29hcy1raXQtY29tbW9uL1JFQURNRS5tZCkKKiBbcmVmdG9vbHNdKHBhY2thZ2VzL3JlZnRvb2xzL1JFQURNRS5tZCkKCiMjIERvY3VtZW50YXRpb24KCiogW01haW4gc2l0ZV0oaHR0cHM6Ly9tZXJtYWRlLmdpdGh1Yi5pby9vYXMta2l0KQoqIFtDSEFOR0VMT0ddKGh0dHBzOi8vZ2l0aHViLmNvbS9NZXJtYWRlL29hcy1raXQvYmxvYi9tYXN0ZXIvQ0hBTkdFTE9HLm1kI2NoYW5nZS1sb2cpCgojIyBPbmxpbmUgY29udmVydGVyL3ZhbGlkYXRvcgoKKiBbT3BlbkFQSS13ZWJjb252ZXJ0ZXJdKGh0dHBzOi8vbWVybWFkZS5vcmcudWsvb3BlbmFwaS1jb252ZXJ0ZXIpCgojIyBTdXBwb3J0ZWQgTm9kZS5qcyB2ZXJzaW9ucwoKQW55IExUUyB2ZXJzaW9uLiBJdCBpcyAqKm5vdCoqIHJlY29tbWVuZGVkIHRvIHVzZSBOb2RlLmpzIDEyLjE3LngsMTIuMTgueCBvciAxMi4xOS54IGR1ZSB0byBhbiBbaHR0cDIgYnVnXShodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzI4MDAxKS4KCiMjIERldmVsb3BtZW50CgoqIGNsb25lIHRoZSByZXBvc2l0b3J5CiogYG5wbSBpYCBpbiB0aGUgdG9wIGxldmVsIGRpcmVjdG9yeQoqIGBucHggbGVybmEgYm9vdHN0cmFwYAoKUGxlYXNlIHRyeSBhbmQga2VlcCBjb21taXRzIHJlbGF0ZWQgdG8gYSBzaW5nbGUgcGFja2FnZSBvciBwaWVjZSBvZiBmdW5jdGlvbmFsaXR5LiBQbGVhc2UgcmV2aWV3IHRoZQpbQ09OVFJJQlVUSU5HLm1kXShDT05UUklCVVRJTkcubWQpIGZvciBhZGRpdGlvbmFsIGRldGFpbHMuCgojIyBTdXBwb3J0aW5nIGRldmVsb3BtZW50CgoqIFtBUElzLmd1cnUgb3Blbi1jb2xsZWN0aXZlXShodHRwczovL29wZW5jb2xsZWN0aXZlLmNvbS9vcGVuYXBpLWRpcmVjdG9yeSkKKiBbTGlub2RlIFZQUyByZWZlcnJhbCBsaW5rXShodHRwczovL3d3dy5saW5vZGUuY29tLz9yPTU3MzRiZTQ2N2NjNTAxYjIzMjY3Y2Y2NmQ0NTFiYzMzOTA0MmRkZmEpCg==
        readmeEtag: '"2204f5a47e36a0f28553f57b55877f2baf4cfd11734d07f0910c878360eb99b6"'
        readmeLastModified: Wed, 07 Jul 2021 12:13:38 GMT
        description: >-
          Convert Swagger 2.0 definitions to OpenAPI 3.0 and
          resolve/validate/lint
        created: '2016-10-20T13:17:42Z'
        updated: '2022-04-21T02:22:25Z'
        language: JavaScript
        archived: false
        stars: 598
        watchers: 598
        forks: 107
        owner: Mermade
        logo: https://avatars.githubusercontent.com/u/15950345?v=4
        license: BSD-3-Clause
        repoEtag: '"3de6c4e4a845a05559726850a966eb738a97aab9be43351bdd9a8df3faf663a1"'
        repoLastModified: Thu, 21 Apr 2022 02:22:25 GMT
      foundInMaster: true
      homepage: https://github.com/mermade/swagger2openapi
      id: 48c5505c3c024f64480d123af42fdd97
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'No'
      stars: 598
      watchers: 598
      forks: 107
      created: '2016-10-20T13:17:42Z'
      lastUpdated: '2022-04-21T02:22:25Z'
      readMe: >
        # OAS-Kit


        This is the mono-repo for the following related projects


        * [swagger2openapi](packages/swagger2openapi/README.md)

        * [oas-validator](packages/oas-validator/README.md)

        * [oas-linter](packages/oas-linter/README.md)

        * [oas-resolver](packages/oas-resolver/README.md)

        * [oas-schema-walker](packages/oas-schema-walker/README.md)

        * [oas-kit-common](packages/oas-kit-common/README.md)

        * [reftools](packages/reftools/README.md)


        ## Documentation


        * [Main site](https://mermade.github.io/oas-kit)

        *
        [CHANGELOG](https://github.com/Mermade/oas-kit/blob/master/CHANGELOG.md#change-log)


        ## Online converter/validator


        * [OpenAPI-webconverter](https://mermade.org.uk/openapi-converter)


        ## Supported Node.js versions


        Any LTS version. It is **not** recommended to use Node.js
        12.17.x,12.18.x or 12.19.x due to an [http2
        bug](https://github.com/nodejs/node/issues/28001).


        ## Development


        * clone the repository

        * `npm i` in the top level directory

        * `npx lerna bootstrap`


        Please try and keep commits related to a single package or piece of
        functionality. Please review the

        [CONTRIBUTING.md](CONTRIBUTING.md) for additional details.


        ## Supporting development


        * [APIs.guru
        open-collective](https://opencollective.com/openapi-directory)

        * [Linode VPS referral
        link](https://www.linode.com/?r=5734be467cc501b23267cf66d451bc339042ddfa)
    - source:
        - IMPLEMENTATIONS.md
        - https://openapi.tools/
      name:
        - odata-openapi
        - OData OpenAPI
      homepage: https://github.com/oasis-tcs/odata-openapi
      language:
        - XSLT
        - Node.js
      source_description:
        - OData 4.0 to OpenAPI 3.0.0 converter
        - OData 4.0, 3.0, and 2.0 to OpenAPI v3.1, v3.0, and v2.0 converter
      category:
        - Low-level Tooling
        - Converters
      repository: https://github.com/oasis-tcs/odata-openapi
      v2: true
      v3: true
      repositoryMetadata:
        base64Readme: >-
          PGRpdj4KPGgyPlJFQURNRTwvaDI+Cgo8cD5NZW1iZXJzIG9mIHRoZSA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9jb21taXR0ZWVzL29kYXRhLyI+T0FTSVMgT3BlbiBEYXRhIFByb3RvY29sIChPRGF0YSkgVGVjaG5pY2FsIENvbW1pdHRlZTwvYT4gY3JlYXRlIGFuZCBtYW5hZ2UgdGVjaG5pY2FsIGNvbnRlbnQgaW4gdGhpcyBUQyBHaXRIdWIgcmVwb3NpdG9yeSAoIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaSI+aHR0cHM6Ly9naXRodWIuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpPC9hPiApIGFzIHBhcnQgb2YgdGhlIFRDJ3MgY2hhcnRlcmVkIHdvcmsgKDxpPmkuZS48L2k+LCB0aGUgcHJvZ3JhbSBvZiB3b3JrIGFuZCBkZWxpdmVyYWJsZXMgZGVzY3JpYmVkIGluIGl0cyA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9jb21taXR0ZWVzL29kYXRhL2NoYXJ0ZXIucGhwIj5jaGFydGVyPC9hPikuPC9wPgoKPHA+T0FTSVMgVEMgR2l0SHViIHJlcG9zaXRvcmllcywgYXMgZGVzY3JpYmVkIGluIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3Jlc291cmNlcy90Y2FkbWluL2dpdGh1Yi1yZXBvc2l0b3JpZXMtZm9yLW9hc2lzLXRjLW1lbWJlcnMtY2hhcnRlcmVkLXdvcmsiPkdpdEh1YiBSZXBvc2l0b3JpZXMgZm9yIE9BU0lTIFRDIE1lbWJlcnMnIENoYXJ0ZXJlZCBXb3JrPC9hPiwgYXJlIGdvdmVybmVkIGJ5IHRoZSBPQVNJUyA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9wb2xpY2llcy1ndWlkZWxpbmVzL3RjLXByb2Nlc3MiPlRDIFByb2Nlc3M8L2E+LCA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9wb2xpY2llcy1ndWlkZWxpbmVzL2lwciI+SVBSIFBvbGljeTwvYT4sIGFuZCBvdGhlciBwb2xpY2llcywgc2ltaWxhciB0byBUQyBXaWtpcywgVEMgSklSQSBpc3N1ZXMgdHJhY2tpbmcgaW5zdGFuY2VzLCBUQyBTVk4vU3VidmVyc2lvbiByZXBvc2l0b3JpZXMsIGV0Yy4gIFdoaWxlIHRoZXkgbWFrZSB1c2Ugb2YgcHVibGljIEdpdEh1YiByZXBvc2l0b3JpZXMsIHRoZXNlIFRDIEdpdEh1YiByZXBvc2l0b3JpZXMgYXJlIGRpc3RpbmN0IGZyb20gPGEgaHJlZj0iaHR0cHM6Ly93d3cub2FzaXMtb3Blbi5vcmcvcmVzb3VyY2VzL29wZW4tcmVwb3NpdG9yaWVzIj5PQVNJUyBPcGVuIFJlcG9zaXRvcmllczwvYT4sIHdoaWNoIGFyZSB1c2VkIGZvciBkZXZlbG9wbWVudCBvZiBvcGVuIHNvdXJjZSA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9yZXNvdXJjZXMvb3Blbi1yZXBvc2l0b3JpZXMvbGljZW5zZXMiPmxpY2Vuc2VkPC9hPiBjb250ZW50LjwvcD4KPC9kaXY+Cgo8ZGl2Pgo8aDM+RGVzY3JpcHRpb248L2gzPgoKPHA+VGhlIHB1cnBvc2Ugb2YgdGhpcyByZXBvc2l0b3J5IGlzIHRvIHN1cHBvcnQgZGV2ZWxvcG1lbnQgb2YgdG9vbHMgZm9yIHByb2R1Y2luZyA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vT0FJL09wZW5BUEktU3BlY2lmaWNhdGlvbiI+T3BlbkFQSTwvYT4gZGVzY3JpcHRpb25zIGZvciBPRGF0YSBzZXJ2aWNlcy48L3A+CjxwPlBsYW5uZWQgd29yayBpdGVtcyBpbmNsdWRlOgo8dWw+CjxsaT5jb252ZXJ0IE9EYXRhIENTREwgSlNPTiBvciBPRGF0YSBDU0RMIFhNTCB0byBPcGVuQVBJIEpTT048L2xpPgo8bGk+ZXhhbXBsZSBYTUwgZmlsZXM8L2xpPgo8bGk+ZXhhbXBsZSBvcGVuYXBpLmpzb24gZmlsZXM8L2xpPgo8bGk+ZXhhbXBsZSBmaWxlcyBmb3IgdGhlIGxpdmUgb2RhdGEub3JnIHNlcnZpY2VzPC9saT4KPC91bD48L3A+Cgo8L2Rpdj4KCjxkaXY+CjxoMz5Db250cmlidXRpb25zPC9oMz4KPHA+QXMgc3RhdGVkIGluIHRoaXMgcmVwb3NpdG9yeSdzIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9ibG9iL21hc3Rlci9DT05UUklCVVRJTkcubWQiPkNPTlRSSUJVVElORyBmaWxlPC9hPiwgY29udHJpYnV0b3JzIHRvIHRoaXMgcmVwb3NpdG9yeSBhcmUgZXhwZWN0ZWQgdG8gYmUgTWVtYmVycyBvZiB0aGUgT0FTSVMgT0RhdGEgVEMsIGZvciBhbnkgc3Vic3RhbnRpdmUgY2hhbmdlIHJlcXVlc3RzLiAgQW55b25lIHdpc2hpbmcgdG8gY29udHJpYnV0ZSB0byB0aGlzIEdpdEh1YiBwcm9qZWN0IGFuZCA8YSBocmVmPSJodHRwczovL3d3dy5vYXNpcy1vcGVuLm9yZy9qb2luL3BhcnRpY2lwYXRpb24taW5zdHJ1Y3Rpb25zIj5wYXJ0aWNpcGF0ZTwvYT4gaW4gdGhlIFRDJ3MgdGVjaG5pY2FsIGFjdGl2aXR5IGlzIGludml0ZWQgdG8gam9pbiBhcyBhbiBPQVNJUyBUQyBNZW1iZXIuICBQdWJsaWMgZmVlZGJhY2sgaXMgYWxzbyBhY2NlcHRlZCwgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3BvbGljaWVzLWd1aWRlbGluZXMvaXByI2FwcGVuZGl4YSI+T0FTSVMgRmVlZGJhY2sgTGljZW5zZTwvYT4uPC9wPgo8L2Rpdj4KCjxkaXY+CjxoMz5MaWNlbnNpbmc8L2gzPgo8cD5QbGVhc2Ugc2VlIHRoZSA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vb2FzaXMtdGNzL29kYXRhLW9wZW5hcGkvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZCI+TElDRU5TRTwvYT4gZmlsZSBmb3IgZGVzY3JpcHRpb24gb2YgdGhlIGxpY2Vuc2UgdGVybXMgYW5kIE9BU0lTIHBvbGljaWVzIGFwcGxpY2FibGUgdG8gdGhlIFRDJ3Mgd29yayBpbiB0aGlzIEdpdEh1YiBwcm9qZWN0LiBDb250ZW50IGluIHRoaXMgcmVwb3NpdG9yeSBpcyBpbnRlbmRlZCB0byBiZSBwYXJ0IG9mIHRoZSBPRGF0YSBUQydzIHBlcm1hbmVudCByZWNvcmQgb2YgYWN0aXZpdHksIHZpc2libGUgYW5kIGZyZWVseSBhdmFpbGFibGUgZm9yIGFsbCB0byB1c2UsIHN1YmplY3QgdG8gYXBwbGljYWJsZSBPQVNJUyBwb2xpY2llcywgYXMgcHJlc2VudGVkIGluIHRoZSByZXBvc2l0b3J5IDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9ibG9iL21hc3Rlci9MSUNFTlNFLm1kIj5MSUNFTlNFPC9hPiBmaWxlLjwvcD4KPC9kaXY+CgoKPGgzPkZ1cnRoZXIgRGVzY3JpcHRpb24gb2YgdGhpcyBSZXBvc2l0b3J5PC9oMz4KClRoZSBPRGF0YSBUQyBoYXMgcHVibGlzaGVkIHRoZSBbT0RhdGEgdG8gT3BlbkFQSSBNYXBwaW5nIFZlcnNpb24gMS4wXShodHRwOi8vZG9jcy5vYXNpcy1vcGVuLm9yZy9vZGF0YS9vZGF0YS1vcGVuYXBpL3YxLjAvb2RhdGEtb3BlbmFwaS12MS4wLmh0bWwpLCBhIHJlY29tbWVuZGF0aW9uIG9uIGhvdyB0byBjcmVhdGUgT3BlbkFQSSBkZXNjcmlwdGlvbnMgZm9yIE9EYXRhIHNlcnZpY2VzLiBUaGlzIHByb2plY3QgY29udGFpbnMgdHdvIHByb29mLW9mLWNvbmNlcHQgaW1wbGVtZW50YXRpb25zIG9mIHRoYXQgbWFwcGluZywgW29uZSB1c2luZyBKYXZhU2NyaXB0XShsaWIpLCBhbmQgW29uZSB1c2luZyBYU0xUXSh0b29scykuCgpUaGUgW2BleGFtcGxlc2AgZm9sZGVyXShleGFtcGxlcykgY29udGFpbnMgW09wZW5BUEkgMy4wLjJdKGh0dHBzOi8vZ2l0aHViLmNvbS9PQUkvT3BlbkFQSS1TcGVjaWZpY2F0aW9uKSBkZXNjcmlwdGlvbnMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZCBmcm9tIHRoZSBYTUwgYCRtZXRhZGF0YWAgZG9jdW1lbnRzIG9mIGxpdmUgYW5kIGV4YW1wbGUgT0RhdGEgc2VydmljZXMgd2l0aCB0aGVzZSBwcm9vZi1vZi1jb25jZXB0IGltcGxlbWVudGF0aW9ucy4gCgpUaGUgZW50aXR5LXJlbGF0aW9uc2hpcCBkaWFncmFtcyB2aXN1YWxpemluZyB0aGUgcmVzb3VyY2UgbW9kZWxzIG9mIGVhY2ggc2VydmljZSBhcmUgZ2VuZXJhdGVkIG9uLXRoZS1mbHkgd2l0aCBbeVVNTF0oaHR0cDovL3l1bWwubWUvKS4KCk9wZW5BUEkgZGVzY3JpcHRpb25zIGZvciBsaXZlIGV4YW1wbGUgT0RhdGEgc2VydmljZXMgYXQgW3d3dy5vZGF0YS5vcmddKGh0dHA6Ly93d3cub2RhdGEub3JnLykKIC0gW1RyaXBQaW4gKHJlYWQvd3JpdGUpXShodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby8/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9tYXN0ZXIvZXhhbXBsZXMvVHJpcFBpbi5vcGVuYXBpMy5qc29uKQogLSBbU2ltcGxlIHJlYWQvd3JpdGUgc2VydmljZV0oaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vP3VybD1odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vb2FzaXMtdGNzL29kYXRhLW9wZW5hcGkvbWFzdGVyL2V4YW1wbGVzL2V4YW1wbGUub3BlbmFwaTMuanNvbikKIC0gW05vcnRod2luZCAocmVhZCldKGh0dHA6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvLz91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpL21hc3Rlci9leGFtcGxlcy9Ob3J0aHdpbmQub3BlbmFwaTMuanNvbikKCk9wZW5BUEkgZGVzY3JpcHRpb25zIGZvciBPRGF0YSBzZXJ2aWNlcyB0aGF0IHJlZmVyZW5jZSBlYWNoIG90aGVyIChjcm9zcy1zZXJ2aWNlIHJlZmVyZW5jZXMpCiAtIFtQZW9wbGVdKGh0dHA6Ly9wZXRzdG9yZS5zd2FnZ2VyLmlvLz91cmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29hc2lzLXRjcy9vZGF0YS1vcGVuYXBpL21hc3Rlci9leGFtcGxlcy9QZW9wbGUub3BlbmFwaTMuanNvbikKIC0gW1Byb2R1Y3RzXShodHRwOi8vcGV0c3RvcmUuc3dhZ2dlci5pby8/dXJsPWh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9vYXNpcy10Y3Mvb2RhdGEtb3BlbmFwaS9tYXN0ZXIvZXhhbXBsZXMvUHJvZHVjdHMub3BlbmFwaTMuanNvbikKCjxkaXY+CjxoMz5Db250YWN0PC9oMz4KPHA+UGxlYXNlIHNlbmQgcXVlc3Rpb25zIG9yIGNvbW1lbnRzIGFib3V0IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL3Jlc291cmNlcy90Y2FkbWluL2dpdGh1Yi1yZXBvc2l0b3JpZXMtZm9yLW9hc2lzLXRjLW1lbWJlcnMtY2hhcnRlcmVkLXdvcmsiPk9BU0lTIFRDIEdpdEh1YiByZXBvc2l0b3JpZXM8L2E+IHRvIHRoZSBPQVNJUyA8YSBocmVmPSJtYWlsdG86dGMtYWRtaW5Ab2FzaXMtb3Blbi5vcmciPlRDIEFkbWluaXN0cmF0b3I8L2E+LiAgRm9yIHF1ZXN0aW9ucyBhYm91dCBjb250ZW50IGluIHRoaXMgcmVwb3NpdG9yeSwgcGxlYXNlIGNvbnRhY3QgdGhlIFRDIENoYWlyIG9yIENvLUNoYWlycyBhcyBsaXN0ZWQgb24gdGhlIHRoZSBPRGF0YSBUQydzIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm9hc2lzLW9wZW4ub3JnL2NvbW1pdHRlZXMvb2RhdGEvIj5ob21lIHBhZ2U8L2E+LjwvcD4KPC9kaXY+Cg==
        readmeEtag: '"4688bebb62d8eac0d103d205eba4240046456df2c542b2c463db0700539af0db"'
        readmeLastModified: Mon, 11 Apr 2022 07:17:27 GMT
        description: >-
          OASIS OData TC: Tools for producing API descriptions for OData
          services that adhere to the OpenAPI Specification
        created: '2016-11-17T21:11:22Z'
        updated: '2022-04-13T09:09:28Z'
        language: XSLT
        archived: false
        stars: 135
        watchers: 135
        forks: 59
        owner: oasis-tcs
        logo: https://avatars.githubusercontent.com/u/20116735?v=4
        license: NOASSERTION
        repoEtag: '"f50941e39f8085571f1608b9df2abe800fba17648a9d29bd670c0468d4a06c70"'
        repoLastModified: Wed, 13 Apr 2022 09:09:28 GMT
      foundInMaster: true
      v3_1: true
      id: 9039f84e8e8b63849cbf15578564033e
      swagger: 'Yes'
      version30: 'Yes'
      version31: 'Yes'
      stars: 135
      watchers: 135
      forks: 59
      created: '2016-11-17T21:11:22Z'
      lastUpdated: '2022-04-13T09:09:28Z'
      readMe: >
        <div>

        <h2>README</h2>


        <p>Members of the <a
        href="https://www.oasis-open.org/committees/odata/">OASIS Open Data
        Protocol (OData) Technical Committee</a> create and manage technical
        content in this TC GitHub repository ( <a
        href="https://github.com/oasis-tcs/odata-openapi">https://github.com/oasis-tcs/odata-openapi</a>
        ) as part of the TC's chartered work (<i>i.e.</i>, the program of work
        and deliverables described in its <a
        href="https://www.oasis-open.org/committees/odata/charter.php">charter</a>).</p>


        <p>OASIS TC GitHub repositories, as described in <a
        href="https://www.oasis-open.org/resources/tcadmin/github-repositories-for-oasis-tc-members-chartered-work">GitHub
        Repositories for OASIS TC Members' Chartered Work</a>, are governed by
        the OASIS <a
        href="https://www.oasis-open.org/policies-guidelines/tc-process">TC
        Process</a>, <a
        href="https://www.oasis-open.org/policies-guidelines/ipr">IPR
        Policy</a>, and other policies, similar to TC Wikis, TC JIRA issues
        tracking instances, TC SVN/Subversion repositories, etc.  While they
        make use of public GitHub repositories, these TC GitHub repositories are
        distinct from <a
        href="https://www.oasis-open.org/resources/open-repositories">OASIS Open
        Repositories</a>, which are used for development of open source <a
        href="https://www.oasis-open.org/resources/open-repositories/licenses">licensed</a>
        content.</p>

        </div>


        <div>

        <h3>Description</h3>


        <p>The purpose of this repository is to support development of tools for
        producing <a
        href="https://github.com/OAI/OpenAPI-Specification">OpenAPI</a>
        descriptions for OData services.</p>

        <p>Planned work items include:

        <ul>

        <li>convert OData CSDL JSON or OData CSDL XML to OpenAPI JSON</li>

        <li>example XML files</li>

        <li>example openapi.json files</li>

        <li>example files for the live odata.org services</li>

        </ul></p>


        </div>


        <div>

        <h3>Contributions</h3>

        <p>As stated in this repository's <a
        href="https://github.com/oasis-tcs/odata-openapi/blob/master/CONTRIBUTING.md">CONTRIBUTING
        file</a>, contributors to this repository are expected to be Members of
        the OASIS OData TC, for any substantive change requests.  Anyone wishing
        to contribute to this GitHub project and <a
        href="https://www.oasis-open.org/join/participation-instructions">participate</a>
        in the TC's technical activity is invited to join as an OASIS TC
        Member.  Public feedback is also accepted, subject to the terms of the
        <a
        href="https://www.oasis-open.org/policies-guidelines/ipr#appendixa">OASIS
        Feedback License</a>.</p>

        </div>


        <div>

        <h3>Licensing</h3>

        <p>Please see the <a
        href="https://github.com/oasis-tcs/odata-openapi/blob/master/LICENSE.md">LICENSE</a>
        file for description of the license terms and OASIS policies applicable
        to the TC's work in this GitHub project. Content in this repository is
        intended to be part of the OData TC's permanent record of activity,
        visible and freely available for all to use, subject to applicable OASIS
        policies, as presented in the repository <a
        href="https://github.com/oasis-tcs/odata-openapi/blob/master/LICENSE.md">LICENSE</a>
        file.</p>

        </div>



        <h3>Further Description of this Repository</h3>


        The OData TC has published the [OData to OpenAPI Mapping Version
        1.0](http://docs.oasis-open.org/odata/odata-openapi/v1.0/odata-openapi-v1.0.html),
        a recommendation on how to create OpenAPI descriptions for OData
        services. This project contains two proof-of-concept implementations of
        that mapping, [one using JavaScript](lib), and [one using XSLT](tools).


        The [`examples` folder](examples) contains [OpenAPI
        3.0.2](https://github.com/OAI/OpenAPI-Specification) descriptions that
        have been created from the XML `$metadata` documents of live and example
        OData services with these proof-of-concept implementations. 


        The entity-relationship diagrams visualizing the resource models of each
        service are generated on-the-fly with [yUML](http://yuml.me/).


        OpenAPI descriptions for live example OData services at
        [www.odata.org](http://www.odata.org/)
         - [TripPin (read/write)](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/TripPin.openapi3.json)
         - [Simple read/write service](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/example.openapi3.json)
         - [Northwind (read)](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/Northwind.openapi3.json)

        OpenAPI descriptions for OData services that reference each other
        (cross-service references)
         - [People](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/People.openapi3.json)
         - [Products](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/Products.openapi3.json)

        <div>

        <h3>Contact</h3>

        <p>Please send questions or comments about <a
        href="https://www.oasis-open.org/resources/tcadmin/github-repositories-for-oasis-tc-members-chartered-work">OASIS
        TC GitHub repositories</a> to the OASIS <a
        href="mailto:tc-admin@oasis-open.org">TC Administrator</a>.  For
        questions about content in this repository, please contact the TC Chair
        or Co-Chairs as listed on the the OData TC's <a
        href="https://www.oasis-open.org/committees/odata/">home page</a>.</p>

        </div>
